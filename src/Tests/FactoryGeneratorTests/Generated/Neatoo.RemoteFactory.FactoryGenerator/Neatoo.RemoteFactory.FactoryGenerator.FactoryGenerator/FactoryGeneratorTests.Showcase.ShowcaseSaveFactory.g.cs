#nullable enable
using Neatoo.RemoteFactory;
using Neatoo.RemoteFactory.Internal;
using Microsoft.Extensions.DependencyInjection;
using Neatoo.RemoteFactory.FactoryGeneratorTests.Shared;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

/*
							READONLY - DO NOT EDIT!!!!
							Generated by Neatoo.RemoteFactory
*/
namespace Neatoo.RemoteFactory.FactoryGeneratorTests.Showcase
{
    public interface IShowcaseSaveFactory : IShowcaseSaveClientFactory
    {
        IShowcaseSave Create();
        IShowcaseSave? Save(IShowcaseSave target);
        IShowcaseSave SaveNoDeleteNotNullable(IShowcaseSave target);
        Task<IShowcaseSave?> SaveTask(IShowcaseSave target);
        IShowcaseSave? SaveMatchedByParamType(IShowcaseSave target, int a);
    }

    internal class ShowcaseSaveFactory : ShowcaseSaveClientFactory, IShowcaseSaveFactory, IFactorySave<ShowcaseSave>
    {
        private readonly IServiceProvider ServiceProvider;
        public ShowcaseSaveFactory(IServiceProvider serviceProvider, IFactoryCore<IShowcaseSave> factoryCore) : base(factoryCore)
        {
            this.ServiceProvider = serviceProvider;
            SaveRemoteProperty = LocalSaveRemote;
        }

        public ShowcaseSaveFactory(IServiceProvider serviceProvider, IMakeRemoteDelegateRequest remoteMethodDelegate, IFactoryCore<IShowcaseSave> factoryCore) : base(remoteMethodDelegate, factoryCore)
        {
            this.ServiceProvider = serviceProvider;
        }

        public virtual IShowcaseSave Create()
        {
            return LocalCreate();
        }

        public IShowcaseSave LocalCreate()
        {
            return DoFactoryMethodCall(FactoryOperation.Create, () => new ShowcaseSave());
        }

        public IShowcaseSave LocalInsert(IShowcaseSave target)
        {
            var cTarget = (ShowcaseSave)target ?? throw new Exception("IShowcaseSave must implement ShowcaseSave");
            var service = ServiceProvider.GetRequiredService<IService>();
            return DoFactoryMethodCall(cTarget, FactoryOperation.Insert, () => cTarget.Insert(service));
        }

        public IShowcaseSave LocalUpdate(IShowcaseSave target)
        {
            var cTarget = (ShowcaseSave)target ?? throw new Exception("IShowcaseSave must implement ShowcaseSave");
            var service = ServiceProvider.GetRequiredService<IService>();
            return DoFactoryMethodCall(cTarget, FactoryOperation.Update, () => cTarget.Update(service));
        }

        public IShowcaseSave LocalDelete(IShowcaseSave target)
        {
            var cTarget = (ShowcaseSave)target ?? throw new Exception("IShowcaseSave must implement ShowcaseSave");
            var service = ServiceProvider.GetRequiredService<IService>();
            return DoFactoryMethodCall(cTarget, FactoryOperation.Delete, () => cTarget.Delete(service));
        }

        public IShowcaseSave LocalInsertMatchedByParamType(IShowcaseSave target, int a)
        {
            var cTarget = (ShowcaseSave)target ?? throw new Exception("IShowcaseSave must implement ShowcaseSave");
            return DoFactoryMethodCall(cTarget, FactoryOperation.Insert, () => cTarget.InsertMatchedByParamType(a));
        }

        public IShowcaseSave LocalUpdateMatchedByParamType(IShowcaseSave target, int b)
        {
            var cTarget = (ShowcaseSave)target ?? throw new Exception("IShowcaseSave must implement ShowcaseSave");
            return DoFactoryMethodCall(cTarget, FactoryOperation.Update, () => cTarget.UpdateMatchedByParamType(b));
        }

        public IShowcaseSave LocalDeleteMatchedByParamType(IShowcaseSave target, int c)
        {
            var cTarget = (ShowcaseSave)target ?? throw new Exception("IShowcaseSave must implement ShowcaseSave");
            return DoFactoryMethodCall(cTarget, FactoryOperation.Delete, () => cTarget.DeleteMatchedByParamType(c));
        }

        public IShowcaseSave LocalInsertNoDeleteNotNullable(IShowcaseSave target)
        {
            var cTarget = (ShowcaseSave)target ?? throw new Exception("IShowcaseSave must implement ShowcaseSave");
            return DoFactoryMethodCall(cTarget, FactoryOperation.Insert, () => cTarget.InsertNoDeleteNotNullable());
        }

        public IShowcaseSave LocalUpdateNoDeleteNotNullable(IShowcaseSave target)
        {
            var cTarget = (ShowcaseSave)target ?? throw new Exception("IShowcaseSave must implement ShowcaseSave");
            return DoFactoryMethodCall(cTarget, FactoryOperation.Update, () => cTarget.UpdateNoDeleteNotNullable());
        }

        public Task<IShowcaseSave> LocalInsertTask(IShowcaseSave target)
        {
            var cTarget = (ShowcaseSave)target ?? throw new Exception("IShowcaseSave must implement ShowcaseSave");
            return DoFactoryMethodCallAsync(cTarget, FactoryOperation.Insert, () => cTarget.InsertTask());
        }

        public Task<IShowcaseSave> LocalUpdateTask(IShowcaseSave target)
        {
            var cTarget = (ShowcaseSave)target ?? throw new Exception("IShowcaseSave must implement ShowcaseSave");
            return DoFactoryMethodCallAsync(cTarget, FactoryOperation.Update, () => cTarget.UpdateTask());
        }

        public Task<IShowcaseSave> LocalDeleteTask(IShowcaseSave target)
        {
            var cTarget = (ShowcaseSave)target ?? throw new Exception("IShowcaseSave must implement ShowcaseSave");
            return DoFactoryMethodCallAsync(cTarget, FactoryOperation.Delete, () => cTarget.DeleteTask());
        }

        public Task<IShowcaseSave> LocalInsertRemote(IShowcaseSave target)
        {
            var cTarget = (ShowcaseSave)target ?? throw new Exception("IShowcaseSave must implement ShowcaseSave");
            var service = ServiceProvider.GetRequiredService<IServerOnlyService>();
            return Task.FromResult(DoFactoryMethodCall(cTarget, FactoryOperation.Insert, () => cTarget.InsertRemote(service)));
        }

        public Task<IShowcaseSave> LocalUpdateRemote(IShowcaseSave target)
        {
            var cTarget = (ShowcaseSave)target ?? throw new Exception("IShowcaseSave must implement ShowcaseSave");
            var service = ServiceProvider.GetRequiredService<IServerOnlyService>();
            return Task.FromResult(DoFactoryMethodCall(cTarget, FactoryOperation.Update, () => cTarget.UpdateRemote(service)));
        }

        public virtual IShowcaseSave? Save(IShowcaseSave target)
        {
            return LocalSave(target);
        }

        public virtual IShowcaseSave? LocalSave(IShowcaseSave target)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return default(IShowcaseSave);
                }

                return LocalDelete(target);
            }
            else if (target.IsNew)
            {
                return LocalInsert(target);
            }
            else
            {
                return LocalUpdate(target);
            }
        }

        async Task<IFactorySaveMeta?> IFactorySave<ShowcaseSave>.Save(ShowcaseSave target)
        {
            return await Task.FromResult((IFactorySaveMeta? )Save(target));
        }

        public virtual IShowcaseSave SaveNoDeleteNotNullable(IShowcaseSave target)
        {
            return LocalSaveNoDeleteNotNullable(target);
        }

        public virtual IShowcaseSave LocalSaveNoDeleteNotNullable(IShowcaseSave target)
        {
            if (target.IsDeleted)
            {
                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsertNoDeleteNotNullable(target);
            }
            else
            {
                return LocalUpdateNoDeleteNotNullable(target);
            }
        }

        public virtual Task<IShowcaseSave?> SaveTask(IShowcaseSave target)
        {
            return LocalSaveTask(target);
        }

        public virtual async Task<IShowcaseSave?> LocalSaveTask(IShowcaseSave target)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return default(IShowcaseSave);
                }

                return await LocalDeleteTask(target);
            }
            else if (target.IsNew)
            {
                return await LocalInsertTask(target);
            }
            else
            {
                return await LocalUpdateTask(target);
            }
        }

        public virtual async Task<IShowcaseSave> LocalSaveRemote(IShowcaseSave target)
        {
            if (target.IsDeleted)
            {
                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return await LocalInsertRemote(target);
            }
            else
            {
                return await LocalUpdateRemote(target);
            }
        }

        public virtual IShowcaseSave? SaveMatchedByParamType(IShowcaseSave target, int a)
        {
            return LocalSaveMatchedByParamType(target, a);
        }

        public virtual IShowcaseSave? LocalSaveMatchedByParamType(IShowcaseSave target, int a)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return default(IShowcaseSave);
                }

                return LocalDeleteMatchedByParamType(target, a);
            }
            else if (target.IsNew)
            {
                return LocalInsertMatchedByParamType(target, a);
            }
            else
            {
                return LocalUpdateMatchedByParamType(target, a);
            }
        }

        public static void FactoryServiceRegistrar(IServiceCollection services, NeatooFactory remoteLocal)
        {
            services.AddScoped<ShowcaseSaveFactory>();
            services.AddScoped<IShowcaseSaveFactory, ShowcaseSaveFactory>();
            services.AddScoped<SaveRemoteDelegate>(cc =>
            {
                var factory = cc.GetRequiredService<ShowcaseSaveFactory>();
                return (IShowcaseSave target) => factory.LocalSaveRemote(target);
            });
            services.AddTransient<ShowcaseSave>();
            services.AddTransient<IShowcaseSave, ShowcaseSave>();
            services.AddScoped<IFactorySave<ShowcaseSave>, ShowcaseSaveFactory>();
        }
    }
}