#nullable enable
#if !EXCLUDECLIENTFACTORIES
using Neatoo.RemoteFactory;
using Neatoo.RemoteFactory.Internal;
using Microsoft.Extensions.DependencyInjection;
using static Neatoo.RemoteFactory.FactoryGeneratorTests.Factory.RemoteWriteTests;
using Neatoo.RemoteFactory.FactoryGeneratorTests;
using Neatoo.RemoteFactory.FactoryGeneratorTests.Shared;
using System.Reflection;
using Xunit;

/*
							READONLY - DO NOT EDIT!!!!
							Generated by Neatoo.RemoteFactory
*/
namespace Neatoo.RemoteFactory.FactoryGeneratorTests.Factory
{
    public interface IRemoteWriteObjectClientFactory
    {
        Task<RemoteWriteObject?> SaveVoid(RemoteWriteObject target);
        Task<RemoteWriteObject?> SaveBool(RemoteWriteObject target);
        Task<RemoteWriteObject?> SaveTask(RemoteWriteObject target);
        Task<RemoteWriteObject?> SaveTaskBool(RemoteWriteObject target);
        Task<RemoteWriteObject?> SaveVoidDep(RemoteWriteObject target);
        Task<RemoteWriteObject?> SaveBoolTrueDep(RemoteWriteObject target);
        Task<RemoteWriteObject?> SaveBoolFalseDep(RemoteWriteObject target);
        Task<RemoteWriteObject?> SaveTaskDep(RemoteWriteObject target);
        Task<RemoteWriteObject?> SaveTaskBoolDep(RemoteWriteObject target);
        Task<RemoteWriteObject?> SaveTaskBoolFalseDep(RemoteWriteObject target);
        Task<RemoteWriteObject?> SaveVoid(RemoteWriteObject target, int? param);
        Task<RemoteWriteObject?> SaveBool(RemoteWriteObject target, int? param);
        Task<RemoteWriteObject?> SaveTask(RemoteWriteObject target, int? param);
        Task<RemoteWriteObject?> SaveTaskBool(RemoteWriteObject target, int? param);
        Task<RemoteWriteObject?> SaveTaskBoolFalse(RemoteWriteObject target, int? param);
        Task<RemoteWriteObject?> SaveVoidDep(RemoteWriteObject target, int? param);
        Task<RemoteWriteObject?> SaveBoolTrueDep(RemoteWriteObject target, int? param);
        Task<RemoteWriteObject?> SaveBoolFalseDep(RemoteWriteObject target, int? param);
        Task<RemoteWriteObject?> SaveTaskDep(RemoteWriteObject target, int? param);
        Task<RemoteWriteObject?> SaveTaskBoolDep(RemoteWriteObject target, int? param);
    }

    internal class RemoteWriteObjectClientFactory : FactorySaveBase<RemoteWriteObject>, IRemoteWriteObjectClientFactory
    {
        protected readonly IMakeRemoteDelegateRequest? MakeRemoteDelegateRequest;
        // Delegates
        public delegate Task<RemoteWriteObject?> SaveVoidDelegate(RemoteWriteObject target);
        public delegate Task<RemoteWriteObject?> SaveBoolDelegate(RemoteWriteObject target);
        public delegate Task<RemoteWriteObject?> SaveTaskDelegate(RemoteWriteObject target);
        public delegate Task<RemoteWriteObject?> SaveTaskBoolDelegate(RemoteWriteObject target);
        public delegate Task<RemoteWriteObject?> SaveVoidDepDelegate(RemoteWriteObject target);
        public delegate Task<RemoteWriteObject?> SaveBoolTrueDepDelegate(RemoteWriteObject target);
        public delegate Task<RemoteWriteObject?> SaveBoolFalseDepDelegate(RemoteWriteObject target);
        public delegate Task<RemoteWriteObject?> SaveTaskDepDelegate(RemoteWriteObject target);
        public delegate Task<RemoteWriteObject?> SaveTaskBoolDepDelegate(RemoteWriteObject target);
        public delegate Task<RemoteWriteObject?> SaveTaskBoolFalseDepDelegate(RemoteWriteObject target);
        public delegate Task<RemoteWriteObject?> SaveVoid1Delegate(RemoteWriteObject target, int? param);
        public delegate Task<RemoteWriteObject?> SaveBool1Delegate(RemoteWriteObject target, int? param);
        public delegate Task<RemoteWriteObject?> SaveTask1Delegate(RemoteWriteObject target, int? param);
        public delegate Task<RemoteWriteObject?> SaveTaskBool1Delegate(RemoteWriteObject target, int? param);
        public delegate Task<RemoteWriteObject?> SaveTaskBoolFalseDelegate(RemoteWriteObject target, int? param);
        public delegate Task<RemoteWriteObject?> SaveVoidDep1Delegate(RemoteWriteObject target, int? param);
        public delegate Task<RemoteWriteObject?> SaveBoolTrueDep1Delegate(RemoteWriteObject target, int? param);
        public delegate Task<RemoteWriteObject?> SaveBoolFalseDep1Delegate(RemoteWriteObject target, int? param);
        public delegate Task<RemoteWriteObject?> SaveTaskDep1Delegate(RemoteWriteObject target, int? param);
        public delegate Task<RemoteWriteObject?> SaveTaskBoolDep1Delegate(RemoteWriteObject target, int? param);
        // Delegate Properties to provide Local or Remote fork in execution
        public SaveVoidDelegate SaveVoidProperty { get; protected set; }
        public SaveBoolDelegate SaveBoolProperty { get; protected set; }
        public SaveTaskDelegate SaveTaskProperty { get; protected set; }
        public SaveTaskBoolDelegate SaveTaskBoolProperty { get; protected set; }
        public SaveVoidDepDelegate SaveVoidDepProperty { get; protected set; }
        public SaveBoolTrueDepDelegate SaveBoolTrueDepProperty { get; protected set; }
        public SaveBoolFalseDepDelegate SaveBoolFalseDepProperty { get; protected set; }
        public SaveTaskDepDelegate SaveTaskDepProperty { get; protected set; }
        public SaveTaskBoolDepDelegate SaveTaskBoolDepProperty { get; protected set; }
        public SaveTaskBoolFalseDepDelegate SaveTaskBoolFalseDepProperty { get; protected set; }
        public SaveVoid1Delegate SaveVoid1Property { get; protected set; }
        public SaveBool1Delegate SaveBool1Property { get; protected set; }
        public SaveTask1Delegate SaveTask1Property { get; protected set; }
        public SaveTaskBool1Delegate SaveTaskBool1Property { get; protected set; }
        public SaveTaskBoolFalseDelegate SaveTaskBoolFalseProperty { get; protected set; }
        public SaveVoidDep1Delegate SaveVoidDep1Property { get; protected set; }
        public SaveBoolTrueDep1Delegate SaveBoolTrueDep1Property { get; protected set; }
        public SaveBoolFalseDep1Delegate SaveBoolFalseDep1Property { get; protected set; }
        public SaveTaskDep1Delegate SaveTaskDep1Property { get; protected set; }
        public SaveTaskBoolDep1Delegate SaveTaskBoolDep1Property { get; protected set; }

        public RemoteWriteObjectClientFactory(IFactoryCore<RemoteWriteObject> factoryCore) : base(factoryCore)
        {
            SaveVoidProperty = RemoteSaveVoid;
            SaveBoolProperty = RemoteSaveBool;
            SaveTaskProperty = RemoteSaveTask;
            SaveTaskBoolProperty = RemoteSaveTaskBool;
            SaveVoidDepProperty = RemoteSaveVoidDep;
            SaveBoolTrueDepProperty = RemoteSaveBoolTrueDep;
            SaveBoolFalseDepProperty = RemoteSaveBoolFalseDep;
            SaveTaskDepProperty = RemoteSaveTaskDep;
            SaveTaskBoolDepProperty = RemoteSaveTaskBoolDep;
            SaveTaskBoolFalseDepProperty = RemoteSaveTaskBoolFalseDep;
            SaveVoid1Property = RemoteSaveVoid1;
            SaveBool1Property = RemoteSaveBool1;
            SaveTask1Property = RemoteSaveTask1;
            SaveTaskBool1Property = RemoteSaveTaskBool1;
            SaveTaskBoolFalseProperty = RemoteSaveTaskBoolFalse;
            SaveVoidDep1Property = RemoteSaveVoidDep1;
            SaveBoolTrueDep1Property = RemoteSaveBoolTrueDep1;
            SaveBoolFalseDep1Property = RemoteSaveBoolFalseDep1;
            SaveTaskDep1Property = RemoteSaveTaskDep1;
            SaveTaskBoolDep1Property = RemoteSaveTaskBoolDep1;
        }

        public RemoteWriteObjectClientFactory(IMakeRemoteDelegateRequest remoteMethodDelegate, IFactoryCore<RemoteWriteObject> factoryCore) : this(factoryCore)
        {
            this.MakeRemoteDelegateRequest = remoteMethodDelegate;
        }

        public virtual Task<RemoteWriteObject?> SaveVoid(RemoteWriteObject target)
        {
            return SaveVoidProperty(target);
        }

        public virtual async Task<RemoteWriteObject?> RemoteSaveVoid(RemoteWriteObject target)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegateNullable<RemoteWriteObject?>(typeof(SaveVoidDelegate), [target]))!;
        }

        public virtual Task<RemoteWriteObject?> SaveBool(RemoteWriteObject target)
        {
            return SaveBoolProperty(target);
        }

        public virtual async Task<RemoteWriteObject?> RemoteSaveBool(RemoteWriteObject target)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegateNullable<RemoteWriteObject?>(typeof(SaveBoolDelegate), [target]))!;
        }

        public virtual Task<RemoteWriteObject?> SaveTask(RemoteWriteObject target)
        {
            return SaveTaskProperty(target);
        }

        public virtual async Task<RemoteWriteObject?> RemoteSaveTask(RemoteWriteObject target)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegateNullable<RemoteWriteObject?>(typeof(SaveTaskDelegate), [target]))!;
        }

        public virtual Task<RemoteWriteObject?> SaveTaskBool(RemoteWriteObject target)
        {
            return SaveTaskBoolProperty(target);
        }

        public virtual async Task<RemoteWriteObject?> RemoteSaveTaskBool(RemoteWriteObject target)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegateNullable<RemoteWriteObject?>(typeof(SaveTaskBoolDelegate), [target]))!;
        }

        public virtual Task<RemoteWriteObject?> SaveVoidDep(RemoteWriteObject target)
        {
            return SaveVoidDepProperty(target);
        }

        public virtual async Task<RemoteWriteObject?> RemoteSaveVoidDep(RemoteWriteObject target)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegateNullable<RemoteWriteObject?>(typeof(SaveVoidDepDelegate), [target]))!;
        }

        public virtual Task<RemoteWriteObject?> SaveBoolTrueDep(RemoteWriteObject target)
        {
            return SaveBoolTrueDepProperty(target);
        }

        public virtual async Task<RemoteWriteObject?> RemoteSaveBoolTrueDep(RemoteWriteObject target)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegateNullable<RemoteWriteObject?>(typeof(SaveBoolTrueDepDelegate), [target]))!;
        }

        public virtual Task<RemoteWriteObject?> SaveBoolFalseDep(RemoteWriteObject target)
        {
            return SaveBoolFalseDepProperty(target);
        }

        public virtual async Task<RemoteWriteObject?> RemoteSaveBoolFalseDep(RemoteWriteObject target)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegateNullable<RemoteWriteObject?>(typeof(SaveBoolFalseDepDelegate), [target]))!;
        }

        public virtual Task<RemoteWriteObject?> SaveTaskDep(RemoteWriteObject target)
        {
            return SaveTaskDepProperty(target);
        }

        public virtual async Task<RemoteWriteObject?> RemoteSaveTaskDep(RemoteWriteObject target)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegateNullable<RemoteWriteObject?>(typeof(SaveTaskDepDelegate), [target]))!;
        }

        public virtual Task<RemoteWriteObject?> SaveTaskBoolDep(RemoteWriteObject target)
        {
            return SaveTaskBoolDepProperty(target);
        }

        public virtual async Task<RemoteWriteObject?> RemoteSaveTaskBoolDep(RemoteWriteObject target)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegateNullable<RemoteWriteObject?>(typeof(SaveTaskBoolDepDelegate), [target]))!;
        }

        public virtual Task<RemoteWriteObject?> SaveTaskBoolFalseDep(RemoteWriteObject target)
        {
            return SaveTaskBoolFalseDepProperty(target);
        }

        public virtual async Task<RemoteWriteObject?> RemoteSaveTaskBoolFalseDep(RemoteWriteObject target)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegateNullable<RemoteWriteObject?>(typeof(SaveTaskBoolFalseDepDelegate), [target]))!;
        }

        public virtual Task<RemoteWriteObject?> SaveVoid(RemoteWriteObject target, int? param)
        {
            return SaveVoid1Property(target, param);
        }

        public virtual async Task<RemoteWriteObject?> RemoteSaveVoid1(RemoteWriteObject target, int? param)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegateNullable<RemoteWriteObject?>(typeof(SaveVoid1Delegate), [target, param]))!;
        }

        public virtual Task<RemoteWriteObject?> SaveBool(RemoteWriteObject target, int? param)
        {
            return SaveBool1Property(target, param);
        }

        public virtual async Task<RemoteWriteObject?> RemoteSaveBool1(RemoteWriteObject target, int? param)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegateNullable<RemoteWriteObject?>(typeof(SaveBool1Delegate), [target, param]))!;
        }

        public virtual Task<RemoteWriteObject?> SaveTask(RemoteWriteObject target, int? param)
        {
            return SaveTask1Property(target, param);
        }

        public virtual async Task<RemoteWriteObject?> RemoteSaveTask1(RemoteWriteObject target, int? param)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegateNullable<RemoteWriteObject?>(typeof(SaveTask1Delegate), [target, param]))!;
        }

        public virtual Task<RemoteWriteObject?> SaveTaskBool(RemoteWriteObject target, int? param)
        {
            return SaveTaskBool1Property(target, param);
        }

        public virtual async Task<RemoteWriteObject?> RemoteSaveTaskBool1(RemoteWriteObject target, int? param)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegateNullable<RemoteWriteObject?>(typeof(SaveTaskBool1Delegate), [target, param]))!;
        }

        public virtual Task<RemoteWriteObject?> SaveTaskBoolFalse(RemoteWriteObject target, int? param)
        {
            return SaveTaskBoolFalseProperty(target, param);
        }

        public virtual async Task<RemoteWriteObject?> RemoteSaveTaskBoolFalse(RemoteWriteObject target, int? param)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegateNullable<RemoteWriteObject?>(typeof(SaveTaskBoolFalseDelegate), [target, param]))!;
        }

        public virtual Task<RemoteWriteObject?> SaveVoidDep(RemoteWriteObject target, int? param)
        {
            return SaveVoidDep1Property(target, param);
        }

        public virtual async Task<RemoteWriteObject?> RemoteSaveVoidDep1(RemoteWriteObject target, int? param)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegateNullable<RemoteWriteObject?>(typeof(SaveVoidDep1Delegate), [target, param]))!;
        }

        public virtual Task<RemoteWriteObject?> SaveBoolTrueDep(RemoteWriteObject target, int? param)
        {
            return SaveBoolTrueDep1Property(target, param);
        }

        public virtual async Task<RemoteWriteObject?> RemoteSaveBoolTrueDep1(RemoteWriteObject target, int? param)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegateNullable<RemoteWriteObject?>(typeof(SaveBoolTrueDep1Delegate), [target, param]))!;
        }

        public virtual Task<RemoteWriteObject?> SaveBoolFalseDep(RemoteWriteObject target, int? param)
        {
            return SaveBoolFalseDep1Property(target, param);
        }

        public virtual async Task<RemoteWriteObject?> RemoteSaveBoolFalseDep1(RemoteWriteObject target, int? param)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegateNullable<RemoteWriteObject?>(typeof(SaveBoolFalseDep1Delegate), [target, param]))!;
        }

        public virtual Task<RemoteWriteObject?> SaveTaskDep(RemoteWriteObject target, int? param)
        {
            return SaveTaskDep1Property(target, param);
        }

        public virtual async Task<RemoteWriteObject?> RemoteSaveTaskDep1(RemoteWriteObject target, int? param)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegateNullable<RemoteWriteObject?>(typeof(SaveTaskDep1Delegate), [target, param]))!;
        }

        public virtual Task<RemoteWriteObject?> SaveTaskBoolDep(RemoteWriteObject target, int? param)
        {
            return SaveTaskBoolDep1Property(target, param);
        }

        public virtual async Task<RemoteWriteObject?> RemoteSaveTaskBoolDep1(RemoteWriteObject target, int? param)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegateNullable<RemoteWriteObject?>(typeof(SaveTaskBoolDep1Delegate), [target, param]))!;
        }

        public static void ClientFactoryServiceRegistrar(IServiceCollection services, NeatooFactory remoteLocal)
        {
            services.AddScoped<IRemoteWriteObjectClientFactory, RemoteWriteObjectClientFactory>();
        }
    }
}
#endif
