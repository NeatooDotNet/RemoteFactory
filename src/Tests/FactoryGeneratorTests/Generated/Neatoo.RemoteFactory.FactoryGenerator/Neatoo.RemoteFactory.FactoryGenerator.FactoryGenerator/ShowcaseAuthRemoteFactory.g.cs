#nullable enable
using Neatoo.RemoteFactory;
using Neatoo.RemoteFactory.Internal;
using Microsoft.Extensions.DependencyInjection;
using Neatoo.RemoteFactory.FactoryGeneratorTests.Shared;

/*
							READONLY - DO NOT EDIT!!!!
							Generated by Neatoo.RemoteFactory
*/
namespace Neatoo.RemoteFactory.FactoryGeneratorTests.Showcase
{
    public interface IShowcaseAuthRemoteFactory
    {
        Task<IShowcaseAuthRemote?> Create(List<int> intList);
        Task<Authorized> CanCreate();
    }

    internal class ShowcaseAuthRemoteFactory : FactoryBase<IShowcaseAuthRemote>, IShowcaseAuthRemoteFactory
    {
        private readonly IServiceProvider ServiceProvider;
        private readonly IMakeRemoteDelegateRequest? MakeRemoteDelegateRequest;
        // Delegates
        public delegate Task<Authorized<IShowcaseAuthRemote>> CreateDelegate(List<int> intList);
        public delegate Task<Authorized> CanCreateDelegate();
        // Delegate Properties to provide Local or Remote fork in execution
        public CreateDelegate CreateProperty { get; }
        public CanCreateDelegate CanCreateProperty { get; }

        public ShowcaseAuthRemoteFactory(IServiceProvider serviceProvider, IFactoryCore<IShowcaseAuthRemote> factoryCore) : base(factoryCore)
        {
            this.ServiceProvider = serviceProvider;
            CreateProperty = LocalCreate;
            CanCreateProperty = LocalCanCreate;
        }

        public ShowcaseAuthRemoteFactory(IServiceProvider serviceProvider, IMakeRemoteDelegateRequest remoteMethodDelegate, IFactoryCore<IShowcaseAuthRemote> factoryCore) : base(factoryCore)
        {
            this.ServiceProvider = serviceProvider;
            this.MakeRemoteDelegateRequest = remoteMethodDelegate;
            CreateProperty = RemoteCreate;
            CanCreateProperty = RemoteCanCreate;
        }

        public virtual async Task<IShowcaseAuthRemote?> Create(List<int> intList)
        {
            return (await CreateProperty(intList)).Result;
        }

        public virtual async Task<Authorized<IShowcaseAuthRemote>> RemoteCreate(List<int> intList)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegate<Authorized<IShowcaseAuthRemote>>(typeof(CreateDelegate), [intList]))!;
        }

        public Task<Authorized<IShowcaseAuthRemote>> LocalCreate(List<int> intList)
        {
            Authorized authorized;
            IAuthRemote iauthremote = ServiceProvider.GetRequiredService<IAuthRemote>();
            authorized = iauthremote.Create();
            if (!authorized.HasAccess)
            {
                return Task.FromResult(new Authorized<IShowcaseAuthRemote>(authorized));
            }

            var target = ServiceProvider.GetRequiredService<ShowcaseAuthRemote>();
            return Task.FromResult(new Authorized<IShowcaseAuthRemote>(DoFactoryMethodCall(target, FactoryOperation.Create, () => target.Create(intList))));
        }

        public virtual Task<Authorized> CanCreate()
        {
            return CanCreateProperty();
        }

        public virtual async Task<Authorized> RemoteCanCreate()
        {
            return (await MakeRemoteDelegateRequest!.ForDelegate<Authorized>(typeof(CanCreateDelegate), []))!;
        }

        public Task<Authorized> LocalCanCreate()
        {
            Authorized authorized;
            IAuthRemote iauthremote = ServiceProvider.GetRequiredService<IAuthRemote>();
            authorized = iauthremote.Create();
            if (!authorized.HasAccess)
            {
                return Task.FromResult(authorized);
            }

            return Task.FromResult(new Authorized(true));
        }

        public static void FactoryServiceRegistrar(IServiceCollection services, NeatooFactory remoteLocal)
        {
            services.AddScoped<ShowcaseAuthRemoteFactory>();
            services.AddScoped<IShowcaseAuthRemoteFactory, ShowcaseAuthRemoteFactory>();
            services.AddScoped<CreateDelegate>(cc =>
            {
                var factory = cc.GetRequiredService<ShowcaseAuthRemoteFactory>();
                return (List<int> intList) => factory.LocalCreate(intList);
            });
            services.AddScoped<CanCreateDelegate>(cc =>
            {
                var factory = cc.GetRequiredService<ShowcaseAuthRemoteFactory>();
                return () => factory.LocalCanCreate();
            });
            services.AddTransient<ShowcaseAuthRemote>();
            services.AddTransient<IShowcaseAuthRemote, ShowcaseAuthRemote>();
        }
    }
}