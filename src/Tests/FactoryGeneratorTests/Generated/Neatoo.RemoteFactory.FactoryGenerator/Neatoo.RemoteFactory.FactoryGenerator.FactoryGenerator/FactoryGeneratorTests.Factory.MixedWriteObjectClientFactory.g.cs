#nullable enable
#if !EXCLUDECLIENTFACTORIES
using Neatoo.RemoteFactory;
using Neatoo.RemoteFactory.Internal;
using Microsoft.Extensions.DependencyInjection;
using static Neatoo.RemoteFactory.FactoryGeneratorTests.Factory.MixedWriteTests;
using Neatoo.RemoteFactory.FactoryGeneratorTests;
using Neatoo.RemoteFactory.FactoryGeneratorTests.Shared;

/*
							READONLY - DO NOT EDIT!!!!
							Generated by Neatoo.RemoteFactory
*/
namespace Neatoo.RemoteFactory.FactoryGeneratorTests.Factory
{
    public interface IMixedWriteObjectClientFactory
    {
        Task<MixedWriteObject?> SaveVoidDep(MixedWriteObject target);
        Task<MixedWriteObject?> SaveBoolTrueDep(MixedWriteObject target);
        Task<MixedWriteObject?> SaveBool(MixedWriteObject target, int? param);
        Task<MixedWriteObject?> SaveBoolTrueDep(MixedWriteObject target, int? param);
        Task<MixedWriteObject?> SaveBoolFalseDep(MixedWriteObject target, int? param);
        Task<MixedWriteObject?> SaveTaskDep(MixedWriteObject target, int? param);
        Task<MixedWriteObject?> SaveTaskBoolDep(MixedWriteObject target, int? param);
    }

    internal class MixedWriteObjectClientFactory : FactorySaveBase<MixedWriteObject>, IMixedWriteObjectClientFactory
    {
        protected readonly IMakeRemoteDelegateRequest? MakeRemoteDelegateRequest;
        // Delegates
        public delegate Task<MixedWriteObject?> SaveVoidDepDelegate(MixedWriteObject target);
        public delegate Task<MixedWriteObject?> SaveBoolTrueDepDelegate(MixedWriteObject target);
        public delegate Task<MixedWriteObject?> SaveBool1Delegate(MixedWriteObject target, int? param);
        public delegate Task<MixedWriteObject?> SaveBoolTrueDep1Delegate(MixedWriteObject target, int? param);
        public delegate Task<MixedWriteObject?> SaveBoolFalseDep1Delegate(MixedWriteObject target, int? param);
        public delegate Task<MixedWriteObject?> SaveTaskDep1Delegate(MixedWriteObject target, int? param);
        public delegate Task<MixedWriteObject?> SaveTaskBoolDep1Delegate(MixedWriteObject target, int? param);
        // Delegate Properties to provide Local or Remote fork in execution
        public SaveVoidDepDelegate SaveVoidDepProperty { get; protected set; }
        public SaveBoolTrueDepDelegate SaveBoolTrueDepProperty { get; protected set; }
        public SaveBool1Delegate SaveBool1Property { get; protected set; }
        public SaveBoolTrueDep1Delegate SaveBoolTrueDep1Property { get; protected set; }
        public SaveBoolFalseDep1Delegate SaveBoolFalseDep1Property { get; protected set; }
        public SaveTaskDep1Delegate SaveTaskDep1Property { get; protected set; }
        public SaveTaskBoolDep1Delegate SaveTaskBoolDep1Property { get; protected set; }

        public MixedWriteObjectClientFactory(IFactoryCore<MixedWriteObject> factoryCore) : base(factoryCore)
        {
            SaveVoidDepProperty = RemoteSaveVoidDep;
            SaveBoolTrueDepProperty = RemoteSaveBoolTrueDep;
            SaveBool1Property = RemoteSaveBool1;
            SaveBoolTrueDep1Property = RemoteSaveBoolTrueDep1;
            SaveBoolFalseDep1Property = RemoteSaveBoolFalseDep1;
            SaveTaskDep1Property = RemoteSaveTaskDep1;
            SaveTaskBoolDep1Property = RemoteSaveTaskBoolDep1;
        }

        public MixedWriteObjectClientFactory(IMakeRemoteDelegateRequest remoteMethodDelegate, IFactoryCore<MixedWriteObject> factoryCore) : this(factoryCore)
        {
            this.MakeRemoteDelegateRequest = remoteMethodDelegate;
        }

        public virtual Task<MixedWriteObject?> SaveVoidDep(MixedWriteObject target)
        {
            return SaveVoidDepProperty(target);
        }

        public virtual async Task<MixedWriteObject?> RemoteSaveVoidDep(MixedWriteObject target)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegateNullable<MixedWriteObject?>(typeof(SaveVoidDepDelegate), [target]))!;
        }

        public virtual Task<MixedWriteObject?> SaveBoolTrueDep(MixedWriteObject target)
        {
            return SaveBoolTrueDepProperty(target);
        }

        public virtual async Task<MixedWriteObject?> RemoteSaveBoolTrueDep(MixedWriteObject target)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegateNullable<MixedWriteObject?>(typeof(SaveBoolTrueDepDelegate), [target]))!;
        }

        public virtual Task<MixedWriteObject?> SaveBool(MixedWriteObject target, int? param)
        {
            return SaveBool1Property(target, param);
        }

        public virtual async Task<MixedWriteObject?> RemoteSaveBool1(MixedWriteObject target, int? param)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegateNullable<MixedWriteObject?>(typeof(SaveBool1Delegate), [target, param]))!;
        }

        public virtual Task<MixedWriteObject?> SaveBoolTrueDep(MixedWriteObject target, int? param)
        {
            return SaveBoolTrueDep1Property(target, param);
        }

        public virtual async Task<MixedWriteObject?> RemoteSaveBoolTrueDep1(MixedWriteObject target, int? param)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegateNullable<MixedWriteObject?>(typeof(SaveBoolTrueDep1Delegate), [target, param]))!;
        }

        public virtual Task<MixedWriteObject?> SaveBoolFalseDep(MixedWriteObject target, int? param)
        {
            return SaveBoolFalseDep1Property(target, param);
        }

        public virtual async Task<MixedWriteObject?> RemoteSaveBoolFalseDep1(MixedWriteObject target, int? param)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegateNullable<MixedWriteObject?>(typeof(SaveBoolFalseDep1Delegate), [target, param]))!;
        }

        public virtual Task<MixedWriteObject?> SaveTaskDep(MixedWriteObject target, int? param)
        {
            return SaveTaskDep1Property(target, param);
        }

        public virtual async Task<MixedWriteObject?> RemoteSaveTaskDep1(MixedWriteObject target, int? param)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegateNullable<MixedWriteObject?>(typeof(SaveTaskDep1Delegate), [target, param]))!;
        }

        public virtual Task<MixedWriteObject?> SaveTaskBoolDep(MixedWriteObject target, int? param)
        {
            return SaveTaskBoolDep1Property(target, param);
        }

        public virtual async Task<MixedWriteObject?> RemoteSaveTaskBoolDep1(MixedWriteObject target, int? param)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegateNullable<MixedWriteObject?>(typeof(SaveTaskBoolDep1Delegate), [target, param]))!;
        }

        public static void ClientFactoryServiceRegistrar(IServiceCollection services, NeatooFactory remoteLocal)
        {
            services.AddScoped<IMixedWriteObjectClientFactory, MixedWriteObjectClientFactory>();
        }
    }
}
#endif
