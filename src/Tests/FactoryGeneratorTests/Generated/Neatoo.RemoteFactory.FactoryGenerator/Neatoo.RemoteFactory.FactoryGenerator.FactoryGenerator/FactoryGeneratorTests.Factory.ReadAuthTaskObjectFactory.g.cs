#nullable enable
using Neatoo.RemoteFactory;
using Neatoo.RemoteFactory.Internal;
using Microsoft.Extensions.DependencyInjection;
using static Neatoo.RemoteFactory.FactoryGeneratorTests.Factory.ReadAuthTests;
using Neatoo.RemoteFactory.FactoryGeneratorTests;
using Xunit;
using Neatoo.RemoteFactory.FactoryGeneratorTests.Shared;

/*
							READONLY - DO NOT EDIT!!!!
							Generated by Neatoo.RemoteFactory
*/
namespace Neatoo.RemoteFactory.FactoryGeneratorTests.Factory
{
    public interface IReadAuthTaskObjectFactory
    {
        Task<ReadAuthTaskObject?> CreateVoid(int? param);
        Task<ReadAuthTaskObject?> CreateBool(int? param);
        Task<ReadAuthTaskObject?> CreateTask(int? param);
        Task<ReadAuthTaskObject?> CreateTaskBool(int? param);
        Task<ReadAuthTaskObject?> CreateTaskBoolFalse(int? param);
        Task<ReadAuthTaskObject?> CreateVoidDep(int? param);
        Task<ReadAuthTaskObject?> CreateBoolTrueDep(int? param);
        Task<ReadAuthTaskObject?> CreateBoolFalseDep(int? param);
        Task<ReadAuthTaskObject?> CreateTaskDep(int? param);
        Task<ReadAuthTaskObject?> CreateTaskBoolDep(int? param);
        Task<ReadAuthTaskObject?> FetchVoid(int? param);
        Task<ReadAuthTaskObject?> FetchBool(int? param);
        Task<ReadAuthTaskObject?> FetchTask(int? param);
        Task<ReadAuthTaskObject?> FetchTaskBool(int? param);
        Task<ReadAuthTaskObject?> FetchVoidDep(int? param);
        Task<ReadAuthTaskObject?> FetchBoolTrueDep(int? param);
        Task<ReadAuthTaskObject?> FetchBoolFalseDep(int? param);
        Task<ReadAuthTaskObject?> FetchTaskDep(int? param);
        Task<ReadAuthTaskObject?> FetchTaskBoolDep(int? param);
        Task<ReadAuthTaskObject?> FetchTaskBoolFalseDep(int? param);
        Task<Authorized> CanCreateVoid(int? p);
        Task<Authorized> CanCreateBool(int? p);
        Task<Authorized> CanCreateTask(int? p);
        Task<Authorized> CanCreateTaskBool(int? p);
        Task<Authorized> CanCreateTaskBoolFalse(int? p);
        Task<Authorized> CanCreateVoidDep(int? p);
        Task<Authorized> CanCreateBoolTrueDep(int? p);
        Task<Authorized> CanCreateBoolFalseDep(int? p);
        Task<Authorized> CanCreateTaskDep(int? p);
        Task<Authorized> CanCreateTaskBoolDep(int? p);
        Task<Authorized> CanFetchVoid(int? p);
        Task<Authorized> CanFetchBool(int? p);
        Task<Authorized> CanFetchTask(int? p);
        Task<Authorized> CanFetchTaskBool(int? p);
        Task<Authorized> CanFetchVoidDep(int? p);
        Task<Authorized> CanFetchBoolTrueDep(int? p);
        Task<Authorized> CanFetchBoolFalseDep(int? p);
        Task<Authorized> CanFetchTaskDep(int? p);
        Task<Authorized> CanFetchTaskBoolDep(int? p);
        Task<Authorized> CanFetchTaskBoolFalseDep(int? p);
    }

    internal class ReadAuthTaskObjectFactory : FactoryBase<ReadAuthTaskObject>, IReadAuthTaskObjectFactory
    {
        private readonly IServiceProvider ServiceProvider;
        public ReadAuthTaskObjectFactory(IServiceProvider serviceProvider, IFactoryCore<ReadAuthTaskObject> factoryCore) : base(factoryCore)
        {
            this.ServiceProvider = serviceProvider;
        }

        public ReadAuthTaskObjectFactory(IServiceProvider serviceProvider, IMakeRemoteDelegateRequest remoteMethodDelegate, IFactoryCore<ReadAuthTaskObject> factoryCore) : base(factoryCore)
        {
            this.ServiceProvider = serviceProvider;
        }

        public virtual async Task<ReadAuthTaskObject?> CreateVoid(int? param)
        {
            return (await LocalCreateVoid(param)).Result;
        }

        public async Task<Authorized<ReadAuthTaskObject>> LocalCreateVoid(int? param)
        {
            Authorized authorized;
            ReadAuthTask readauthtask = ServiceProvider.GetRequiredService<ReadAuthTask>();
            authorized = await readauthtask.CanAnyBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanAnyBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanAnyStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanAnyStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanReadBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanReadBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanReadStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanReadStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanCreateBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanCreateBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanCreateStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanCreateStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            ReadAuth readauth = ServiceProvider.GetRequiredService<ReadAuth>();
            authorized = readauth.CanAnyBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanAnyBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanAnyString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanAnyStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanReadBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanReadBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanReadString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanReadStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanCreateBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanCreateBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanCreateString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanCreateStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<ReadAuthTaskObject>();
            return new Authorized<ReadAuthTaskObject>(DoFactoryMethodCall(target, FactoryOperation.Create, () => target.CreateVoid(param)));
        }

        public virtual async Task<ReadAuthTaskObject?> CreateBool(int? param)
        {
            return (await LocalCreateBool(param)).Result;
        }

        public async Task<Authorized<ReadAuthTaskObject>> LocalCreateBool(int? param)
        {
            Authorized authorized;
            ReadAuthTask readauthtask = ServiceProvider.GetRequiredService<ReadAuthTask>();
            authorized = await readauthtask.CanAnyBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanAnyBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanAnyStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanAnyStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanReadBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanReadBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanReadStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanReadStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanCreateBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanCreateBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanCreateStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanCreateStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            ReadAuth readauth = ServiceProvider.GetRequiredService<ReadAuth>();
            authorized = readauth.CanAnyBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanAnyBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanAnyString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanAnyStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanReadBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanReadBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanReadString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanReadStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanCreateBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanCreateBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanCreateString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanCreateStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<ReadAuthTaskObject>();
            return new Authorized<ReadAuthTaskObject>(DoFactoryMethodCallBool(target, FactoryOperation.Create, () => target.CreateBool(param)));
        }

        public virtual async Task<ReadAuthTaskObject?> CreateTask(int? param)
        {
            return (await LocalCreateTask(param)).Result;
        }

        public async Task<Authorized<ReadAuthTaskObject>> LocalCreateTask(int? param)
        {
            Authorized authorized;
            ReadAuthTask readauthtask = ServiceProvider.GetRequiredService<ReadAuthTask>();
            authorized = await readauthtask.CanAnyBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanAnyBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanAnyStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanAnyStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanReadBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanReadBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanReadStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanReadStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanCreateBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanCreateBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanCreateStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanCreateStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            ReadAuth readauth = ServiceProvider.GetRequiredService<ReadAuth>();
            authorized = readauth.CanAnyBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanAnyBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanAnyString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanAnyStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanReadBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanReadBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanReadString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanReadStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanCreateBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanCreateBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanCreateString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanCreateStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<ReadAuthTaskObject>();
            return new Authorized<ReadAuthTaskObject>(await DoFactoryMethodCallAsync(target, FactoryOperation.Create, () => target.CreateTask(param)));
        }

        public virtual async Task<ReadAuthTaskObject?> CreateTaskBool(int? param)
        {
            return (await LocalCreateTaskBool(param)).Result;
        }

        public async Task<Authorized<ReadAuthTaskObject>> LocalCreateTaskBool(int? param)
        {
            Authorized authorized;
            ReadAuthTask readauthtask = ServiceProvider.GetRequiredService<ReadAuthTask>();
            authorized = await readauthtask.CanAnyBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanAnyBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanAnyStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanAnyStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanReadBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanReadBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanReadStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanReadStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanCreateBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanCreateBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanCreateStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanCreateStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            ReadAuth readauth = ServiceProvider.GetRequiredService<ReadAuth>();
            authorized = readauth.CanAnyBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanAnyBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanAnyString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanAnyStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanReadBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanReadBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanReadString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanReadStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanCreateBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanCreateBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanCreateString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanCreateStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<ReadAuthTaskObject>();
            return new Authorized<ReadAuthTaskObject>(await DoFactoryMethodCallBoolAsync(target, FactoryOperation.Create, () => target.CreateTaskBool(param)));
        }

        public virtual async Task<ReadAuthTaskObject?> CreateTaskBoolFalse(int? param)
        {
            return (await LocalCreateTaskBoolFalse(param)).Result;
        }

        public async Task<Authorized<ReadAuthTaskObject>> LocalCreateTaskBoolFalse(int? param)
        {
            Authorized authorized;
            ReadAuthTask readauthtask = ServiceProvider.GetRequiredService<ReadAuthTask>();
            authorized = await readauthtask.CanAnyBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanAnyBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanAnyStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanAnyStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanReadBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanReadBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanReadStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanReadStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanCreateBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanCreateBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanCreateStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanCreateStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            ReadAuth readauth = ServiceProvider.GetRequiredService<ReadAuth>();
            authorized = readauth.CanAnyBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanAnyBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanAnyString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanAnyStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanReadBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanReadBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanReadString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanReadStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanCreateBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanCreateBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanCreateString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanCreateStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<ReadAuthTaskObject>();
            return new Authorized<ReadAuthTaskObject>(await DoFactoryMethodCallBoolAsync(target, FactoryOperation.Create, () => target.CreateTaskBoolFalse(param)));
        }

        public virtual async Task<ReadAuthTaskObject?> CreateVoidDep(int? param)
        {
            return (await LocalCreateVoidDep(param)).Result;
        }

        public async Task<Authorized<ReadAuthTaskObject>> LocalCreateVoidDep(int? param)
        {
            Authorized authorized;
            ReadAuthTask readauthtask = ServiceProvider.GetRequiredService<ReadAuthTask>();
            authorized = await readauthtask.CanAnyBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanAnyBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanAnyStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanAnyStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanReadBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanReadBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanReadStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanReadStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanCreateBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanCreateBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanCreateStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanCreateStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            ReadAuth readauth = ServiceProvider.GetRequiredService<ReadAuth>();
            authorized = readauth.CanAnyBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanAnyBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanAnyString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanAnyStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanReadBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanReadBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanReadString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanReadStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanCreateBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanCreateBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanCreateString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanCreateStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<ReadAuthTaskObject>();
            var service = ServiceProvider.GetRequiredService<IService>();
            return new Authorized<ReadAuthTaskObject>(DoFactoryMethodCall(target, FactoryOperation.Create, () => target.CreateVoidDep(param, service)));
        }

        public virtual async Task<ReadAuthTaskObject?> CreateBoolTrueDep(int? param)
        {
            return (await LocalCreateBoolTrueDep(param)).Result;
        }

        public async Task<Authorized<ReadAuthTaskObject>> LocalCreateBoolTrueDep(int? param)
        {
            Authorized authorized;
            ReadAuthTask readauthtask = ServiceProvider.GetRequiredService<ReadAuthTask>();
            authorized = await readauthtask.CanAnyBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanAnyBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanAnyStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanAnyStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanReadBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanReadBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanReadStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanReadStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanCreateBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanCreateBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanCreateStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanCreateStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            ReadAuth readauth = ServiceProvider.GetRequiredService<ReadAuth>();
            authorized = readauth.CanAnyBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanAnyBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanAnyString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanAnyStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanReadBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanReadBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanReadString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanReadStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanCreateBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanCreateBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanCreateString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanCreateStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<ReadAuthTaskObject>();
            var service = ServiceProvider.GetRequiredService<IService>();
            return new Authorized<ReadAuthTaskObject>(DoFactoryMethodCallBool(target, FactoryOperation.Create, () => target.CreateBoolTrueDep(param, service)));
        }

        public virtual async Task<ReadAuthTaskObject?> CreateBoolFalseDep(int? param)
        {
            return (await LocalCreateBoolFalseDep(param)).Result;
        }

        public async Task<Authorized<ReadAuthTaskObject>> LocalCreateBoolFalseDep(int? param)
        {
            Authorized authorized;
            ReadAuthTask readauthtask = ServiceProvider.GetRequiredService<ReadAuthTask>();
            authorized = await readauthtask.CanAnyBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanAnyBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanAnyStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanAnyStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanReadBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanReadBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanReadStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanReadStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanCreateBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanCreateBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanCreateStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanCreateStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            ReadAuth readauth = ServiceProvider.GetRequiredService<ReadAuth>();
            authorized = readauth.CanAnyBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanAnyBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanAnyString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanAnyStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanReadBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanReadBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanReadString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanReadStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanCreateBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanCreateBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanCreateString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanCreateStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<ReadAuthTaskObject>();
            var service = ServiceProvider.GetRequiredService<IService>();
            return new Authorized<ReadAuthTaskObject>(DoFactoryMethodCallBool(target, FactoryOperation.Create, () => target.CreateBoolFalseDep(param, service)));
        }

        public virtual async Task<ReadAuthTaskObject?> CreateTaskDep(int? param)
        {
            return (await LocalCreateTaskDep(param)).Result;
        }

        public async Task<Authorized<ReadAuthTaskObject>> LocalCreateTaskDep(int? param)
        {
            Authorized authorized;
            ReadAuthTask readauthtask = ServiceProvider.GetRequiredService<ReadAuthTask>();
            authorized = await readauthtask.CanAnyBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanAnyBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanAnyStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanAnyStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanReadBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanReadBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanReadStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanReadStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanCreateBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanCreateBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanCreateStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanCreateStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            ReadAuth readauth = ServiceProvider.GetRequiredService<ReadAuth>();
            authorized = readauth.CanAnyBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanAnyBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanAnyString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanAnyStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanReadBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanReadBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanReadString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanReadStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanCreateBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanCreateBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanCreateString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanCreateStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<ReadAuthTaskObject>();
            var service = ServiceProvider.GetRequiredService<IService>();
            return new Authorized<ReadAuthTaskObject>(await DoFactoryMethodCallAsync(target, FactoryOperation.Create, () => target.CreateTaskDep(param, service)));
        }

        public virtual async Task<ReadAuthTaskObject?> CreateTaskBoolDep(int? param)
        {
            return (await LocalCreateTaskBoolDep(param)).Result;
        }

        public async Task<Authorized<ReadAuthTaskObject>> LocalCreateTaskBoolDep(int? param)
        {
            Authorized authorized;
            ReadAuthTask readauthtask = ServiceProvider.GetRequiredService<ReadAuthTask>();
            authorized = await readauthtask.CanAnyBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanAnyBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanAnyStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanAnyStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanReadBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanReadBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanReadStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanReadStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanCreateBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanCreateBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanCreateStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanCreateStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            ReadAuth readauth = ServiceProvider.GetRequiredService<ReadAuth>();
            authorized = readauth.CanAnyBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanAnyBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanAnyString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanAnyStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanReadBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanReadBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanReadString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanReadStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanCreateBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanCreateBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanCreateString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanCreateStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<ReadAuthTaskObject>();
            var service = ServiceProvider.GetRequiredService<IService>();
            return new Authorized<ReadAuthTaskObject>(await DoFactoryMethodCallBoolAsync(target, FactoryOperation.Create, () => target.CreateTaskBoolDep(param, service)));
        }

        public virtual async Task<ReadAuthTaskObject?> FetchVoid(int? param)
        {
            return (await LocalFetchVoid(param)).Result;
        }

        public async Task<Authorized<ReadAuthTaskObject>> LocalFetchVoid(int? param)
        {
            Authorized authorized;
            ReadAuthTask readauthtask = ServiceProvider.GetRequiredService<ReadAuthTask>();
            authorized = await readauthtask.CanAnyBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanAnyBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanAnyStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanAnyStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanReadBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanReadBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanReadStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanReadStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanFetchBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanFetchBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanFetchStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanFetchStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            ReadAuth readauth = ServiceProvider.GetRequiredService<ReadAuth>();
            authorized = readauth.CanAnyBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanAnyBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanAnyString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanAnyStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanReadBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanReadBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanReadString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanReadStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanFetchBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanFetchBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanFetchString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanFetchStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<ReadAuthTaskObject>();
            return new Authorized<ReadAuthTaskObject>(DoFactoryMethodCall(target, FactoryOperation.Fetch, () => target.FetchVoid(param)));
        }

        public virtual async Task<ReadAuthTaskObject?> FetchBool(int? param)
        {
            return (await LocalFetchBool(param)).Result;
        }

        public async Task<Authorized<ReadAuthTaskObject>> LocalFetchBool(int? param)
        {
            Authorized authorized;
            ReadAuthTask readauthtask = ServiceProvider.GetRequiredService<ReadAuthTask>();
            authorized = await readauthtask.CanAnyBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanAnyBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanAnyStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanAnyStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanReadBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanReadBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanReadStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanReadStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanFetchBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanFetchBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanFetchStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanFetchStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            ReadAuth readauth = ServiceProvider.GetRequiredService<ReadAuth>();
            authorized = readauth.CanAnyBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanAnyBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanAnyString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanAnyStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanReadBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanReadBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanReadString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanReadStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanFetchBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanFetchBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanFetchString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanFetchStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<ReadAuthTaskObject>();
            return new Authorized<ReadAuthTaskObject>(DoFactoryMethodCallBool(target, FactoryOperation.Fetch, () => target.FetchBool(param)));
        }

        public virtual async Task<ReadAuthTaskObject?> FetchTask(int? param)
        {
            return (await LocalFetchTask(param)).Result;
        }

        public async Task<Authorized<ReadAuthTaskObject>> LocalFetchTask(int? param)
        {
            Authorized authorized;
            ReadAuthTask readauthtask = ServiceProvider.GetRequiredService<ReadAuthTask>();
            authorized = await readauthtask.CanAnyBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanAnyBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanAnyStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanAnyStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanReadBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanReadBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanReadStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanReadStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanFetchBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanFetchBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanFetchStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanFetchStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            ReadAuth readauth = ServiceProvider.GetRequiredService<ReadAuth>();
            authorized = readauth.CanAnyBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanAnyBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanAnyString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanAnyStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanReadBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanReadBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanReadString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanReadStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanFetchBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanFetchBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanFetchString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanFetchStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<ReadAuthTaskObject>();
            return new Authorized<ReadAuthTaskObject>(await DoFactoryMethodCallAsync(target, FactoryOperation.Fetch, () => target.FetchTask(param)));
        }

        public virtual async Task<ReadAuthTaskObject?> FetchTaskBool(int? param)
        {
            return (await LocalFetchTaskBool(param)).Result;
        }

        public async Task<Authorized<ReadAuthTaskObject>> LocalFetchTaskBool(int? param)
        {
            Authorized authorized;
            ReadAuthTask readauthtask = ServiceProvider.GetRequiredService<ReadAuthTask>();
            authorized = await readauthtask.CanAnyBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanAnyBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanAnyStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanAnyStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanReadBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanReadBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanReadStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanReadStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanFetchBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanFetchBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanFetchStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanFetchStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            ReadAuth readauth = ServiceProvider.GetRequiredService<ReadAuth>();
            authorized = readauth.CanAnyBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanAnyBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanAnyString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanAnyStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanReadBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanReadBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanReadString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanReadStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanFetchBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanFetchBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanFetchString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanFetchStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<ReadAuthTaskObject>();
            return new Authorized<ReadAuthTaskObject>(await DoFactoryMethodCallBoolAsync(target, FactoryOperation.Fetch, () => target.FetchTaskBool(param)));
        }

        public virtual async Task<ReadAuthTaskObject?> FetchVoidDep(int? param)
        {
            return (await LocalFetchVoidDep(param)).Result;
        }

        public async Task<Authorized<ReadAuthTaskObject>> LocalFetchVoidDep(int? param)
        {
            Authorized authorized;
            ReadAuthTask readauthtask = ServiceProvider.GetRequiredService<ReadAuthTask>();
            authorized = await readauthtask.CanAnyBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanAnyBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanAnyStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanAnyStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanReadBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanReadBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanReadStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanReadStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanFetchBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanFetchBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanFetchStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanFetchStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            ReadAuth readauth = ServiceProvider.GetRequiredService<ReadAuth>();
            authorized = readauth.CanAnyBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanAnyBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanAnyString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanAnyStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanReadBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanReadBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanReadString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanReadStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanFetchBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanFetchBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanFetchString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanFetchStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<ReadAuthTaskObject>();
            var service = ServiceProvider.GetRequiredService<IService>();
            return new Authorized<ReadAuthTaskObject>(DoFactoryMethodCall(target, FactoryOperation.Fetch, () => target.FetchVoidDep(param, service)));
        }

        public virtual async Task<ReadAuthTaskObject?> FetchBoolTrueDep(int? param)
        {
            return (await LocalFetchBoolTrueDep(param)).Result;
        }

        public async Task<Authorized<ReadAuthTaskObject>> LocalFetchBoolTrueDep(int? param)
        {
            Authorized authorized;
            ReadAuthTask readauthtask = ServiceProvider.GetRequiredService<ReadAuthTask>();
            authorized = await readauthtask.CanAnyBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanAnyBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanAnyStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanAnyStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanReadBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanReadBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanReadStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanReadStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanFetchBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanFetchBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanFetchStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanFetchStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            ReadAuth readauth = ServiceProvider.GetRequiredService<ReadAuth>();
            authorized = readauth.CanAnyBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanAnyBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanAnyString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanAnyStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanReadBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanReadBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanReadString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanReadStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanFetchBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanFetchBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanFetchString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanFetchStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<ReadAuthTaskObject>();
            var service = ServiceProvider.GetRequiredService<IService>();
            return new Authorized<ReadAuthTaskObject>(DoFactoryMethodCallBool(target, FactoryOperation.Fetch, () => target.FetchBoolTrueDep(param, service)));
        }

        public virtual async Task<ReadAuthTaskObject?> FetchBoolFalseDep(int? param)
        {
            return (await LocalFetchBoolFalseDep(param)).Result;
        }

        public async Task<Authorized<ReadAuthTaskObject>> LocalFetchBoolFalseDep(int? param)
        {
            Authorized authorized;
            ReadAuthTask readauthtask = ServiceProvider.GetRequiredService<ReadAuthTask>();
            authorized = await readauthtask.CanAnyBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanAnyBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanAnyStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanAnyStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanReadBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanReadBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanReadStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanReadStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanFetchBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanFetchBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanFetchStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanFetchStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            ReadAuth readauth = ServiceProvider.GetRequiredService<ReadAuth>();
            authorized = readauth.CanAnyBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanAnyBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanAnyString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanAnyStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanReadBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanReadBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanReadString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanReadStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanFetchBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanFetchBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanFetchString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanFetchStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<ReadAuthTaskObject>();
            var service = ServiceProvider.GetRequiredService<IService>();
            return new Authorized<ReadAuthTaskObject>(DoFactoryMethodCallBool(target, FactoryOperation.Fetch, () => target.FetchBoolFalseDep(param, service)));
        }

        public virtual async Task<ReadAuthTaskObject?> FetchTaskDep(int? param)
        {
            return (await LocalFetchTaskDep(param)).Result;
        }

        public async Task<Authorized<ReadAuthTaskObject>> LocalFetchTaskDep(int? param)
        {
            Authorized authorized;
            ReadAuthTask readauthtask = ServiceProvider.GetRequiredService<ReadAuthTask>();
            authorized = await readauthtask.CanAnyBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanAnyBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanAnyStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanAnyStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanReadBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanReadBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanReadStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanReadStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanFetchBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanFetchBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanFetchStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanFetchStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            ReadAuth readauth = ServiceProvider.GetRequiredService<ReadAuth>();
            authorized = readauth.CanAnyBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanAnyBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanAnyString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanAnyStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanReadBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanReadBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanReadString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanReadStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanFetchBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanFetchBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanFetchString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanFetchStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<ReadAuthTaskObject>();
            var service = ServiceProvider.GetRequiredService<IService>();
            return new Authorized<ReadAuthTaskObject>(await DoFactoryMethodCallAsync(target, FactoryOperation.Fetch, () => target.FetchTaskDep(param, service)));
        }

        public virtual async Task<ReadAuthTaskObject?> FetchTaskBoolDep(int? param)
        {
            return (await LocalFetchTaskBoolDep(param)).Result;
        }

        public async Task<Authorized<ReadAuthTaskObject>> LocalFetchTaskBoolDep(int? param)
        {
            Authorized authorized;
            ReadAuthTask readauthtask = ServiceProvider.GetRequiredService<ReadAuthTask>();
            authorized = await readauthtask.CanAnyBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanAnyBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanAnyStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanAnyStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanReadBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanReadBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanReadStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanReadStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanFetchBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanFetchBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanFetchStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanFetchStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            ReadAuth readauth = ServiceProvider.GetRequiredService<ReadAuth>();
            authorized = readauth.CanAnyBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanAnyBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanAnyString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanAnyStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanReadBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanReadBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanReadString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanReadStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanFetchBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanFetchBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanFetchString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanFetchStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<ReadAuthTaskObject>();
            var service = ServiceProvider.GetRequiredService<IService>();
            return new Authorized<ReadAuthTaskObject>(await DoFactoryMethodCallBoolAsync(target, FactoryOperation.Fetch, () => target.FetchTaskBoolDep(param, service)));
        }

        public virtual async Task<ReadAuthTaskObject?> FetchTaskBoolFalseDep(int? param)
        {
            return (await LocalFetchTaskBoolFalseDep(param)).Result;
        }

        public async Task<Authorized<ReadAuthTaskObject>> LocalFetchTaskBoolFalseDep(int? param)
        {
            Authorized authorized;
            ReadAuthTask readauthtask = ServiceProvider.GetRequiredService<ReadAuthTask>();
            authorized = await readauthtask.CanAnyBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanAnyBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanAnyStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanAnyStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanReadBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanReadBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanReadStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanReadStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanFetchBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanFetchBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanFetchStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = await readauthtask.CanFetchStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            ReadAuth readauth = ServiceProvider.GetRequiredService<ReadAuth>();
            authorized = readauth.CanAnyBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanAnyBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanAnyString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanAnyStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanReadBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanReadBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanReadString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanReadStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanFetchBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanFetchBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanFetchString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            authorized = readauth.CanFetchStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthTaskObject>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<ReadAuthTaskObject>();
            var service = ServiceProvider.GetRequiredService<IService>();
            return new Authorized<ReadAuthTaskObject>(await DoFactoryMethodCallBoolAsync(target, FactoryOperation.Fetch, () => target.FetchTaskBoolFalseDep(param, service)));
        }

        public virtual Task<Authorized> CanCreateVoid(int? p)
        {
            return LocalCanCreateVoid(p);
        }

        public async Task<Authorized> LocalCanCreateVoid(int? p)
        {
            Authorized authorized;
            ReadAuthTask readauthtask = ServiceProvider.GetRequiredService<ReadAuthTask>();
            authorized = await readauthtask.CanAnyBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanAnyBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanAnyStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanAnyStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanReadBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanReadBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanReadStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanReadStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanCreateBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanCreateBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanCreateStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanCreateStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            ReadAuth readauth = ServiceProvider.GetRequiredService<ReadAuth>();
            authorized = readauth.CanAnyBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanAnyBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanAnyString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanAnyStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanCreateBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanCreateBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanCreateString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanCreateStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanCreateBool(int? p)
        {
            return LocalCanCreateBool(p);
        }

        public async Task<Authorized> LocalCanCreateBool(int? p)
        {
            Authorized authorized;
            ReadAuthTask readauthtask = ServiceProvider.GetRequiredService<ReadAuthTask>();
            authorized = await readauthtask.CanAnyBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanAnyBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanAnyStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanAnyStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanReadBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanReadBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanReadStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanReadStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanCreateBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanCreateBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanCreateStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanCreateStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            ReadAuth readauth = ServiceProvider.GetRequiredService<ReadAuth>();
            authorized = readauth.CanAnyBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanAnyBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanAnyString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanAnyStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanCreateBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanCreateBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanCreateString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanCreateStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanCreateTask(int? p)
        {
            return LocalCanCreateTask(p);
        }

        public async Task<Authorized> LocalCanCreateTask(int? p)
        {
            Authorized authorized;
            ReadAuthTask readauthtask = ServiceProvider.GetRequiredService<ReadAuthTask>();
            authorized = await readauthtask.CanAnyBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanAnyBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanAnyStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanAnyStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanReadBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanReadBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanReadStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanReadStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanCreateBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanCreateBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanCreateStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanCreateStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            ReadAuth readauth = ServiceProvider.GetRequiredService<ReadAuth>();
            authorized = readauth.CanAnyBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanAnyBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanAnyString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanAnyStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanCreateBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanCreateBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanCreateString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanCreateStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanCreateTaskBool(int? p)
        {
            return LocalCanCreateTaskBool(p);
        }

        public async Task<Authorized> LocalCanCreateTaskBool(int? p)
        {
            Authorized authorized;
            ReadAuthTask readauthtask = ServiceProvider.GetRequiredService<ReadAuthTask>();
            authorized = await readauthtask.CanAnyBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanAnyBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanAnyStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanAnyStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanReadBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanReadBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanReadStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanReadStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanCreateBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanCreateBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanCreateStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanCreateStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            ReadAuth readauth = ServiceProvider.GetRequiredService<ReadAuth>();
            authorized = readauth.CanAnyBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanAnyBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanAnyString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanAnyStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanCreateBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanCreateBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanCreateString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanCreateStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanCreateTaskBoolFalse(int? p)
        {
            return LocalCanCreateTaskBoolFalse(p);
        }

        public async Task<Authorized> LocalCanCreateTaskBoolFalse(int? p)
        {
            Authorized authorized;
            ReadAuthTask readauthtask = ServiceProvider.GetRequiredService<ReadAuthTask>();
            authorized = await readauthtask.CanAnyBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanAnyBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanAnyStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanAnyStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanReadBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanReadBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanReadStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanReadStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanCreateBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanCreateBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanCreateStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanCreateStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            ReadAuth readauth = ServiceProvider.GetRequiredService<ReadAuth>();
            authorized = readauth.CanAnyBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanAnyBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanAnyString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanAnyStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanCreateBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanCreateBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanCreateString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanCreateStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanCreateVoidDep(int? p)
        {
            return LocalCanCreateVoidDep(p);
        }

        public async Task<Authorized> LocalCanCreateVoidDep(int? p)
        {
            Authorized authorized;
            ReadAuthTask readauthtask = ServiceProvider.GetRequiredService<ReadAuthTask>();
            authorized = await readauthtask.CanAnyBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanAnyBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanAnyStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanAnyStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanReadBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanReadBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanReadStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanReadStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanCreateBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanCreateBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanCreateStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanCreateStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            ReadAuth readauth = ServiceProvider.GetRequiredService<ReadAuth>();
            authorized = readauth.CanAnyBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanAnyBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanAnyString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanAnyStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanCreateBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanCreateBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanCreateString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanCreateStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanCreateBoolTrueDep(int? p)
        {
            return LocalCanCreateBoolTrueDep(p);
        }

        public async Task<Authorized> LocalCanCreateBoolTrueDep(int? p)
        {
            Authorized authorized;
            ReadAuthTask readauthtask = ServiceProvider.GetRequiredService<ReadAuthTask>();
            authorized = await readauthtask.CanAnyBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanAnyBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanAnyStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanAnyStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanReadBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanReadBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanReadStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanReadStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanCreateBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanCreateBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanCreateStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanCreateStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            ReadAuth readauth = ServiceProvider.GetRequiredService<ReadAuth>();
            authorized = readauth.CanAnyBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanAnyBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanAnyString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanAnyStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanCreateBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanCreateBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanCreateString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanCreateStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanCreateBoolFalseDep(int? p)
        {
            return LocalCanCreateBoolFalseDep(p);
        }

        public async Task<Authorized> LocalCanCreateBoolFalseDep(int? p)
        {
            Authorized authorized;
            ReadAuthTask readauthtask = ServiceProvider.GetRequiredService<ReadAuthTask>();
            authorized = await readauthtask.CanAnyBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanAnyBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanAnyStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanAnyStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanReadBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanReadBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanReadStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanReadStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanCreateBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanCreateBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanCreateStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanCreateStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            ReadAuth readauth = ServiceProvider.GetRequiredService<ReadAuth>();
            authorized = readauth.CanAnyBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanAnyBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanAnyString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanAnyStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanCreateBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanCreateBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanCreateString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanCreateStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanCreateTaskDep(int? p)
        {
            return LocalCanCreateTaskDep(p);
        }

        public async Task<Authorized> LocalCanCreateTaskDep(int? p)
        {
            Authorized authorized;
            ReadAuthTask readauthtask = ServiceProvider.GetRequiredService<ReadAuthTask>();
            authorized = await readauthtask.CanAnyBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanAnyBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanAnyStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanAnyStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanReadBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanReadBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanReadStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanReadStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanCreateBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanCreateBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanCreateStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanCreateStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            ReadAuth readauth = ServiceProvider.GetRequiredService<ReadAuth>();
            authorized = readauth.CanAnyBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanAnyBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanAnyString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanAnyStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanCreateBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanCreateBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanCreateString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanCreateStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanCreateTaskBoolDep(int? p)
        {
            return LocalCanCreateTaskBoolDep(p);
        }

        public async Task<Authorized> LocalCanCreateTaskBoolDep(int? p)
        {
            Authorized authorized;
            ReadAuthTask readauthtask = ServiceProvider.GetRequiredService<ReadAuthTask>();
            authorized = await readauthtask.CanAnyBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanAnyBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanAnyStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanAnyStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanReadBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanReadBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanReadStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanReadStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanCreateBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanCreateBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanCreateStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanCreateStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            ReadAuth readauth = ServiceProvider.GetRequiredService<ReadAuth>();
            authorized = readauth.CanAnyBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanAnyBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanAnyString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanAnyStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanCreateBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanCreateBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanCreateString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanCreateStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanFetchVoid(int? p)
        {
            return LocalCanFetchVoid(p);
        }

        public async Task<Authorized> LocalCanFetchVoid(int? p)
        {
            Authorized authorized;
            ReadAuthTask readauthtask = ServiceProvider.GetRequiredService<ReadAuthTask>();
            authorized = await readauthtask.CanAnyBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanAnyBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanAnyStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanAnyStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanReadBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanReadBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanReadStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanReadStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanFetchBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanFetchBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanFetchStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanFetchStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            ReadAuth readauth = ServiceProvider.GetRequiredService<ReadAuth>();
            authorized = readauth.CanAnyBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanAnyBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanAnyString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanAnyStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanFetchBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanFetchBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanFetchString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanFetchStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanFetchBool(int? p)
        {
            return LocalCanFetchBool(p);
        }

        public async Task<Authorized> LocalCanFetchBool(int? p)
        {
            Authorized authorized;
            ReadAuthTask readauthtask = ServiceProvider.GetRequiredService<ReadAuthTask>();
            authorized = await readauthtask.CanAnyBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanAnyBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanAnyStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanAnyStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanReadBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanReadBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanReadStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanReadStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanFetchBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanFetchBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanFetchStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanFetchStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            ReadAuth readauth = ServiceProvider.GetRequiredService<ReadAuth>();
            authorized = readauth.CanAnyBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanAnyBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanAnyString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanAnyStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanFetchBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanFetchBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanFetchString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanFetchStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanFetchTask(int? p)
        {
            return LocalCanFetchTask(p);
        }

        public async Task<Authorized> LocalCanFetchTask(int? p)
        {
            Authorized authorized;
            ReadAuthTask readauthtask = ServiceProvider.GetRequiredService<ReadAuthTask>();
            authorized = await readauthtask.CanAnyBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanAnyBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanAnyStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanAnyStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanReadBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanReadBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanReadStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanReadStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanFetchBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanFetchBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanFetchStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanFetchStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            ReadAuth readauth = ServiceProvider.GetRequiredService<ReadAuth>();
            authorized = readauth.CanAnyBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanAnyBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanAnyString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanAnyStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanFetchBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanFetchBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanFetchString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanFetchStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanFetchTaskBool(int? p)
        {
            return LocalCanFetchTaskBool(p);
        }

        public async Task<Authorized> LocalCanFetchTaskBool(int? p)
        {
            Authorized authorized;
            ReadAuthTask readauthtask = ServiceProvider.GetRequiredService<ReadAuthTask>();
            authorized = await readauthtask.CanAnyBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanAnyBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanAnyStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanAnyStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanReadBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanReadBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanReadStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanReadStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanFetchBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanFetchBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanFetchStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanFetchStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            ReadAuth readauth = ServiceProvider.GetRequiredService<ReadAuth>();
            authorized = readauth.CanAnyBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanAnyBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanAnyString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanAnyStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanFetchBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanFetchBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanFetchString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanFetchStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanFetchVoidDep(int? p)
        {
            return LocalCanFetchVoidDep(p);
        }

        public async Task<Authorized> LocalCanFetchVoidDep(int? p)
        {
            Authorized authorized;
            ReadAuthTask readauthtask = ServiceProvider.GetRequiredService<ReadAuthTask>();
            authorized = await readauthtask.CanAnyBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanAnyBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanAnyStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanAnyStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanReadBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanReadBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanReadStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanReadStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanFetchBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanFetchBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanFetchStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanFetchStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            ReadAuth readauth = ServiceProvider.GetRequiredService<ReadAuth>();
            authorized = readauth.CanAnyBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanAnyBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanAnyString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanAnyStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanFetchBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanFetchBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanFetchString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanFetchStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanFetchBoolTrueDep(int? p)
        {
            return LocalCanFetchBoolTrueDep(p);
        }

        public async Task<Authorized> LocalCanFetchBoolTrueDep(int? p)
        {
            Authorized authorized;
            ReadAuthTask readauthtask = ServiceProvider.GetRequiredService<ReadAuthTask>();
            authorized = await readauthtask.CanAnyBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanAnyBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanAnyStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanAnyStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanReadBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanReadBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanReadStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanReadStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanFetchBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanFetchBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanFetchStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanFetchStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            ReadAuth readauth = ServiceProvider.GetRequiredService<ReadAuth>();
            authorized = readauth.CanAnyBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanAnyBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanAnyString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanAnyStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanFetchBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanFetchBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanFetchString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanFetchStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanFetchBoolFalseDep(int? p)
        {
            return LocalCanFetchBoolFalseDep(p);
        }

        public async Task<Authorized> LocalCanFetchBoolFalseDep(int? p)
        {
            Authorized authorized;
            ReadAuthTask readauthtask = ServiceProvider.GetRequiredService<ReadAuthTask>();
            authorized = await readauthtask.CanAnyBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanAnyBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanAnyStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanAnyStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanReadBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanReadBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanReadStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanReadStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanFetchBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanFetchBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanFetchStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanFetchStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            ReadAuth readauth = ServiceProvider.GetRequiredService<ReadAuth>();
            authorized = readauth.CanAnyBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanAnyBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanAnyString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanAnyStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanFetchBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanFetchBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanFetchString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanFetchStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanFetchTaskDep(int? p)
        {
            return LocalCanFetchTaskDep(p);
        }

        public async Task<Authorized> LocalCanFetchTaskDep(int? p)
        {
            Authorized authorized;
            ReadAuthTask readauthtask = ServiceProvider.GetRequiredService<ReadAuthTask>();
            authorized = await readauthtask.CanAnyBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanAnyBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanAnyStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanAnyStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanReadBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanReadBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanReadStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanReadStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanFetchBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanFetchBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanFetchStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanFetchStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            ReadAuth readauth = ServiceProvider.GetRequiredService<ReadAuth>();
            authorized = readauth.CanAnyBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanAnyBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanAnyString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanAnyStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanFetchBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanFetchBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanFetchString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanFetchStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanFetchTaskBoolDep(int? p)
        {
            return LocalCanFetchTaskBoolDep(p);
        }

        public async Task<Authorized> LocalCanFetchTaskBoolDep(int? p)
        {
            Authorized authorized;
            ReadAuthTask readauthtask = ServiceProvider.GetRequiredService<ReadAuthTask>();
            authorized = await readauthtask.CanAnyBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanAnyBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanAnyStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanAnyStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanReadBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanReadBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanReadStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanReadStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanFetchBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanFetchBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanFetchStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanFetchStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            ReadAuth readauth = ServiceProvider.GetRequiredService<ReadAuth>();
            authorized = readauth.CanAnyBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanAnyBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanAnyString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanAnyStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanFetchBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanFetchBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanFetchString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanFetchStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanFetchTaskBoolFalseDep(int? p)
        {
            return LocalCanFetchTaskBoolFalseDep(p);
        }

        public async Task<Authorized> LocalCanFetchTaskBoolFalseDep(int? p)
        {
            Authorized authorized;
            ReadAuthTask readauthtask = ServiceProvider.GetRequiredService<ReadAuthTask>();
            authorized = await readauthtask.CanAnyBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanAnyBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanAnyStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanAnyStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanReadBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanReadBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanReadStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanReadStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanFetchBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanFetchBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanFetchStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readauthtask.CanFetchStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            ReadAuth readauth = ServiceProvider.GetRequiredService<ReadAuth>();
            authorized = readauth.CanAnyBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanAnyBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanAnyString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanAnyStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanFetchBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanFetchBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanFetchString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanFetchStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public static void FactoryServiceRegistrar(IServiceCollection services, NeatooFactory remoteLocal)
        {
            services.AddScoped<ReadAuthTaskObjectFactory>();
            services.AddScoped<IReadAuthTaskObjectFactory, ReadAuthTaskObjectFactory>();
            services.AddTransient<ReadAuthTaskObject>();
        }
    }
}