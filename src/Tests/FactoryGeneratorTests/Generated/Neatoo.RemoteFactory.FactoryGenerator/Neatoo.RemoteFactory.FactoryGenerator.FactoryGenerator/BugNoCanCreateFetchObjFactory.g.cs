#nullable enable
using Neatoo.RemoteFactory;
using Neatoo.RemoteFactory.Internal;
using Microsoft.Extensions.DependencyInjection;
using static Neatoo.RemoteFactory.FactoryGeneratorTests.SpecificSenarios.BugNoCanCreateFetch;
using Neatoo.RemoteFactory.FactoryGeneratorTests.Mapper;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

/*
							READONLY - DO NOT EDIT!!!!
							Generated by Neatoo.RemoteFactory
*/
namespace Neatoo.RemoteFactory.FactoryGeneratorTests.SpecificSenarios
{
    public interface IBugNoCanCreateFetchObjFactory
    {
        BugNoCanCreateFetchObj? Create();
        BugNoCanCreateFetchObj? Save(BugNoCanCreateFetchObj target);
        Authorized<BugNoCanCreateFetchObj> TrySave(BugNoCanCreateFetchObj target);
        Authorized CanCreate();
        Authorized CanInsert();
        Authorized CanSave();
    }

    internal class BugNoCanCreateFetchObjFactory : FactorySaveBase<BugNoCanCreateFetchObj>, IFactorySave<BugNoCanCreateFetchObj>, IBugNoCanCreateFetchObjFactory
    {
        private readonly IServiceProvider ServiceProvider;
        private readonly IMakeRemoteDelegateRequest? MakeRemoteDelegateRequest;
        // Delegates
        // Delegate Properties to provide Local or Remote fork in execution
        public BugNoCanCreateFetchObjFactory(IServiceProvider serviceProvider, IFactoryCore<BugNoCanCreateFetchObj> factoryCore) : base(factoryCore)
        {
            this.ServiceProvider = serviceProvider;
        }

        public BugNoCanCreateFetchObjFactory(IServiceProvider serviceProvider, IMakeRemoteDelegateRequest remoteMethodDelegate, IFactoryCore<BugNoCanCreateFetchObj> factoryCore) : base(factoryCore)
        {
            this.ServiceProvider = serviceProvider;
            this.MakeRemoteDelegateRequest = remoteMethodDelegate;
        }

        public virtual BugNoCanCreateFetchObj? Create()
        {
            return (LocalCreate()).Result;
        }

        public Authorized<BugNoCanCreateFetchObj> LocalCreate()
        {
            Authorized authorized;
            BugNoCanCreateFetchAuth bugnocancreatefetchauth = ServiceProvider.GetRequiredService<BugNoCanCreateFetchAuth>();
            authorized = bugnocancreatefetchauth.CanAccess();
            if (!authorized.HasAccess)
            {
                return new Authorized<BugNoCanCreateFetchObj>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<BugNoCanCreateFetchObj>();
            return new Authorized<BugNoCanCreateFetchObj>(DoFactoryMethodCall(target, FactoryOperation.Create, () => target.Create()));
        }

        public Authorized<BugNoCanCreateFetchObj> LocalInsert(BugNoCanCreateFetchObj target)
        {
            Authorized authorized;
            BugNoCanCreateFetchAuth bugnocancreatefetchauth = ServiceProvider.GetRequiredService<BugNoCanCreateFetchAuth>();
            authorized = bugnocancreatefetchauth.CanAccess();
            if (!authorized.HasAccess)
            {
                return new Authorized<BugNoCanCreateFetchObj>(authorized);
            }

            var cTarget = (BugNoCanCreateFetchObj)target ?? throw new Exception("BugNoCanCreateFetchObj must implement BugNoCanCreateFetchObj");
            return new Authorized<BugNoCanCreateFetchObj>(DoFactoryMethodCall(cTarget, FactoryOperation.Insert, () => cTarget.Insert()));
        }

        public virtual BugNoCanCreateFetchObj? Save(BugNoCanCreateFetchObj target)
        {
            var authorized = (LocalSave(target));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized);
            }

            return authorized.Result;
        }

        public virtual Authorized<BugNoCanCreateFetchObj> TrySave(BugNoCanCreateFetchObj target)
        {
            return LocalSave(target);
        }

        async Task<IFactorySaveMeta?> IFactorySave<BugNoCanCreateFetchObj>.Save(BugNoCanCreateFetchObj target)
        {
            return await Task.FromResult((IFactorySaveMeta? )Save(target));
        }

        public virtual Authorized<BugNoCanCreateFetchObj> LocalSave(BugNoCanCreateFetchObj target)
        {
            if (target.IsDeleted)
            {
                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert(target);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual Authorized CanCreate()
        {
            return LocalCanCreate();
        }

        public Authorized LocalCanCreate()
        {
            Authorized authorized;
            BugNoCanCreateFetchAuth bugnocancreatefetchauth = ServiceProvider.GetRequiredService<BugNoCanCreateFetchAuth>();
            authorized = bugnocancreatefetchauth.CanAccess();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Authorized CanInsert()
        {
            return LocalCanInsert();
        }

        public Authorized LocalCanInsert()
        {
            Authorized authorized;
            BugNoCanCreateFetchAuth bugnocancreatefetchauth = ServiceProvider.GetRequiredService<BugNoCanCreateFetchAuth>();
            authorized = bugnocancreatefetchauth.CanAccess();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Authorized CanSave()
        {
            return LocalCanSave();
        }

        public Authorized LocalCanSave()
        {
            Authorized authorized;
            BugNoCanCreateFetchAuth bugnocancreatefetchauth = ServiceProvider.GetRequiredService<BugNoCanCreateFetchAuth>();
            authorized = bugnocancreatefetchauth.CanAccess();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public static void FactoryServiceRegistrar(IServiceCollection services, NeatooFactory remoteLocal)
        {
            services.AddScoped<BugNoCanCreateFetchObjFactory>();
            services.AddScoped<IBugNoCanCreateFetchObjFactory, BugNoCanCreateFetchObjFactory>();
            services.AddTransient<BugNoCanCreateFetchObj>();
            services.AddScoped<IFactorySave<BugNoCanCreateFetchObj>, BugNoCanCreateFetchObjFactory>();
        }
    }
}