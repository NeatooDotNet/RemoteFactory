#nullable enable
using Neatoo.RemoteFactory;
using Neatoo.RemoteFactory.Internal;
using Microsoft.Extensions.DependencyInjection;
using static Neatoo.RemoteFactory.FactoryGeneratorTests.SpecificSenarios.SaveNotNullableNoDelete;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

/*
							READONLY - DO NOT EDIT!!!!
							Generated by Neatoo.RemoteFactory
*/
namespace Neatoo.RemoteFactory.FactoryGeneratorTests.SpecificSenarios
{
    public interface ISaveNotNullableNoDeleteObjFactory
    {
        SaveNotNullableNoDeleteObj Create();
        SaveNotNullableNoDeleteObj Save(SaveNotNullableNoDeleteObj target);
    }

    internal class SaveNotNullableNoDeleteObjFactory : FactorySaveBase<SaveNotNullableNoDeleteObj>, ISaveNotNullableNoDeleteObjFactory, IFactorySave<SaveNotNullableNoDeleteObj>
    {
        private readonly IServiceProvider ServiceProvider;
        public SaveNotNullableNoDeleteObjFactory(IServiceProvider serviceProvider, IFactoryCore<SaveNotNullableNoDeleteObj> factoryCore) : base(factoryCore)
        {
            this.ServiceProvider = serviceProvider;
        }

        public SaveNotNullableNoDeleteObjFactory(IServiceProvider serviceProvider, IMakeRemoteDelegateRequest remoteMethodDelegate, IFactoryCore<SaveNotNullableNoDeleteObj> factoryCore) : base(factoryCore)
        {
            this.ServiceProvider = serviceProvider;
        }

        public virtual SaveNotNullableNoDeleteObj Create()
        {
            return LocalCreate();
        }

        public SaveNotNullableNoDeleteObj LocalCreate()
        {
            return DoFactoryMethodCall(FactoryOperation.Create, () => new SaveNotNullableNoDeleteObj());
        }

        public SaveNotNullableNoDeleteObj LocalInsert(SaveNotNullableNoDeleteObj target)
        {
            var cTarget = (SaveNotNullableNoDeleteObj)target ?? throw new Exception("SaveNotNullableNoDeleteObj must implement SaveNotNullableNoDeleteObj");
            return DoFactoryMethodCall(cTarget, FactoryOperation.Insert, () => cTarget.Insert());
        }

        public SaveNotNullableNoDeleteObj LocalUpdate(SaveNotNullableNoDeleteObj target)
        {
            var cTarget = (SaveNotNullableNoDeleteObj)target ?? throw new Exception("SaveNotNullableNoDeleteObj must implement SaveNotNullableNoDeleteObj");
            return DoFactoryMethodCall(cTarget, FactoryOperation.Update, () => cTarget.Update());
        }

        public virtual SaveNotNullableNoDeleteObj Save(SaveNotNullableNoDeleteObj target)
        {
            return LocalSave(target);
        }

        public virtual SaveNotNullableNoDeleteObj LocalSave(SaveNotNullableNoDeleteObj target)
        {
            if (target.IsDeleted)
            {
                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert(target);
            }
            else
            {
                return LocalUpdate(target);
            }
        }

        async Task<IFactorySaveMeta?> IFactorySave<SaveNotNullableNoDeleteObj>.Save(SaveNotNullableNoDeleteObj target)
        {
            return await Task.FromResult((IFactorySaveMeta? )Save(target));
        }

        public static void FactoryServiceRegistrar(IServiceCollection services, NeatooFactory remoteLocal)
        {
            services.AddScoped<SaveNotNullableNoDeleteObjFactory>();
            services.AddScoped<ISaveNotNullableNoDeleteObjFactory, SaveNotNullableNoDeleteObjFactory>();
            services.AddTransient<SaveNotNullableNoDeleteObj>();
            services.AddScoped<IFactorySave<SaveNotNullableNoDeleteObj>, SaveNotNullableNoDeleteObjFactory>();
        }
    }
}