#nullable enable
using Neatoo.RemoteFactory;
using Neatoo.RemoteFactory.Internal;
using Microsoft.Extensions.DependencyInjection;
using static Neatoo.RemoteFactory.FactoryGeneratorTests.Factory.ReadRemoteAuthTests;
using Neatoo.RemoteFactory.FactoryGeneratorTests;
using Neatoo.RemoteFactory.FactoryGeneratorTests.Shared;
using Xunit;

/*
							READONLY - DO NOT EDIT!!!!
							Generated by Neatoo.RemoteFactory
*/
namespace Neatoo.RemoteFactory.FactoryGeneratorTests.Factory
{
    public interface IReadRemoteAuthTaskObjFactory : IReadRemoteAuthTaskObjClientFactory
    {
    }

    internal class ReadRemoteAuthTaskObjFactory : ReadRemoteAuthTaskObjClientFactory, IReadRemoteAuthTaskObjFactory
    {
        private readonly IServiceProvider ServiceProvider;
        public ReadRemoteAuthTaskObjFactory(IServiceProvider serviceProvider, IFactoryCore<ReadRemoteAuthTaskObj> factoryCore) : base(factoryCore)
        {
            this.ServiceProvider = serviceProvider;
            CreateVoidProperty = LocalCreateVoid;
            CreateBoolProperty = LocalCreateBool;
            CreateTaskProperty = LocalCreateTask;
            CreateTaskBoolProperty = LocalCreateTaskBool;
            CreateTaskBoolFalseProperty = LocalCreateTaskBoolFalse;
            CreateVoidDepProperty = LocalCreateVoidDep;
            CreateBoolTrueDepProperty = LocalCreateBoolTrueDep;
            CreateBoolFalseDepProperty = LocalCreateBoolFalseDep;
            CreateTaskDepProperty = LocalCreateTaskDep;
            CreateTaskBoolDepProperty = LocalCreateTaskBoolDep;
            FetchVoidProperty = LocalFetchVoid;
            FetchBoolProperty = LocalFetchBool;
            FetchTaskProperty = LocalFetchTask;
            FetchTaskBoolProperty = LocalFetchTaskBool;
            FetchVoidDepProperty = LocalFetchVoidDep;
            FetchBoolTrueDepProperty = LocalFetchBoolTrueDep;
            FetchBoolFalseDepProperty = LocalFetchBoolFalseDep;
            FetchTaskDepProperty = LocalFetchTaskDep;
            FetchTaskBoolDepProperty = LocalFetchTaskBoolDep;
            FetchTaskBoolFalseDepProperty = LocalFetchTaskBoolFalseDep;
            CanCreateVoidProperty = LocalCanCreateVoid;
            CanCreateBoolProperty = LocalCanCreateBool;
            CanCreateTaskProperty = LocalCanCreateTask;
            CanCreateTaskBoolProperty = LocalCanCreateTaskBool;
            CanCreateTaskBoolFalseProperty = LocalCanCreateTaskBoolFalse;
            CanCreateVoidDepProperty = LocalCanCreateVoidDep;
            CanCreateBoolTrueDepProperty = LocalCanCreateBoolTrueDep;
            CanCreateBoolFalseDepProperty = LocalCanCreateBoolFalseDep;
            CanCreateTaskDepProperty = LocalCanCreateTaskDep;
            CanCreateTaskBoolDepProperty = LocalCanCreateTaskBoolDep;
            CanFetchVoidProperty = LocalCanFetchVoid;
            CanFetchBoolProperty = LocalCanFetchBool;
            CanFetchTaskProperty = LocalCanFetchTask;
            CanFetchTaskBoolProperty = LocalCanFetchTaskBool;
            CanFetchVoidDepProperty = LocalCanFetchVoidDep;
            CanFetchBoolTrueDepProperty = LocalCanFetchBoolTrueDep;
            CanFetchBoolFalseDepProperty = LocalCanFetchBoolFalseDep;
            CanFetchTaskDepProperty = LocalCanFetchTaskDep;
            CanFetchTaskBoolDepProperty = LocalCanFetchTaskBoolDep;
            CanFetchTaskBoolFalseDepProperty = LocalCanFetchTaskBoolFalseDep;
        }

        public ReadRemoteAuthTaskObjFactory(IServiceProvider serviceProvider, IMakeRemoteDelegateRequest remoteMethodDelegate, IFactoryCore<ReadRemoteAuthTaskObj> factoryCore) : base(remoteMethodDelegate, factoryCore)
        {
            this.ServiceProvider = serviceProvider;
        }

        public async Task<Authorized<ReadRemoteAuthTaskObj>> LocalCreateVoid(int? param)
        {
            Authorized authorized;
            ReadRemoteAuthTask readremoteauthtask = ServiceProvider.GetRequiredService<ReadRemoteAuthTask>();
            authorized = await readremoteauthtask.CanReadRemoteBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanReadRemoteBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanReadRemoteStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanReadRemoteStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanCreateBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanCreateBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanCreateStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanCreateStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            ReadRemoteAuth readremoteauth = ServiceProvider.GetRequiredService<ReadRemoteAuth>();
            authorized = readremoteauth.CanReadRemoteBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanReadRemoteBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanReadRemoteString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanReadRemoteStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanCreateBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanCreateBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanCreateString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanCreateStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<ReadRemoteAuthTaskObj>();
            return new Authorized<ReadRemoteAuthTaskObj>(DoFactoryMethodCall(target, FactoryOperation.Create, () => target.CreateVoid(param)));
        }

        public async Task<Authorized<ReadRemoteAuthTaskObj>> LocalCreateBool(int? param)
        {
            Authorized authorized;
            ReadRemoteAuthTask readremoteauthtask = ServiceProvider.GetRequiredService<ReadRemoteAuthTask>();
            authorized = await readremoteauthtask.CanReadRemoteBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanReadRemoteBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanReadRemoteStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanReadRemoteStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanCreateBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanCreateBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanCreateStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanCreateStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            ReadRemoteAuth readremoteauth = ServiceProvider.GetRequiredService<ReadRemoteAuth>();
            authorized = readremoteauth.CanReadRemoteBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanReadRemoteBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanReadRemoteString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanReadRemoteStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanCreateBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanCreateBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanCreateString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanCreateStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<ReadRemoteAuthTaskObj>();
            return new Authorized<ReadRemoteAuthTaskObj>(DoFactoryMethodCallBool(target, FactoryOperation.Create, () => target.CreateBool(param)));
        }

        public async Task<Authorized<ReadRemoteAuthTaskObj>> LocalCreateTask(int? param)
        {
            Authorized authorized;
            ReadRemoteAuthTask readremoteauthtask = ServiceProvider.GetRequiredService<ReadRemoteAuthTask>();
            authorized = await readremoteauthtask.CanReadRemoteBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanReadRemoteBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanReadRemoteStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanReadRemoteStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanCreateBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanCreateBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanCreateStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanCreateStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            ReadRemoteAuth readremoteauth = ServiceProvider.GetRequiredService<ReadRemoteAuth>();
            authorized = readremoteauth.CanReadRemoteBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanReadRemoteBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanReadRemoteString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanReadRemoteStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanCreateBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanCreateBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanCreateString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanCreateStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<ReadRemoteAuthTaskObj>();
            return new Authorized<ReadRemoteAuthTaskObj>(await DoFactoryMethodCallAsync(target, FactoryOperation.Create, () => target.CreateTask(param)));
        }

        public async Task<Authorized<ReadRemoteAuthTaskObj>> LocalCreateTaskBool(int? param)
        {
            Authorized authorized;
            ReadRemoteAuthTask readremoteauthtask = ServiceProvider.GetRequiredService<ReadRemoteAuthTask>();
            authorized = await readremoteauthtask.CanReadRemoteBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanReadRemoteBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanReadRemoteStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanReadRemoteStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanCreateBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanCreateBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanCreateStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanCreateStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            ReadRemoteAuth readremoteauth = ServiceProvider.GetRequiredService<ReadRemoteAuth>();
            authorized = readremoteauth.CanReadRemoteBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanReadRemoteBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanReadRemoteString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanReadRemoteStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanCreateBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanCreateBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanCreateString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanCreateStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<ReadRemoteAuthTaskObj>();
            return new Authorized<ReadRemoteAuthTaskObj>(await DoFactoryMethodCallBoolAsync(target, FactoryOperation.Create, () => target.CreateTaskBool(param)));
        }

        public async Task<Authorized<ReadRemoteAuthTaskObj>> LocalCreateTaskBoolFalse(int? param)
        {
            Authorized authorized;
            ReadRemoteAuthTask readremoteauthtask = ServiceProvider.GetRequiredService<ReadRemoteAuthTask>();
            authorized = await readremoteauthtask.CanReadRemoteBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanReadRemoteBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanReadRemoteStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanReadRemoteStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanCreateBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanCreateBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanCreateStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanCreateStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            ReadRemoteAuth readremoteauth = ServiceProvider.GetRequiredService<ReadRemoteAuth>();
            authorized = readremoteauth.CanReadRemoteBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanReadRemoteBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanReadRemoteString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanReadRemoteStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanCreateBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanCreateBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanCreateString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanCreateStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<ReadRemoteAuthTaskObj>();
            return new Authorized<ReadRemoteAuthTaskObj>(await DoFactoryMethodCallBoolAsync(target, FactoryOperation.Create, () => target.CreateTaskBoolFalse(param)));
        }

        public async Task<Authorized<ReadRemoteAuthTaskObj>> LocalCreateVoidDep(int? param)
        {
            Authorized authorized;
            ReadRemoteAuthTask readremoteauthtask = ServiceProvider.GetRequiredService<ReadRemoteAuthTask>();
            authorized = await readremoteauthtask.CanReadRemoteBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanReadRemoteBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanReadRemoteStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanReadRemoteStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanCreateBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanCreateBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanCreateStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanCreateStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            ReadRemoteAuth readremoteauth = ServiceProvider.GetRequiredService<ReadRemoteAuth>();
            authorized = readremoteauth.CanReadRemoteBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanReadRemoteBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanReadRemoteString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanReadRemoteStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanCreateBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanCreateBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanCreateString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanCreateStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<ReadRemoteAuthTaskObj>();
            var service = ServiceProvider.GetRequiredService<IService>();
            return new Authorized<ReadRemoteAuthTaskObj>(DoFactoryMethodCall(target, FactoryOperation.Create, () => target.CreateVoidDep(param, service)));
        }

        public async Task<Authorized<ReadRemoteAuthTaskObj>> LocalCreateBoolTrueDep(int? param)
        {
            Authorized authorized;
            ReadRemoteAuthTask readremoteauthtask = ServiceProvider.GetRequiredService<ReadRemoteAuthTask>();
            authorized = await readremoteauthtask.CanReadRemoteBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanReadRemoteBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanReadRemoteStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanReadRemoteStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanCreateBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanCreateBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanCreateStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanCreateStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            ReadRemoteAuth readremoteauth = ServiceProvider.GetRequiredService<ReadRemoteAuth>();
            authorized = readremoteauth.CanReadRemoteBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanReadRemoteBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanReadRemoteString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanReadRemoteStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanCreateBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanCreateBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanCreateString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanCreateStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<ReadRemoteAuthTaskObj>();
            var service = ServiceProvider.GetRequiredService<IService>();
            return new Authorized<ReadRemoteAuthTaskObj>(DoFactoryMethodCallBool(target, FactoryOperation.Create, () => target.CreateBoolTrueDep(param, service)));
        }

        public async Task<Authorized<ReadRemoteAuthTaskObj>> LocalCreateBoolFalseDep(int? param)
        {
            Authorized authorized;
            ReadRemoteAuthTask readremoteauthtask = ServiceProvider.GetRequiredService<ReadRemoteAuthTask>();
            authorized = await readremoteauthtask.CanReadRemoteBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanReadRemoteBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanReadRemoteStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanReadRemoteStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanCreateBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanCreateBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanCreateStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanCreateStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            ReadRemoteAuth readremoteauth = ServiceProvider.GetRequiredService<ReadRemoteAuth>();
            authorized = readremoteauth.CanReadRemoteBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanReadRemoteBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanReadRemoteString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanReadRemoteStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanCreateBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanCreateBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanCreateString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanCreateStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<ReadRemoteAuthTaskObj>();
            var service = ServiceProvider.GetRequiredService<IService>();
            return new Authorized<ReadRemoteAuthTaskObj>(DoFactoryMethodCallBool(target, FactoryOperation.Create, () => target.CreateBoolFalseDep(param, service)));
        }

        public async Task<Authorized<ReadRemoteAuthTaskObj>> LocalCreateTaskDep(int? param)
        {
            Authorized authorized;
            ReadRemoteAuthTask readremoteauthtask = ServiceProvider.GetRequiredService<ReadRemoteAuthTask>();
            authorized = await readremoteauthtask.CanReadRemoteBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanReadRemoteBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanReadRemoteStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanReadRemoteStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanCreateBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanCreateBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanCreateStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanCreateStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            ReadRemoteAuth readremoteauth = ServiceProvider.GetRequiredService<ReadRemoteAuth>();
            authorized = readremoteauth.CanReadRemoteBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanReadRemoteBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanReadRemoteString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanReadRemoteStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanCreateBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanCreateBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanCreateString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanCreateStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<ReadRemoteAuthTaskObj>();
            var service = ServiceProvider.GetRequiredService<IService>();
            return new Authorized<ReadRemoteAuthTaskObj>(await DoFactoryMethodCallAsync(target, FactoryOperation.Create, () => target.CreateTaskDep(param, service)));
        }

        public async Task<Authorized<ReadRemoteAuthTaskObj>> LocalCreateTaskBoolDep(int? param)
        {
            Authorized authorized;
            ReadRemoteAuthTask readremoteauthtask = ServiceProvider.GetRequiredService<ReadRemoteAuthTask>();
            authorized = await readremoteauthtask.CanReadRemoteBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanReadRemoteBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanReadRemoteStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanReadRemoteStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanCreateBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanCreateBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanCreateStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanCreateStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            ReadRemoteAuth readremoteauth = ServiceProvider.GetRequiredService<ReadRemoteAuth>();
            authorized = readremoteauth.CanReadRemoteBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanReadRemoteBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanReadRemoteString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanReadRemoteStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanCreateBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanCreateBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanCreateString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanCreateStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<ReadRemoteAuthTaskObj>();
            var service = ServiceProvider.GetRequiredService<IService>();
            return new Authorized<ReadRemoteAuthTaskObj>(await DoFactoryMethodCallBoolAsync(target, FactoryOperation.Create, () => target.CreateTaskBoolDep(param, service)));
        }

        public async Task<Authorized<ReadRemoteAuthTaskObj>> LocalFetchVoid(int? param)
        {
            Authorized authorized;
            ReadRemoteAuthTask readremoteauthtask = ServiceProvider.GetRequiredService<ReadRemoteAuthTask>();
            authorized = await readremoteauthtask.CanReadRemoteBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanReadRemoteBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanReadRemoteStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanReadRemoteStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanFetchBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanFetchBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanFetchStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanFetchStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            ReadRemoteAuth readremoteauth = ServiceProvider.GetRequiredService<ReadRemoteAuth>();
            authorized = readremoteauth.CanReadRemoteBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanReadRemoteBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanReadRemoteString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanReadRemoteStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanFetchBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanFetchBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanFetchString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanFetchStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<ReadRemoteAuthTaskObj>();
            return new Authorized<ReadRemoteAuthTaskObj>(DoFactoryMethodCall(target, FactoryOperation.Fetch, () => target.FetchVoid(param)));
        }

        public async Task<Authorized<ReadRemoteAuthTaskObj>> LocalFetchBool(int? param)
        {
            Authorized authorized;
            ReadRemoteAuthTask readremoteauthtask = ServiceProvider.GetRequiredService<ReadRemoteAuthTask>();
            authorized = await readremoteauthtask.CanReadRemoteBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanReadRemoteBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanReadRemoteStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanReadRemoteStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanFetchBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanFetchBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanFetchStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanFetchStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            ReadRemoteAuth readremoteauth = ServiceProvider.GetRequiredService<ReadRemoteAuth>();
            authorized = readremoteauth.CanReadRemoteBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanReadRemoteBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanReadRemoteString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanReadRemoteStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanFetchBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanFetchBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanFetchString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanFetchStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<ReadRemoteAuthTaskObj>();
            return new Authorized<ReadRemoteAuthTaskObj>(DoFactoryMethodCallBool(target, FactoryOperation.Fetch, () => target.FetchBool(param)));
        }

        public async Task<Authorized<ReadRemoteAuthTaskObj>> LocalFetchTask(int? param)
        {
            Authorized authorized;
            ReadRemoteAuthTask readremoteauthtask = ServiceProvider.GetRequiredService<ReadRemoteAuthTask>();
            authorized = await readremoteauthtask.CanReadRemoteBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanReadRemoteBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanReadRemoteStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanReadRemoteStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanFetchBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanFetchBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanFetchStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanFetchStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            ReadRemoteAuth readremoteauth = ServiceProvider.GetRequiredService<ReadRemoteAuth>();
            authorized = readremoteauth.CanReadRemoteBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanReadRemoteBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanReadRemoteString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanReadRemoteStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanFetchBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanFetchBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanFetchString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanFetchStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<ReadRemoteAuthTaskObj>();
            return new Authorized<ReadRemoteAuthTaskObj>(await DoFactoryMethodCallAsync(target, FactoryOperation.Fetch, () => target.FetchTask(param)));
        }

        public async Task<Authorized<ReadRemoteAuthTaskObj>> LocalFetchTaskBool(int? param)
        {
            Authorized authorized;
            ReadRemoteAuthTask readremoteauthtask = ServiceProvider.GetRequiredService<ReadRemoteAuthTask>();
            authorized = await readremoteauthtask.CanReadRemoteBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanReadRemoteBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanReadRemoteStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanReadRemoteStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanFetchBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanFetchBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanFetchStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanFetchStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            ReadRemoteAuth readremoteauth = ServiceProvider.GetRequiredService<ReadRemoteAuth>();
            authorized = readremoteauth.CanReadRemoteBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanReadRemoteBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanReadRemoteString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanReadRemoteStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanFetchBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanFetchBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanFetchString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanFetchStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<ReadRemoteAuthTaskObj>();
            return new Authorized<ReadRemoteAuthTaskObj>(await DoFactoryMethodCallBoolAsync(target, FactoryOperation.Fetch, () => target.FetchTaskBool(param)));
        }

        public async Task<Authorized<ReadRemoteAuthTaskObj>> LocalFetchVoidDep(int? param)
        {
            Authorized authorized;
            ReadRemoteAuthTask readremoteauthtask = ServiceProvider.GetRequiredService<ReadRemoteAuthTask>();
            authorized = await readremoteauthtask.CanReadRemoteBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanReadRemoteBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanReadRemoteStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanReadRemoteStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanFetchBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanFetchBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanFetchStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanFetchStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            ReadRemoteAuth readremoteauth = ServiceProvider.GetRequiredService<ReadRemoteAuth>();
            authorized = readremoteauth.CanReadRemoteBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanReadRemoteBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanReadRemoteString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanReadRemoteStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanFetchBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanFetchBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanFetchString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanFetchStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<ReadRemoteAuthTaskObj>();
            var service = ServiceProvider.GetRequiredService<IService>();
            return new Authorized<ReadRemoteAuthTaskObj>(DoFactoryMethodCall(target, FactoryOperation.Fetch, () => target.FetchVoidDep(param, service)));
        }

        public async Task<Authorized<ReadRemoteAuthTaskObj>> LocalFetchBoolTrueDep(int? param)
        {
            Authorized authorized;
            ReadRemoteAuthTask readremoteauthtask = ServiceProvider.GetRequiredService<ReadRemoteAuthTask>();
            authorized = await readremoteauthtask.CanReadRemoteBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanReadRemoteBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanReadRemoteStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanReadRemoteStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanFetchBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanFetchBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanFetchStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanFetchStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            ReadRemoteAuth readremoteauth = ServiceProvider.GetRequiredService<ReadRemoteAuth>();
            authorized = readremoteauth.CanReadRemoteBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanReadRemoteBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanReadRemoteString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanReadRemoteStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanFetchBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanFetchBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanFetchString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanFetchStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<ReadRemoteAuthTaskObj>();
            var service = ServiceProvider.GetRequiredService<IService>();
            return new Authorized<ReadRemoteAuthTaskObj>(DoFactoryMethodCallBool(target, FactoryOperation.Fetch, () => target.FetchBoolTrueDep(param, service)));
        }

        public async Task<Authorized<ReadRemoteAuthTaskObj>> LocalFetchBoolFalseDep(int? param)
        {
            Authorized authorized;
            ReadRemoteAuthTask readremoteauthtask = ServiceProvider.GetRequiredService<ReadRemoteAuthTask>();
            authorized = await readremoteauthtask.CanReadRemoteBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanReadRemoteBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanReadRemoteStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanReadRemoteStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanFetchBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanFetchBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanFetchStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanFetchStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            ReadRemoteAuth readremoteauth = ServiceProvider.GetRequiredService<ReadRemoteAuth>();
            authorized = readremoteauth.CanReadRemoteBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanReadRemoteBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanReadRemoteString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanReadRemoteStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanFetchBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanFetchBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanFetchString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanFetchStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<ReadRemoteAuthTaskObj>();
            var service = ServiceProvider.GetRequiredService<IService>();
            return new Authorized<ReadRemoteAuthTaskObj>(DoFactoryMethodCallBool(target, FactoryOperation.Fetch, () => target.FetchBoolFalseDep(param, service)));
        }

        public async Task<Authorized<ReadRemoteAuthTaskObj>> LocalFetchTaskDep(int? param)
        {
            Authorized authorized;
            ReadRemoteAuthTask readremoteauthtask = ServiceProvider.GetRequiredService<ReadRemoteAuthTask>();
            authorized = await readremoteauthtask.CanReadRemoteBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanReadRemoteBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanReadRemoteStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanReadRemoteStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanFetchBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanFetchBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanFetchStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanFetchStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            ReadRemoteAuth readremoteauth = ServiceProvider.GetRequiredService<ReadRemoteAuth>();
            authorized = readremoteauth.CanReadRemoteBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanReadRemoteBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanReadRemoteString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanReadRemoteStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanFetchBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanFetchBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanFetchString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanFetchStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<ReadRemoteAuthTaskObj>();
            var service = ServiceProvider.GetRequiredService<IService>();
            return new Authorized<ReadRemoteAuthTaskObj>(await DoFactoryMethodCallAsync(target, FactoryOperation.Fetch, () => target.FetchTaskDep(param, service)));
        }

        public async Task<Authorized<ReadRemoteAuthTaskObj>> LocalFetchTaskBoolDep(int? param)
        {
            Authorized authorized;
            ReadRemoteAuthTask readremoteauthtask = ServiceProvider.GetRequiredService<ReadRemoteAuthTask>();
            authorized = await readremoteauthtask.CanReadRemoteBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanReadRemoteBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanReadRemoteStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanReadRemoteStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanFetchBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanFetchBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanFetchStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanFetchStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            ReadRemoteAuth readremoteauth = ServiceProvider.GetRequiredService<ReadRemoteAuth>();
            authorized = readremoteauth.CanReadRemoteBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanReadRemoteBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanReadRemoteString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanReadRemoteStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanFetchBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanFetchBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanFetchString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanFetchStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<ReadRemoteAuthTaskObj>();
            var service = ServiceProvider.GetRequiredService<IService>();
            return new Authorized<ReadRemoteAuthTaskObj>(await DoFactoryMethodCallBoolAsync(target, FactoryOperation.Fetch, () => target.FetchTaskBoolDep(param, service)));
        }

        public async Task<Authorized<ReadRemoteAuthTaskObj>> LocalFetchTaskBoolFalseDep(int? param)
        {
            Authorized authorized;
            ReadRemoteAuthTask readremoteauthtask = ServiceProvider.GetRequiredService<ReadRemoteAuthTask>();
            authorized = await readremoteauthtask.CanReadRemoteBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanReadRemoteBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanReadRemoteStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanReadRemoteStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanFetchBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanFetchBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanFetchStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanFetchStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            ReadRemoteAuth readremoteauth = ServiceProvider.GetRequiredService<ReadRemoteAuth>();
            authorized = readremoteauth.CanReadRemoteBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanReadRemoteBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanReadRemoteString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanReadRemoteStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanFetchBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanFetchBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanFetchString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanFetchStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<ReadRemoteAuthTaskObj>();
            var service = ServiceProvider.GetRequiredService<IService>();
            return new Authorized<ReadRemoteAuthTaskObj>(await DoFactoryMethodCallBoolAsync(target, FactoryOperation.Fetch, () => target.FetchTaskBoolFalseDep(param, service)));
        }

        public async Task<Authorized> LocalCanCreateVoid(int? p)
        {
            Authorized authorized;
            ReadRemoteAuthTask readremoteauthtask = ServiceProvider.GetRequiredService<ReadRemoteAuthTask>();
            authorized = await readremoteauthtask.CanReadRemoteBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanReadRemoteBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanReadRemoteStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanReadRemoteStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanCreateBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanCreateBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanCreateStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanCreateStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            ReadRemoteAuth readremoteauth = ServiceProvider.GetRequiredService<ReadRemoteAuth>();
            authorized = readremoteauth.CanReadRemoteBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanReadRemoteBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanReadRemoteString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanReadRemoteStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanCreateBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanCreateBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanCreateString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanCreateStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public async Task<Authorized> LocalCanCreateBool(int? p)
        {
            Authorized authorized;
            ReadRemoteAuthTask readremoteauthtask = ServiceProvider.GetRequiredService<ReadRemoteAuthTask>();
            authorized = await readremoteauthtask.CanReadRemoteBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanReadRemoteBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanReadRemoteStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanReadRemoteStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanCreateBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanCreateBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanCreateStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanCreateStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            ReadRemoteAuth readremoteauth = ServiceProvider.GetRequiredService<ReadRemoteAuth>();
            authorized = readremoteauth.CanReadRemoteBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanReadRemoteBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanReadRemoteString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanReadRemoteStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanCreateBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanCreateBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanCreateString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanCreateStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public async Task<Authorized> LocalCanCreateTask(int? p)
        {
            Authorized authorized;
            ReadRemoteAuthTask readremoteauthtask = ServiceProvider.GetRequiredService<ReadRemoteAuthTask>();
            authorized = await readremoteauthtask.CanReadRemoteBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanReadRemoteBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanReadRemoteStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanReadRemoteStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanCreateBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanCreateBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanCreateStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanCreateStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            ReadRemoteAuth readremoteauth = ServiceProvider.GetRequiredService<ReadRemoteAuth>();
            authorized = readremoteauth.CanReadRemoteBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanReadRemoteBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanReadRemoteString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanReadRemoteStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanCreateBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanCreateBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanCreateString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanCreateStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public async Task<Authorized> LocalCanCreateTaskBool(int? p)
        {
            Authorized authorized;
            ReadRemoteAuthTask readremoteauthtask = ServiceProvider.GetRequiredService<ReadRemoteAuthTask>();
            authorized = await readremoteauthtask.CanReadRemoteBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanReadRemoteBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanReadRemoteStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanReadRemoteStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanCreateBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanCreateBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanCreateStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanCreateStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            ReadRemoteAuth readremoteauth = ServiceProvider.GetRequiredService<ReadRemoteAuth>();
            authorized = readremoteauth.CanReadRemoteBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanReadRemoteBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanReadRemoteString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanReadRemoteStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanCreateBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanCreateBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanCreateString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanCreateStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public async Task<Authorized> LocalCanCreateTaskBoolFalse(int? p)
        {
            Authorized authorized;
            ReadRemoteAuthTask readremoteauthtask = ServiceProvider.GetRequiredService<ReadRemoteAuthTask>();
            authorized = await readremoteauthtask.CanReadRemoteBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanReadRemoteBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanReadRemoteStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanReadRemoteStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanCreateBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanCreateBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanCreateStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanCreateStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            ReadRemoteAuth readremoteauth = ServiceProvider.GetRequiredService<ReadRemoteAuth>();
            authorized = readremoteauth.CanReadRemoteBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanReadRemoteBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanReadRemoteString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanReadRemoteStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanCreateBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanCreateBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanCreateString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanCreateStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public async Task<Authorized> LocalCanCreateVoidDep(int? p)
        {
            Authorized authorized;
            ReadRemoteAuthTask readremoteauthtask = ServiceProvider.GetRequiredService<ReadRemoteAuthTask>();
            authorized = await readremoteauthtask.CanReadRemoteBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanReadRemoteBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanReadRemoteStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanReadRemoteStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanCreateBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanCreateBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanCreateStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanCreateStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            ReadRemoteAuth readremoteauth = ServiceProvider.GetRequiredService<ReadRemoteAuth>();
            authorized = readremoteauth.CanReadRemoteBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanReadRemoteBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanReadRemoteString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanReadRemoteStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanCreateBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanCreateBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanCreateString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanCreateStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public async Task<Authorized> LocalCanCreateBoolTrueDep(int? p)
        {
            Authorized authorized;
            ReadRemoteAuthTask readremoteauthtask = ServiceProvider.GetRequiredService<ReadRemoteAuthTask>();
            authorized = await readremoteauthtask.CanReadRemoteBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanReadRemoteBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanReadRemoteStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanReadRemoteStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanCreateBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanCreateBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanCreateStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanCreateStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            ReadRemoteAuth readremoteauth = ServiceProvider.GetRequiredService<ReadRemoteAuth>();
            authorized = readremoteauth.CanReadRemoteBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanReadRemoteBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanReadRemoteString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanReadRemoteStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanCreateBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanCreateBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanCreateString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanCreateStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public async Task<Authorized> LocalCanCreateBoolFalseDep(int? p)
        {
            Authorized authorized;
            ReadRemoteAuthTask readremoteauthtask = ServiceProvider.GetRequiredService<ReadRemoteAuthTask>();
            authorized = await readremoteauthtask.CanReadRemoteBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanReadRemoteBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanReadRemoteStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanReadRemoteStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanCreateBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanCreateBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanCreateStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanCreateStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            ReadRemoteAuth readremoteauth = ServiceProvider.GetRequiredService<ReadRemoteAuth>();
            authorized = readremoteauth.CanReadRemoteBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanReadRemoteBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanReadRemoteString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanReadRemoteStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanCreateBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanCreateBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanCreateString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanCreateStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public async Task<Authorized> LocalCanCreateTaskDep(int? p)
        {
            Authorized authorized;
            ReadRemoteAuthTask readremoteauthtask = ServiceProvider.GetRequiredService<ReadRemoteAuthTask>();
            authorized = await readremoteauthtask.CanReadRemoteBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanReadRemoteBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanReadRemoteStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanReadRemoteStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanCreateBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanCreateBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanCreateStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanCreateStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            ReadRemoteAuth readremoteauth = ServiceProvider.GetRequiredService<ReadRemoteAuth>();
            authorized = readremoteauth.CanReadRemoteBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanReadRemoteBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanReadRemoteString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanReadRemoteStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanCreateBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanCreateBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanCreateString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanCreateStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public async Task<Authorized> LocalCanCreateTaskBoolDep(int? p)
        {
            Authorized authorized;
            ReadRemoteAuthTask readremoteauthtask = ServiceProvider.GetRequiredService<ReadRemoteAuthTask>();
            authorized = await readremoteauthtask.CanReadRemoteBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanReadRemoteBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanReadRemoteStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanReadRemoteStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanCreateBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanCreateBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanCreateStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanCreateStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            ReadRemoteAuth readremoteauth = ServiceProvider.GetRequiredService<ReadRemoteAuth>();
            authorized = readremoteauth.CanReadRemoteBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanReadRemoteBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanReadRemoteString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanReadRemoteStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanCreateBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanCreateBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanCreateString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanCreateStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public async Task<Authorized> LocalCanFetchVoid(int? p)
        {
            Authorized authorized;
            ReadRemoteAuthTask readremoteauthtask = ServiceProvider.GetRequiredService<ReadRemoteAuthTask>();
            authorized = await readremoteauthtask.CanReadRemoteBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanReadRemoteBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanReadRemoteStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanReadRemoteStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanFetchBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanFetchBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanFetchStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanFetchStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            ReadRemoteAuth readremoteauth = ServiceProvider.GetRequiredService<ReadRemoteAuth>();
            authorized = readremoteauth.CanReadRemoteBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanReadRemoteBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanReadRemoteString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanReadRemoteStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanFetchBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanFetchBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanFetchString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanFetchStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public async Task<Authorized> LocalCanFetchBool(int? p)
        {
            Authorized authorized;
            ReadRemoteAuthTask readremoteauthtask = ServiceProvider.GetRequiredService<ReadRemoteAuthTask>();
            authorized = await readremoteauthtask.CanReadRemoteBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanReadRemoteBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanReadRemoteStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanReadRemoteStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanFetchBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanFetchBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanFetchStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanFetchStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            ReadRemoteAuth readremoteauth = ServiceProvider.GetRequiredService<ReadRemoteAuth>();
            authorized = readremoteauth.CanReadRemoteBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanReadRemoteBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanReadRemoteString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanReadRemoteStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanFetchBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanFetchBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanFetchString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanFetchStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public async Task<Authorized> LocalCanFetchTask(int? p)
        {
            Authorized authorized;
            ReadRemoteAuthTask readremoteauthtask = ServiceProvider.GetRequiredService<ReadRemoteAuthTask>();
            authorized = await readremoteauthtask.CanReadRemoteBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanReadRemoteBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanReadRemoteStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanReadRemoteStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanFetchBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanFetchBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanFetchStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanFetchStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            ReadRemoteAuth readremoteauth = ServiceProvider.GetRequiredService<ReadRemoteAuth>();
            authorized = readremoteauth.CanReadRemoteBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanReadRemoteBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanReadRemoteString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanReadRemoteStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanFetchBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanFetchBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanFetchString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanFetchStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public async Task<Authorized> LocalCanFetchTaskBool(int? p)
        {
            Authorized authorized;
            ReadRemoteAuthTask readremoteauthtask = ServiceProvider.GetRequiredService<ReadRemoteAuthTask>();
            authorized = await readremoteauthtask.CanReadRemoteBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanReadRemoteBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanReadRemoteStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanReadRemoteStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanFetchBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanFetchBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanFetchStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanFetchStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            ReadRemoteAuth readremoteauth = ServiceProvider.GetRequiredService<ReadRemoteAuth>();
            authorized = readremoteauth.CanReadRemoteBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanReadRemoteBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanReadRemoteString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanReadRemoteStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanFetchBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanFetchBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanFetchString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanFetchStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public async Task<Authorized> LocalCanFetchVoidDep(int? p)
        {
            Authorized authorized;
            ReadRemoteAuthTask readremoteauthtask = ServiceProvider.GetRequiredService<ReadRemoteAuthTask>();
            authorized = await readremoteauthtask.CanReadRemoteBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanReadRemoteBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanReadRemoteStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanReadRemoteStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanFetchBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanFetchBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanFetchStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanFetchStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            ReadRemoteAuth readremoteauth = ServiceProvider.GetRequiredService<ReadRemoteAuth>();
            authorized = readremoteauth.CanReadRemoteBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanReadRemoteBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanReadRemoteString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanReadRemoteStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanFetchBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanFetchBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanFetchString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanFetchStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public async Task<Authorized> LocalCanFetchBoolTrueDep(int? p)
        {
            Authorized authorized;
            ReadRemoteAuthTask readremoteauthtask = ServiceProvider.GetRequiredService<ReadRemoteAuthTask>();
            authorized = await readremoteauthtask.CanReadRemoteBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanReadRemoteBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanReadRemoteStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanReadRemoteStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanFetchBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanFetchBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanFetchStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanFetchStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            ReadRemoteAuth readremoteauth = ServiceProvider.GetRequiredService<ReadRemoteAuth>();
            authorized = readremoteauth.CanReadRemoteBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanReadRemoteBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanReadRemoteString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanReadRemoteStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanFetchBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanFetchBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanFetchString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanFetchStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public async Task<Authorized> LocalCanFetchBoolFalseDep(int? p)
        {
            Authorized authorized;
            ReadRemoteAuthTask readremoteauthtask = ServiceProvider.GetRequiredService<ReadRemoteAuthTask>();
            authorized = await readremoteauthtask.CanReadRemoteBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanReadRemoteBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanReadRemoteStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanReadRemoteStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanFetchBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanFetchBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanFetchStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanFetchStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            ReadRemoteAuth readremoteauth = ServiceProvider.GetRequiredService<ReadRemoteAuth>();
            authorized = readremoteauth.CanReadRemoteBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanReadRemoteBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanReadRemoteString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanReadRemoteStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanFetchBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanFetchBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanFetchString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanFetchStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public async Task<Authorized> LocalCanFetchTaskDep(int? p)
        {
            Authorized authorized;
            ReadRemoteAuthTask readremoteauthtask = ServiceProvider.GetRequiredService<ReadRemoteAuthTask>();
            authorized = await readremoteauthtask.CanReadRemoteBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanReadRemoteBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanReadRemoteStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanReadRemoteStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanFetchBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanFetchBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanFetchStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanFetchStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            ReadRemoteAuth readremoteauth = ServiceProvider.GetRequiredService<ReadRemoteAuth>();
            authorized = readremoteauth.CanReadRemoteBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanReadRemoteBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanReadRemoteString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanReadRemoteStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanFetchBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanFetchBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanFetchString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanFetchStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public async Task<Authorized> LocalCanFetchTaskBoolDep(int? p)
        {
            Authorized authorized;
            ReadRemoteAuthTask readremoteauthtask = ServiceProvider.GetRequiredService<ReadRemoteAuthTask>();
            authorized = await readremoteauthtask.CanReadRemoteBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanReadRemoteBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanReadRemoteStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanReadRemoteStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanFetchBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanFetchBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanFetchStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanFetchStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            ReadRemoteAuth readremoteauth = ServiceProvider.GetRequiredService<ReadRemoteAuth>();
            authorized = readremoteauth.CanReadRemoteBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanReadRemoteBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanReadRemoteString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanReadRemoteStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanFetchBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanFetchBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanFetchString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanFetchStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public async Task<Authorized> LocalCanFetchTaskBoolFalseDep(int? p)
        {
            Authorized authorized;
            ReadRemoteAuthTask readremoteauthtask = ServiceProvider.GetRequiredService<ReadRemoteAuthTask>();
            authorized = await readremoteauthtask.CanReadRemoteBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanReadRemoteBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanReadRemoteStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanReadRemoteStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanFetchBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanFetchBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanFetchStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanFetchStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            ReadRemoteAuth readremoteauth = ServiceProvider.GetRequiredService<ReadRemoteAuth>();
            authorized = readremoteauth.CanReadRemoteBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanReadRemoteBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanReadRemoteString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanReadRemoteStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanFetchBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanFetchBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanFetchString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanFetchStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public static void FactoryServiceRegistrar(IServiceCollection services, NeatooFactory remoteLocal)
        {
            services.AddScoped<ReadRemoteAuthTaskObjFactory>();
            services.AddScoped<IReadRemoteAuthTaskObjFactory, ReadRemoteAuthTaskObjFactory>();
            services.AddScoped<CreateVoidDelegate>(cc =>
            {
                var factory = cc.GetRequiredService<ReadRemoteAuthTaskObjFactory>();
                return (int? param) => factory.LocalCreateVoid(param);
            });
            services.AddScoped<CreateBoolDelegate>(cc =>
            {
                var factory = cc.GetRequiredService<ReadRemoteAuthTaskObjFactory>();
                return (int? param) => factory.LocalCreateBool(param);
            });
            services.AddScoped<CreateTaskDelegate>(cc =>
            {
                var factory = cc.GetRequiredService<ReadRemoteAuthTaskObjFactory>();
                return (int? param) => factory.LocalCreateTask(param);
            });
            services.AddScoped<CreateTaskBoolDelegate>(cc =>
            {
                var factory = cc.GetRequiredService<ReadRemoteAuthTaskObjFactory>();
                return (int? param) => factory.LocalCreateTaskBool(param);
            });
            services.AddScoped<CreateTaskBoolFalseDelegate>(cc =>
            {
                var factory = cc.GetRequiredService<ReadRemoteAuthTaskObjFactory>();
                return (int? param) => factory.LocalCreateTaskBoolFalse(param);
            });
            services.AddScoped<CreateVoidDepDelegate>(cc =>
            {
                var factory = cc.GetRequiredService<ReadRemoteAuthTaskObjFactory>();
                return (int? param) => factory.LocalCreateVoidDep(param);
            });
            services.AddScoped<CreateBoolTrueDepDelegate>(cc =>
            {
                var factory = cc.GetRequiredService<ReadRemoteAuthTaskObjFactory>();
                return (int? param) => factory.LocalCreateBoolTrueDep(param);
            });
            services.AddScoped<CreateBoolFalseDepDelegate>(cc =>
            {
                var factory = cc.GetRequiredService<ReadRemoteAuthTaskObjFactory>();
                return (int? param) => factory.LocalCreateBoolFalseDep(param);
            });
            services.AddScoped<CreateTaskDepDelegate>(cc =>
            {
                var factory = cc.GetRequiredService<ReadRemoteAuthTaskObjFactory>();
                return (int? param) => factory.LocalCreateTaskDep(param);
            });
            services.AddScoped<CreateTaskBoolDepDelegate>(cc =>
            {
                var factory = cc.GetRequiredService<ReadRemoteAuthTaskObjFactory>();
                return (int? param) => factory.LocalCreateTaskBoolDep(param);
            });
            services.AddScoped<FetchVoidDelegate>(cc =>
            {
                var factory = cc.GetRequiredService<ReadRemoteAuthTaskObjFactory>();
                return (int? param) => factory.LocalFetchVoid(param);
            });
            services.AddScoped<FetchBoolDelegate>(cc =>
            {
                var factory = cc.GetRequiredService<ReadRemoteAuthTaskObjFactory>();
                return (int? param) => factory.LocalFetchBool(param);
            });
            services.AddScoped<FetchTaskDelegate>(cc =>
            {
                var factory = cc.GetRequiredService<ReadRemoteAuthTaskObjFactory>();
                return (int? param) => factory.LocalFetchTask(param);
            });
            services.AddScoped<FetchTaskBoolDelegate>(cc =>
            {
                var factory = cc.GetRequiredService<ReadRemoteAuthTaskObjFactory>();
                return (int? param) => factory.LocalFetchTaskBool(param);
            });
            services.AddScoped<FetchVoidDepDelegate>(cc =>
            {
                var factory = cc.GetRequiredService<ReadRemoteAuthTaskObjFactory>();
                return (int? param) => factory.LocalFetchVoidDep(param);
            });
            services.AddScoped<FetchBoolTrueDepDelegate>(cc =>
            {
                var factory = cc.GetRequiredService<ReadRemoteAuthTaskObjFactory>();
                return (int? param) => factory.LocalFetchBoolTrueDep(param);
            });
            services.AddScoped<FetchBoolFalseDepDelegate>(cc =>
            {
                var factory = cc.GetRequiredService<ReadRemoteAuthTaskObjFactory>();
                return (int? param) => factory.LocalFetchBoolFalseDep(param);
            });
            services.AddScoped<FetchTaskDepDelegate>(cc =>
            {
                var factory = cc.GetRequiredService<ReadRemoteAuthTaskObjFactory>();
                return (int? param) => factory.LocalFetchTaskDep(param);
            });
            services.AddScoped<FetchTaskBoolDepDelegate>(cc =>
            {
                var factory = cc.GetRequiredService<ReadRemoteAuthTaskObjFactory>();
                return (int? param) => factory.LocalFetchTaskBoolDep(param);
            });
            services.AddScoped<FetchTaskBoolFalseDepDelegate>(cc =>
            {
                var factory = cc.GetRequiredService<ReadRemoteAuthTaskObjFactory>();
                return (int? param) => factory.LocalFetchTaskBoolFalseDep(param);
            });
            services.AddScoped<CanCreateVoidDelegate>(cc =>
            {
                var factory = cc.GetRequiredService<ReadRemoteAuthTaskObjFactory>();
                return (int? p) => factory.LocalCanCreateVoid(p);
            });
            services.AddScoped<CanCreateBoolDelegate>(cc =>
            {
                var factory = cc.GetRequiredService<ReadRemoteAuthTaskObjFactory>();
                return (int? p) => factory.LocalCanCreateBool(p);
            });
            services.AddScoped<CanCreateTaskDelegate>(cc =>
            {
                var factory = cc.GetRequiredService<ReadRemoteAuthTaskObjFactory>();
                return (int? p) => factory.LocalCanCreateTask(p);
            });
            services.AddScoped<CanCreateTaskBoolDelegate>(cc =>
            {
                var factory = cc.GetRequiredService<ReadRemoteAuthTaskObjFactory>();
                return (int? p) => factory.LocalCanCreateTaskBool(p);
            });
            services.AddScoped<CanCreateTaskBoolFalseDelegate>(cc =>
            {
                var factory = cc.GetRequiredService<ReadRemoteAuthTaskObjFactory>();
                return (int? p) => factory.LocalCanCreateTaskBoolFalse(p);
            });
            services.AddScoped<CanCreateVoidDepDelegate>(cc =>
            {
                var factory = cc.GetRequiredService<ReadRemoteAuthTaskObjFactory>();
                return (int? p) => factory.LocalCanCreateVoidDep(p);
            });
            services.AddScoped<CanCreateBoolTrueDepDelegate>(cc =>
            {
                var factory = cc.GetRequiredService<ReadRemoteAuthTaskObjFactory>();
                return (int? p) => factory.LocalCanCreateBoolTrueDep(p);
            });
            services.AddScoped<CanCreateBoolFalseDepDelegate>(cc =>
            {
                var factory = cc.GetRequiredService<ReadRemoteAuthTaskObjFactory>();
                return (int? p) => factory.LocalCanCreateBoolFalseDep(p);
            });
            services.AddScoped<CanCreateTaskDepDelegate>(cc =>
            {
                var factory = cc.GetRequiredService<ReadRemoteAuthTaskObjFactory>();
                return (int? p) => factory.LocalCanCreateTaskDep(p);
            });
            services.AddScoped<CanCreateTaskBoolDepDelegate>(cc =>
            {
                var factory = cc.GetRequiredService<ReadRemoteAuthTaskObjFactory>();
                return (int? p) => factory.LocalCanCreateTaskBoolDep(p);
            });
            services.AddScoped<CanFetchVoidDelegate>(cc =>
            {
                var factory = cc.GetRequiredService<ReadRemoteAuthTaskObjFactory>();
                return (int? p) => factory.LocalCanFetchVoid(p);
            });
            services.AddScoped<CanFetchBoolDelegate>(cc =>
            {
                var factory = cc.GetRequiredService<ReadRemoteAuthTaskObjFactory>();
                return (int? p) => factory.LocalCanFetchBool(p);
            });
            services.AddScoped<CanFetchTaskDelegate>(cc =>
            {
                var factory = cc.GetRequiredService<ReadRemoteAuthTaskObjFactory>();
                return (int? p) => factory.LocalCanFetchTask(p);
            });
            services.AddScoped<CanFetchTaskBoolDelegate>(cc =>
            {
                var factory = cc.GetRequiredService<ReadRemoteAuthTaskObjFactory>();
                return (int? p) => factory.LocalCanFetchTaskBool(p);
            });
            services.AddScoped<CanFetchVoidDepDelegate>(cc =>
            {
                var factory = cc.GetRequiredService<ReadRemoteAuthTaskObjFactory>();
                return (int? p) => factory.LocalCanFetchVoidDep(p);
            });
            services.AddScoped<CanFetchBoolTrueDepDelegate>(cc =>
            {
                var factory = cc.GetRequiredService<ReadRemoteAuthTaskObjFactory>();
                return (int? p) => factory.LocalCanFetchBoolTrueDep(p);
            });
            services.AddScoped<CanFetchBoolFalseDepDelegate>(cc =>
            {
                var factory = cc.GetRequiredService<ReadRemoteAuthTaskObjFactory>();
                return (int? p) => factory.LocalCanFetchBoolFalseDep(p);
            });
            services.AddScoped<CanFetchTaskDepDelegate>(cc =>
            {
                var factory = cc.GetRequiredService<ReadRemoteAuthTaskObjFactory>();
                return (int? p) => factory.LocalCanFetchTaskDep(p);
            });
            services.AddScoped<CanFetchTaskBoolDepDelegate>(cc =>
            {
                var factory = cc.GetRequiredService<ReadRemoteAuthTaskObjFactory>();
                return (int? p) => factory.LocalCanFetchTaskBoolDep(p);
            });
            services.AddScoped<CanFetchTaskBoolFalseDepDelegate>(cc =>
            {
                var factory = cc.GetRequiredService<ReadRemoteAuthTaskObjFactory>();
                return (int? p) => factory.LocalCanFetchTaskBoolFalseDep(p);
            });
            services.AddTransient<ReadRemoteAuthTaskObj>();
        }
    }
}