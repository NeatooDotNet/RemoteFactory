#nullable enable
using Neatoo.RemoteFactory;
using Neatoo.RemoteFactory.Internal;
using Microsoft.Extensions.DependencyInjection;
using static Neatoo.RemoteFactory.FactoryGeneratorTests.Factory.ReadRemoteAuthTests;
using Neatoo.RemoteFactory.FactoryGeneratorTests;
using Neatoo.RemoteFactory.FactoryGeneratorTests.Shared;
using Xunit;

/*
							READONLY - DO NOT EDIT!!!!
							Generated by Neatoo.RemoteFactory
*/
namespace Neatoo.RemoteFactory.FactoryGeneratorTests.Factory
{
    public interface IReadRemoteAuthTaskObjFactory
    {
        Task<ReadRemoteAuthTaskObj?> CreateVoid(int? param);
        Task<ReadRemoteAuthTaskObj?> CreateBool(int? param);
        Task<ReadRemoteAuthTaskObj?> CreateTask(int? param);
        Task<ReadRemoteAuthTaskObj?> CreateTaskBool(int? param);
        Task<ReadRemoteAuthTaskObj?> CreateTaskBoolFalse(int? param);
        Task<ReadRemoteAuthTaskObj?> CreateVoidDep(int? param);
        Task<ReadRemoteAuthTaskObj?> CreateBoolTrueDep(int? param);
        Task<ReadRemoteAuthTaskObj?> CreateBoolFalseDep(int? param);
        Task<ReadRemoteAuthTaskObj?> CreateTaskDep(int? param);
        Task<ReadRemoteAuthTaskObj?> CreateTaskBoolDep(int? param);
        Task<ReadRemoteAuthTaskObj?> FetchVoid(int? param);
        Task<ReadRemoteAuthTaskObj?> FetchBool(int? param);
        Task<ReadRemoteAuthTaskObj?> FetchTask(int? param);
        Task<ReadRemoteAuthTaskObj?> FetchTaskBool(int? param);
        Task<ReadRemoteAuthTaskObj?> FetchVoidDep(int? param);
        Task<ReadRemoteAuthTaskObj?> FetchBoolTrueDep(int? param);
        Task<ReadRemoteAuthTaskObj?> FetchBoolFalseDep(int? param);
        Task<ReadRemoteAuthTaskObj?> FetchTaskDep(int? param);
        Task<ReadRemoteAuthTaskObj?> FetchTaskBoolDep(int? param);
        Task<ReadRemoteAuthTaskObj?> FetchTaskBoolFalseDep(int? param);
        Task<Authorized> CanCreateVoid(int? p);
        Task<Authorized> CanCreateBool(int? p);
        Task<Authorized> CanCreateTask(int? p);
        Task<Authorized> CanCreateTaskBool(int? p);
        Task<Authorized> CanCreateTaskBoolFalse(int? p);
        Task<Authorized> CanCreateVoidDep(int? p);
        Task<Authorized> CanCreateBoolTrueDep(int? p);
        Task<Authorized> CanCreateBoolFalseDep(int? p);
        Task<Authorized> CanCreateTaskDep(int? p);
        Task<Authorized> CanCreateTaskBoolDep(int? p);
        Task<Authorized> CanFetchVoid(int? p);
        Task<Authorized> CanFetchBool(int? p);
        Task<Authorized> CanFetchTask(int? p);
        Task<Authorized> CanFetchTaskBool(int? p);
        Task<Authorized> CanFetchVoidDep(int? p);
        Task<Authorized> CanFetchBoolTrueDep(int? p);
        Task<Authorized> CanFetchBoolFalseDep(int? p);
        Task<Authorized> CanFetchTaskDep(int? p);
        Task<Authorized> CanFetchTaskBoolDep(int? p);
        Task<Authorized> CanFetchTaskBoolFalseDep(int? p);
    }

    internal class ReadRemoteAuthTaskObjFactory : FactoryBase<ReadRemoteAuthTaskObj>, IReadRemoteAuthTaskObjFactory
    {
        private readonly IServiceProvider ServiceProvider;
        private readonly IMakeRemoteDelegateRequest? MakeRemoteDelegateRequest;
        // Delegates
        public delegate Task<Authorized<ReadRemoteAuthTaskObj>> CreateVoidDelegate(int? param);
        public delegate Task<Authorized<ReadRemoteAuthTaskObj>> CreateBoolDelegate(int? param);
        public delegate Task<Authorized<ReadRemoteAuthTaskObj>> CreateTaskDelegate(int? param);
        public delegate Task<Authorized<ReadRemoteAuthTaskObj>> CreateTaskBoolDelegate(int? param);
        public delegate Task<Authorized<ReadRemoteAuthTaskObj>> CreateTaskBoolFalseDelegate(int? param);
        public delegate Task<Authorized<ReadRemoteAuthTaskObj>> CreateVoidDepDelegate(int? param);
        public delegate Task<Authorized<ReadRemoteAuthTaskObj>> CreateBoolTrueDepDelegate(int? param);
        public delegate Task<Authorized<ReadRemoteAuthTaskObj>> CreateBoolFalseDepDelegate(int? param);
        public delegate Task<Authorized<ReadRemoteAuthTaskObj>> CreateTaskDepDelegate(int? param);
        public delegate Task<Authorized<ReadRemoteAuthTaskObj>> CreateTaskBoolDepDelegate(int? param);
        public delegate Task<Authorized<ReadRemoteAuthTaskObj>> FetchVoidDelegate(int? param);
        public delegate Task<Authorized<ReadRemoteAuthTaskObj>> FetchBoolDelegate(int? param);
        public delegate Task<Authorized<ReadRemoteAuthTaskObj>> FetchTaskDelegate(int? param);
        public delegate Task<Authorized<ReadRemoteAuthTaskObj>> FetchTaskBoolDelegate(int? param);
        public delegate Task<Authorized<ReadRemoteAuthTaskObj>> FetchVoidDepDelegate(int? param);
        public delegate Task<Authorized<ReadRemoteAuthTaskObj>> FetchBoolTrueDepDelegate(int? param);
        public delegate Task<Authorized<ReadRemoteAuthTaskObj>> FetchBoolFalseDepDelegate(int? param);
        public delegate Task<Authorized<ReadRemoteAuthTaskObj>> FetchTaskDepDelegate(int? param);
        public delegate Task<Authorized<ReadRemoteAuthTaskObj>> FetchTaskBoolDepDelegate(int? param);
        public delegate Task<Authorized<ReadRemoteAuthTaskObj>> FetchTaskBoolFalseDepDelegate(int? param);
        public delegate Task<Authorized> CanCreateVoidDelegate(int? p);
        public delegate Task<Authorized> CanCreateBoolDelegate(int? p);
        public delegate Task<Authorized> CanCreateTaskDelegate(int? p);
        public delegate Task<Authorized> CanCreateTaskBoolDelegate(int? p);
        public delegate Task<Authorized> CanCreateTaskBoolFalseDelegate(int? p);
        public delegate Task<Authorized> CanCreateVoidDepDelegate(int? p);
        public delegate Task<Authorized> CanCreateBoolTrueDepDelegate(int? p);
        public delegate Task<Authorized> CanCreateBoolFalseDepDelegate(int? p);
        public delegate Task<Authorized> CanCreateTaskDepDelegate(int? p);
        public delegate Task<Authorized> CanCreateTaskBoolDepDelegate(int? p);
        public delegate Task<Authorized> CanFetchVoidDelegate(int? p);
        public delegate Task<Authorized> CanFetchBoolDelegate(int? p);
        public delegate Task<Authorized> CanFetchTaskDelegate(int? p);
        public delegate Task<Authorized> CanFetchTaskBoolDelegate(int? p);
        public delegate Task<Authorized> CanFetchVoidDepDelegate(int? p);
        public delegate Task<Authorized> CanFetchBoolTrueDepDelegate(int? p);
        public delegate Task<Authorized> CanFetchBoolFalseDepDelegate(int? p);
        public delegate Task<Authorized> CanFetchTaskDepDelegate(int? p);
        public delegate Task<Authorized> CanFetchTaskBoolDepDelegate(int? p);
        public delegate Task<Authorized> CanFetchTaskBoolFalseDepDelegate(int? p);
        // Delegate Properties to provide Local or Remote fork in execution
        public CreateVoidDelegate CreateVoidProperty { get; }
        public CreateBoolDelegate CreateBoolProperty { get; }
        public CreateTaskDelegate CreateTaskProperty { get; }
        public CreateTaskBoolDelegate CreateTaskBoolProperty { get; }
        public CreateTaskBoolFalseDelegate CreateTaskBoolFalseProperty { get; }
        public CreateVoidDepDelegate CreateVoidDepProperty { get; }
        public CreateBoolTrueDepDelegate CreateBoolTrueDepProperty { get; }
        public CreateBoolFalseDepDelegate CreateBoolFalseDepProperty { get; }
        public CreateTaskDepDelegate CreateTaskDepProperty { get; }
        public CreateTaskBoolDepDelegate CreateTaskBoolDepProperty { get; }
        public FetchVoidDelegate FetchVoidProperty { get; }
        public FetchBoolDelegate FetchBoolProperty { get; }
        public FetchTaskDelegate FetchTaskProperty { get; }
        public FetchTaskBoolDelegate FetchTaskBoolProperty { get; }
        public FetchVoidDepDelegate FetchVoidDepProperty { get; }
        public FetchBoolTrueDepDelegate FetchBoolTrueDepProperty { get; }
        public FetchBoolFalseDepDelegate FetchBoolFalseDepProperty { get; }
        public FetchTaskDepDelegate FetchTaskDepProperty { get; }
        public FetchTaskBoolDepDelegate FetchTaskBoolDepProperty { get; }
        public FetchTaskBoolFalseDepDelegate FetchTaskBoolFalseDepProperty { get; }
        public CanCreateVoidDelegate CanCreateVoidProperty { get; }
        public CanCreateBoolDelegate CanCreateBoolProperty { get; }
        public CanCreateTaskDelegate CanCreateTaskProperty { get; }
        public CanCreateTaskBoolDelegate CanCreateTaskBoolProperty { get; }
        public CanCreateTaskBoolFalseDelegate CanCreateTaskBoolFalseProperty { get; }
        public CanCreateVoidDepDelegate CanCreateVoidDepProperty { get; }
        public CanCreateBoolTrueDepDelegate CanCreateBoolTrueDepProperty { get; }
        public CanCreateBoolFalseDepDelegate CanCreateBoolFalseDepProperty { get; }
        public CanCreateTaskDepDelegate CanCreateTaskDepProperty { get; }
        public CanCreateTaskBoolDepDelegate CanCreateTaskBoolDepProperty { get; }
        public CanFetchVoidDelegate CanFetchVoidProperty { get; }
        public CanFetchBoolDelegate CanFetchBoolProperty { get; }
        public CanFetchTaskDelegate CanFetchTaskProperty { get; }
        public CanFetchTaskBoolDelegate CanFetchTaskBoolProperty { get; }
        public CanFetchVoidDepDelegate CanFetchVoidDepProperty { get; }
        public CanFetchBoolTrueDepDelegate CanFetchBoolTrueDepProperty { get; }
        public CanFetchBoolFalseDepDelegate CanFetchBoolFalseDepProperty { get; }
        public CanFetchTaskDepDelegate CanFetchTaskDepProperty { get; }
        public CanFetchTaskBoolDepDelegate CanFetchTaskBoolDepProperty { get; }
        public CanFetchTaskBoolFalseDepDelegate CanFetchTaskBoolFalseDepProperty { get; }

        public ReadRemoteAuthTaskObjFactory(IServiceProvider serviceProvider, IFactoryCore<ReadRemoteAuthTaskObj> factoryCore) : base(factoryCore)
        {
            this.ServiceProvider = serviceProvider;
            CreateVoidProperty = LocalCreateVoid;
            CreateBoolProperty = LocalCreateBool;
            CreateTaskProperty = LocalCreateTask;
            CreateTaskBoolProperty = LocalCreateTaskBool;
            CreateTaskBoolFalseProperty = LocalCreateTaskBoolFalse;
            CreateVoidDepProperty = LocalCreateVoidDep;
            CreateBoolTrueDepProperty = LocalCreateBoolTrueDep;
            CreateBoolFalseDepProperty = LocalCreateBoolFalseDep;
            CreateTaskDepProperty = LocalCreateTaskDep;
            CreateTaskBoolDepProperty = LocalCreateTaskBoolDep;
            FetchVoidProperty = LocalFetchVoid;
            FetchBoolProperty = LocalFetchBool;
            FetchTaskProperty = LocalFetchTask;
            FetchTaskBoolProperty = LocalFetchTaskBool;
            FetchVoidDepProperty = LocalFetchVoidDep;
            FetchBoolTrueDepProperty = LocalFetchBoolTrueDep;
            FetchBoolFalseDepProperty = LocalFetchBoolFalseDep;
            FetchTaskDepProperty = LocalFetchTaskDep;
            FetchTaskBoolDepProperty = LocalFetchTaskBoolDep;
            FetchTaskBoolFalseDepProperty = LocalFetchTaskBoolFalseDep;
            CanCreateVoidProperty = LocalCanCreateVoid;
            CanCreateBoolProperty = LocalCanCreateBool;
            CanCreateTaskProperty = LocalCanCreateTask;
            CanCreateTaskBoolProperty = LocalCanCreateTaskBool;
            CanCreateTaskBoolFalseProperty = LocalCanCreateTaskBoolFalse;
            CanCreateVoidDepProperty = LocalCanCreateVoidDep;
            CanCreateBoolTrueDepProperty = LocalCanCreateBoolTrueDep;
            CanCreateBoolFalseDepProperty = LocalCanCreateBoolFalseDep;
            CanCreateTaskDepProperty = LocalCanCreateTaskDep;
            CanCreateTaskBoolDepProperty = LocalCanCreateTaskBoolDep;
            CanFetchVoidProperty = LocalCanFetchVoid;
            CanFetchBoolProperty = LocalCanFetchBool;
            CanFetchTaskProperty = LocalCanFetchTask;
            CanFetchTaskBoolProperty = LocalCanFetchTaskBool;
            CanFetchVoidDepProperty = LocalCanFetchVoidDep;
            CanFetchBoolTrueDepProperty = LocalCanFetchBoolTrueDep;
            CanFetchBoolFalseDepProperty = LocalCanFetchBoolFalseDep;
            CanFetchTaskDepProperty = LocalCanFetchTaskDep;
            CanFetchTaskBoolDepProperty = LocalCanFetchTaskBoolDep;
            CanFetchTaskBoolFalseDepProperty = LocalCanFetchTaskBoolFalseDep;
        }

        public ReadRemoteAuthTaskObjFactory(IServiceProvider serviceProvider, IMakeRemoteDelegateRequest remoteMethodDelegate, IFactoryCore<ReadRemoteAuthTaskObj> factoryCore) : base(factoryCore)
        {
            this.ServiceProvider = serviceProvider;
            this.MakeRemoteDelegateRequest = remoteMethodDelegate;
            CreateVoidProperty = RemoteCreateVoid;
            CreateBoolProperty = RemoteCreateBool;
            CreateTaskProperty = RemoteCreateTask;
            CreateTaskBoolProperty = RemoteCreateTaskBool;
            CreateTaskBoolFalseProperty = RemoteCreateTaskBoolFalse;
            CreateVoidDepProperty = RemoteCreateVoidDep;
            CreateBoolTrueDepProperty = RemoteCreateBoolTrueDep;
            CreateBoolFalseDepProperty = RemoteCreateBoolFalseDep;
            CreateTaskDepProperty = RemoteCreateTaskDep;
            CreateTaskBoolDepProperty = RemoteCreateTaskBoolDep;
            FetchVoidProperty = RemoteFetchVoid;
            FetchBoolProperty = RemoteFetchBool;
            FetchTaskProperty = RemoteFetchTask;
            FetchTaskBoolProperty = RemoteFetchTaskBool;
            FetchVoidDepProperty = RemoteFetchVoidDep;
            FetchBoolTrueDepProperty = RemoteFetchBoolTrueDep;
            FetchBoolFalseDepProperty = RemoteFetchBoolFalseDep;
            FetchTaskDepProperty = RemoteFetchTaskDep;
            FetchTaskBoolDepProperty = RemoteFetchTaskBoolDep;
            FetchTaskBoolFalseDepProperty = RemoteFetchTaskBoolFalseDep;
            CanCreateVoidProperty = RemoteCanCreateVoid;
            CanCreateBoolProperty = RemoteCanCreateBool;
            CanCreateTaskProperty = RemoteCanCreateTask;
            CanCreateTaskBoolProperty = RemoteCanCreateTaskBool;
            CanCreateTaskBoolFalseProperty = RemoteCanCreateTaskBoolFalse;
            CanCreateVoidDepProperty = RemoteCanCreateVoidDep;
            CanCreateBoolTrueDepProperty = RemoteCanCreateBoolTrueDep;
            CanCreateBoolFalseDepProperty = RemoteCanCreateBoolFalseDep;
            CanCreateTaskDepProperty = RemoteCanCreateTaskDep;
            CanCreateTaskBoolDepProperty = RemoteCanCreateTaskBoolDep;
            CanFetchVoidProperty = RemoteCanFetchVoid;
            CanFetchBoolProperty = RemoteCanFetchBool;
            CanFetchTaskProperty = RemoteCanFetchTask;
            CanFetchTaskBoolProperty = RemoteCanFetchTaskBool;
            CanFetchVoidDepProperty = RemoteCanFetchVoidDep;
            CanFetchBoolTrueDepProperty = RemoteCanFetchBoolTrueDep;
            CanFetchBoolFalseDepProperty = RemoteCanFetchBoolFalseDep;
            CanFetchTaskDepProperty = RemoteCanFetchTaskDep;
            CanFetchTaskBoolDepProperty = RemoteCanFetchTaskBoolDep;
            CanFetchTaskBoolFalseDepProperty = RemoteCanFetchTaskBoolFalseDep;
        }

        public virtual async Task<ReadRemoteAuthTaskObj?> CreateVoid(int? param)
        {
            return (await CreateVoidProperty(param)).Result;
        }

        public virtual async Task<Authorized<ReadRemoteAuthTaskObj>> RemoteCreateVoid(int? param)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegate<Authorized<ReadRemoteAuthTaskObj>>(typeof(CreateVoidDelegate), [param]))!;
        }

        public async Task<Authorized<ReadRemoteAuthTaskObj>> LocalCreateVoid(int? param)
        {
            Authorized authorized;
            ReadRemoteAuthTask readremoteauthtask = ServiceProvider.GetRequiredService<ReadRemoteAuthTask>();
            authorized = await readremoteauthtask.CanReadRemoteBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanReadRemoteBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanReadRemoteStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanReadRemoteStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanCreateBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanCreateBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanCreateStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanCreateStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            ReadRemoteAuth readremoteauth = ServiceProvider.GetRequiredService<ReadRemoteAuth>();
            authorized = readremoteauth.CanReadRemoteBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanReadRemoteBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanReadRemoteString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanReadRemoteStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanCreateBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanCreateBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanCreateString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanCreateStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<ReadRemoteAuthTaskObj>();
            return new Authorized<ReadRemoteAuthTaskObj>(DoFactoryMethodCall(target, FactoryOperation.Create, () => target.CreateVoid(param)));
        }

        public virtual async Task<ReadRemoteAuthTaskObj?> CreateBool(int? param)
        {
            return (await CreateBoolProperty(param)).Result;
        }

        public virtual async Task<Authorized<ReadRemoteAuthTaskObj>> RemoteCreateBool(int? param)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegate<Authorized<ReadRemoteAuthTaskObj>>(typeof(CreateBoolDelegate), [param]))!;
        }

        public async Task<Authorized<ReadRemoteAuthTaskObj>> LocalCreateBool(int? param)
        {
            Authorized authorized;
            ReadRemoteAuthTask readremoteauthtask = ServiceProvider.GetRequiredService<ReadRemoteAuthTask>();
            authorized = await readremoteauthtask.CanReadRemoteBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanReadRemoteBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanReadRemoteStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanReadRemoteStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanCreateBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanCreateBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanCreateStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanCreateStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            ReadRemoteAuth readremoteauth = ServiceProvider.GetRequiredService<ReadRemoteAuth>();
            authorized = readremoteauth.CanReadRemoteBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanReadRemoteBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanReadRemoteString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanReadRemoteStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanCreateBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanCreateBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanCreateString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanCreateStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<ReadRemoteAuthTaskObj>();
            return new Authorized<ReadRemoteAuthTaskObj>(DoFactoryMethodCallBool(target, FactoryOperation.Create, () => target.CreateBool(param)));
        }

        public virtual async Task<ReadRemoteAuthTaskObj?> CreateTask(int? param)
        {
            return (await CreateTaskProperty(param)).Result;
        }

        public virtual async Task<Authorized<ReadRemoteAuthTaskObj>> RemoteCreateTask(int? param)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegate<Authorized<ReadRemoteAuthTaskObj>>(typeof(CreateTaskDelegate), [param]))!;
        }

        public async Task<Authorized<ReadRemoteAuthTaskObj>> LocalCreateTask(int? param)
        {
            Authorized authorized;
            ReadRemoteAuthTask readremoteauthtask = ServiceProvider.GetRequiredService<ReadRemoteAuthTask>();
            authorized = await readremoteauthtask.CanReadRemoteBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanReadRemoteBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanReadRemoteStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanReadRemoteStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanCreateBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanCreateBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanCreateStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanCreateStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            ReadRemoteAuth readremoteauth = ServiceProvider.GetRequiredService<ReadRemoteAuth>();
            authorized = readremoteauth.CanReadRemoteBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanReadRemoteBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanReadRemoteString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanReadRemoteStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanCreateBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanCreateBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanCreateString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanCreateStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<ReadRemoteAuthTaskObj>();
            return new Authorized<ReadRemoteAuthTaskObj>(await DoFactoryMethodCallAsync(target, FactoryOperation.Create, () => target.CreateTask(param)));
        }

        public virtual async Task<ReadRemoteAuthTaskObj?> CreateTaskBool(int? param)
        {
            return (await CreateTaskBoolProperty(param)).Result;
        }

        public virtual async Task<Authorized<ReadRemoteAuthTaskObj>> RemoteCreateTaskBool(int? param)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegate<Authorized<ReadRemoteAuthTaskObj>>(typeof(CreateTaskBoolDelegate), [param]))!;
        }

        public async Task<Authorized<ReadRemoteAuthTaskObj>> LocalCreateTaskBool(int? param)
        {
            Authorized authorized;
            ReadRemoteAuthTask readremoteauthtask = ServiceProvider.GetRequiredService<ReadRemoteAuthTask>();
            authorized = await readremoteauthtask.CanReadRemoteBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanReadRemoteBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanReadRemoteStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanReadRemoteStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanCreateBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanCreateBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanCreateStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanCreateStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            ReadRemoteAuth readremoteauth = ServiceProvider.GetRequiredService<ReadRemoteAuth>();
            authorized = readremoteauth.CanReadRemoteBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanReadRemoteBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanReadRemoteString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanReadRemoteStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanCreateBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanCreateBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanCreateString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanCreateStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<ReadRemoteAuthTaskObj>();
            return new Authorized<ReadRemoteAuthTaskObj>(await DoFactoryMethodCallBoolAsync(target, FactoryOperation.Create, () => target.CreateTaskBool(param)));
        }

        public virtual async Task<ReadRemoteAuthTaskObj?> CreateTaskBoolFalse(int? param)
        {
            return (await CreateTaskBoolFalseProperty(param)).Result;
        }

        public virtual async Task<Authorized<ReadRemoteAuthTaskObj>> RemoteCreateTaskBoolFalse(int? param)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegate<Authorized<ReadRemoteAuthTaskObj>>(typeof(CreateTaskBoolFalseDelegate), [param]))!;
        }

        public async Task<Authorized<ReadRemoteAuthTaskObj>> LocalCreateTaskBoolFalse(int? param)
        {
            Authorized authorized;
            ReadRemoteAuthTask readremoteauthtask = ServiceProvider.GetRequiredService<ReadRemoteAuthTask>();
            authorized = await readremoteauthtask.CanReadRemoteBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanReadRemoteBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanReadRemoteStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanReadRemoteStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanCreateBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanCreateBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanCreateStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanCreateStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            ReadRemoteAuth readremoteauth = ServiceProvider.GetRequiredService<ReadRemoteAuth>();
            authorized = readremoteauth.CanReadRemoteBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanReadRemoteBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanReadRemoteString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanReadRemoteStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanCreateBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanCreateBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanCreateString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanCreateStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<ReadRemoteAuthTaskObj>();
            return new Authorized<ReadRemoteAuthTaskObj>(await DoFactoryMethodCallBoolAsync(target, FactoryOperation.Create, () => target.CreateTaskBoolFalse(param)));
        }

        public virtual async Task<ReadRemoteAuthTaskObj?> CreateVoidDep(int? param)
        {
            return (await CreateVoidDepProperty(param)).Result;
        }

        public virtual async Task<Authorized<ReadRemoteAuthTaskObj>> RemoteCreateVoidDep(int? param)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegate<Authorized<ReadRemoteAuthTaskObj>>(typeof(CreateVoidDepDelegate), [param]))!;
        }

        public async Task<Authorized<ReadRemoteAuthTaskObj>> LocalCreateVoidDep(int? param)
        {
            Authorized authorized;
            ReadRemoteAuthTask readremoteauthtask = ServiceProvider.GetRequiredService<ReadRemoteAuthTask>();
            authorized = await readremoteauthtask.CanReadRemoteBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanReadRemoteBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanReadRemoteStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanReadRemoteStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanCreateBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanCreateBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanCreateStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanCreateStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            ReadRemoteAuth readremoteauth = ServiceProvider.GetRequiredService<ReadRemoteAuth>();
            authorized = readremoteauth.CanReadRemoteBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanReadRemoteBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanReadRemoteString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanReadRemoteStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanCreateBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanCreateBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanCreateString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanCreateStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<ReadRemoteAuthTaskObj>();
            var service = ServiceProvider.GetRequiredService<IService>();
            return new Authorized<ReadRemoteAuthTaskObj>(DoFactoryMethodCall(target, FactoryOperation.Create, () => target.CreateVoidDep(param, service)));
        }

        public virtual async Task<ReadRemoteAuthTaskObj?> CreateBoolTrueDep(int? param)
        {
            return (await CreateBoolTrueDepProperty(param)).Result;
        }

        public virtual async Task<Authorized<ReadRemoteAuthTaskObj>> RemoteCreateBoolTrueDep(int? param)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegate<Authorized<ReadRemoteAuthTaskObj>>(typeof(CreateBoolTrueDepDelegate), [param]))!;
        }

        public async Task<Authorized<ReadRemoteAuthTaskObj>> LocalCreateBoolTrueDep(int? param)
        {
            Authorized authorized;
            ReadRemoteAuthTask readremoteauthtask = ServiceProvider.GetRequiredService<ReadRemoteAuthTask>();
            authorized = await readremoteauthtask.CanReadRemoteBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanReadRemoteBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanReadRemoteStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanReadRemoteStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanCreateBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanCreateBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanCreateStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanCreateStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            ReadRemoteAuth readremoteauth = ServiceProvider.GetRequiredService<ReadRemoteAuth>();
            authorized = readremoteauth.CanReadRemoteBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanReadRemoteBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanReadRemoteString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanReadRemoteStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanCreateBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanCreateBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanCreateString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanCreateStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<ReadRemoteAuthTaskObj>();
            var service = ServiceProvider.GetRequiredService<IService>();
            return new Authorized<ReadRemoteAuthTaskObj>(DoFactoryMethodCallBool(target, FactoryOperation.Create, () => target.CreateBoolTrueDep(param, service)));
        }

        public virtual async Task<ReadRemoteAuthTaskObj?> CreateBoolFalseDep(int? param)
        {
            return (await CreateBoolFalseDepProperty(param)).Result;
        }

        public virtual async Task<Authorized<ReadRemoteAuthTaskObj>> RemoteCreateBoolFalseDep(int? param)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegate<Authorized<ReadRemoteAuthTaskObj>>(typeof(CreateBoolFalseDepDelegate), [param]))!;
        }

        public async Task<Authorized<ReadRemoteAuthTaskObj>> LocalCreateBoolFalseDep(int? param)
        {
            Authorized authorized;
            ReadRemoteAuthTask readremoteauthtask = ServiceProvider.GetRequiredService<ReadRemoteAuthTask>();
            authorized = await readremoteauthtask.CanReadRemoteBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanReadRemoteBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanReadRemoteStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanReadRemoteStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanCreateBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanCreateBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanCreateStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanCreateStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            ReadRemoteAuth readremoteauth = ServiceProvider.GetRequiredService<ReadRemoteAuth>();
            authorized = readremoteauth.CanReadRemoteBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanReadRemoteBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanReadRemoteString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanReadRemoteStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanCreateBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanCreateBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanCreateString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanCreateStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<ReadRemoteAuthTaskObj>();
            var service = ServiceProvider.GetRequiredService<IService>();
            return new Authorized<ReadRemoteAuthTaskObj>(DoFactoryMethodCallBool(target, FactoryOperation.Create, () => target.CreateBoolFalseDep(param, service)));
        }

        public virtual async Task<ReadRemoteAuthTaskObj?> CreateTaskDep(int? param)
        {
            return (await CreateTaskDepProperty(param)).Result;
        }

        public virtual async Task<Authorized<ReadRemoteAuthTaskObj>> RemoteCreateTaskDep(int? param)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegate<Authorized<ReadRemoteAuthTaskObj>>(typeof(CreateTaskDepDelegate), [param]))!;
        }

        public async Task<Authorized<ReadRemoteAuthTaskObj>> LocalCreateTaskDep(int? param)
        {
            Authorized authorized;
            ReadRemoteAuthTask readremoteauthtask = ServiceProvider.GetRequiredService<ReadRemoteAuthTask>();
            authorized = await readremoteauthtask.CanReadRemoteBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanReadRemoteBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanReadRemoteStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanReadRemoteStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanCreateBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanCreateBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanCreateStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanCreateStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            ReadRemoteAuth readremoteauth = ServiceProvider.GetRequiredService<ReadRemoteAuth>();
            authorized = readremoteauth.CanReadRemoteBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanReadRemoteBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanReadRemoteString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanReadRemoteStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanCreateBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanCreateBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanCreateString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanCreateStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<ReadRemoteAuthTaskObj>();
            var service = ServiceProvider.GetRequiredService<IService>();
            return new Authorized<ReadRemoteAuthTaskObj>(await DoFactoryMethodCallAsync(target, FactoryOperation.Create, () => target.CreateTaskDep(param, service)));
        }

        public virtual async Task<ReadRemoteAuthTaskObj?> CreateTaskBoolDep(int? param)
        {
            return (await CreateTaskBoolDepProperty(param)).Result;
        }

        public virtual async Task<Authorized<ReadRemoteAuthTaskObj>> RemoteCreateTaskBoolDep(int? param)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegate<Authorized<ReadRemoteAuthTaskObj>>(typeof(CreateTaskBoolDepDelegate), [param]))!;
        }

        public async Task<Authorized<ReadRemoteAuthTaskObj>> LocalCreateTaskBoolDep(int? param)
        {
            Authorized authorized;
            ReadRemoteAuthTask readremoteauthtask = ServiceProvider.GetRequiredService<ReadRemoteAuthTask>();
            authorized = await readremoteauthtask.CanReadRemoteBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanReadRemoteBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanReadRemoteStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanReadRemoteStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanCreateBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanCreateBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanCreateStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanCreateStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            ReadRemoteAuth readremoteauth = ServiceProvider.GetRequiredService<ReadRemoteAuth>();
            authorized = readremoteauth.CanReadRemoteBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanReadRemoteBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanReadRemoteString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanReadRemoteStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanCreateBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanCreateBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanCreateString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanCreateStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<ReadRemoteAuthTaskObj>();
            var service = ServiceProvider.GetRequiredService<IService>();
            return new Authorized<ReadRemoteAuthTaskObj>(await DoFactoryMethodCallBoolAsync(target, FactoryOperation.Create, () => target.CreateTaskBoolDep(param, service)));
        }

        public virtual async Task<ReadRemoteAuthTaskObj?> FetchVoid(int? param)
        {
            return (await FetchVoidProperty(param)).Result;
        }

        public virtual async Task<Authorized<ReadRemoteAuthTaskObj>> RemoteFetchVoid(int? param)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegate<Authorized<ReadRemoteAuthTaskObj>>(typeof(FetchVoidDelegate), [param]))!;
        }

        public async Task<Authorized<ReadRemoteAuthTaskObj>> LocalFetchVoid(int? param)
        {
            Authorized authorized;
            ReadRemoteAuthTask readremoteauthtask = ServiceProvider.GetRequiredService<ReadRemoteAuthTask>();
            authorized = await readremoteauthtask.CanReadRemoteBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanReadRemoteBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanReadRemoteStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanReadRemoteStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanFetchBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanFetchBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanFetchStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanFetchStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            ReadRemoteAuth readremoteauth = ServiceProvider.GetRequiredService<ReadRemoteAuth>();
            authorized = readremoteauth.CanReadRemoteBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanReadRemoteBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanReadRemoteString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanReadRemoteStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanFetchBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanFetchBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanFetchString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanFetchStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<ReadRemoteAuthTaskObj>();
            return new Authorized<ReadRemoteAuthTaskObj>(DoFactoryMethodCall(target, FactoryOperation.Fetch, () => target.FetchVoid(param)));
        }

        public virtual async Task<ReadRemoteAuthTaskObj?> FetchBool(int? param)
        {
            return (await FetchBoolProperty(param)).Result;
        }

        public virtual async Task<Authorized<ReadRemoteAuthTaskObj>> RemoteFetchBool(int? param)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegate<Authorized<ReadRemoteAuthTaskObj>>(typeof(FetchBoolDelegate), [param]))!;
        }

        public async Task<Authorized<ReadRemoteAuthTaskObj>> LocalFetchBool(int? param)
        {
            Authorized authorized;
            ReadRemoteAuthTask readremoteauthtask = ServiceProvider.GetRequiredService<ReadRemoteAuthTask>();
            authorized = await readremoteauthtask.CanReadRemoteBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanReadRemoteBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanReadRemoteStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanReadRemoteStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanFetchBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanFetchBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanFetchStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanFetchStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            ReadRemoteAuth readremoteauth = ServiceProvider.GetRequiredService<ReadRemoteAuth>();
            authorized = readremoteauth.CanReadRemoteBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanReadRemoteBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanReadRemoteString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanReadRemoteStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanFetchBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanFetchBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanFetchString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanFetchStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<ReadRemoteAuthTaskObj>();
            return new Authorized<ReadRemoteAuthTaskObj>(DoFactoryMethodCallBool(target, FactoryOperation.Fetch, () => target.FetchBool(param)));
        }

        public virtual async Task<ReadRemoteAuthTaskObj?> FetchTask(int? param)
        {
            return (await FetchTaskProperty(param)).Result;
        }

        public virtual async Task<Authorized<ReadRemoteAuthTaskObj>> RemoteFetchTask(int? param)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegate<Authorized<ReadRemoteAuthTaskObj>>(typeof(FetchTaskDelegate), [param]))!;
        }

        public async Task<Authorized<ReadRemoteAuthTaskObj>> LocalFetchTask(int? param)
        {
            Authorized authorized;
            ReadRemoteAuthTask readremoteauthtask = ServiceProvider.GetRequiredService<ReadRemoteAuthTask>();
            authorized = await readremoteauthtask.CanReadRemoteBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanReadRemoteBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanReadRemoteStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanReadRemoteStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanFetchBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanFetchBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanFetchStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanFetchStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            ReadRemoteAuth readremoteauth = ServiceProvider.GetRequiredService<ReadRemoteAuth>();
            authorized = readremoteauth.CanReadRemoteBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanReadRemoteBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanReadRemoteString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanReadRemoteStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanFetchBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanFetchBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanFetchString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanFetchStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<ReadRemoteAuthTaskObj>();
            return new Authorized<ReadRemoteAuthTaskObj>(await DoFactoryMethodCallAsync(target, FactoryOperation.Fetch, () => target.FetchTask(param)));
        }

        public virtual async Task<ReadRemoteAuthTaskObj?> FetchTaskBool(int? param)
        {
            return (await FetchTaskBoolProperty(param)).Result;
        }

        public virtual async Task<Authorized<ReadRemoteAuthTaskObj>> RemoteFetchTaskBool(int? param)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegate<Authorized<ReadRemoteAuthTaskObj>>(typeof(FetchTaskBoolDelegate), [param]))!;
        }

        public async Task<Authorized<ReadRemoteAuthTaskObj>> LocalFetchTaskBool(int? param)
        {
            Authorized authorized;
            ReadRemoteAuthTask readremoteauthtask = ServiceProvider.GetRequiredService<ReadRemoteAuthTask>();
            authorized = await readremoteauthtask.CanReadRemoteBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanReadRemoteBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanReadRemoteStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanReadRemoteStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanFetchBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanFetchBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanFetchStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanFetchStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            ReadRemoteAuth readremoteauth = ServiceProvider.GetRequiredService<ReadRemoteAuth>();
            authorized = readremoteauth.CanReadRemoteBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanReadRemoteBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanReadRemoteString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanReadRemoteStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanFetchBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanFetchBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanFetchString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanFetchStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<ReadRemoteAuthTaskObj>();
            return new Authorized<ReadRemoteAuthTaskObj>(await DoFactoryMethodCallBoolAsync(target, FactoryOperation.Fetch, () => target.FetchTaskBool(param)));
        }

        public virtual async Task<ReadRemoteAuthTaskObj?> FetchVoidDep(int? param)
        {
            return (await FetchVoidDepProperty(param)).Result;
        }

        public virtual async Task<Authorized<ReadRemoteAuthTaskObj>> RemoteFetchVoidDep(int? param)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegate<Authorized<ReadRemoteAuthTaskObj>>(typeof(FetchVoidDepDelegate), [param]))!;
        }

        public async Task<Authorized<ReadRemoteAuthTaskObj>> LocalFetchVoidDep(int? param)
        {
            Authorized authorized;
            ReadRemoteAuthTask readremoteauthtask = ServiceProvider.GetRequiredService<ReadRemoteAuthTask>();
            authorized = await readremoteauthtask.CanReadRemoteBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanReadRemoteBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanReadRemoteStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanReadRemoteStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanFetchBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanFetchBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanFetchStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanFetchStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            ReadRemoteAuth readremoteauth = ServiceProvider.GetRequiredService<ReadRemoteAuth>();
            authorized = readremoteauth.CanReadRemoteBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanReadRemoteBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanReadRemoteString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanReadRemoteStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanFetchBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanFetchBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanFetchString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanFetchStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<ReadRemoteAuthTaskObj>();
            var service = ServiceProvider.GetRequiredService<IService>();
            return new Authorized<ReadRemoteAuthTaskObj>(DoFactoryMethodCall(target, FactoryOperation.Fetch, () => target.FetchVoidDep(param, service)));
        }

        public virtual async Task<ReadRemoteAuthTaskObj?> FetchBoolTrueDep(int? param)
        {
            return (await FetchBoolTrueDepProperty(param)).Result;
        }

        public virtual async Task<Authorized<ReadRemoteAuthTaskObj>> RemoteFetchBoolTrueDep(int? param)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegate<Authorized<ReadRemoteAuthTaskObj>>(typeof(FetchBoolTrueDepDelegate), [param]))!;
        }

        public async Task<Authorized<ReadRemoteAuthTaskObj>> LocalFetchBoolTrueDep(int? param)
        {
            Authorized authorized;
            ReadRemoteAuthTask readremoteauthtask = ServiceProvider.GetRequiredService<ReadRemoteAuthTask>();
            authorized = await readremoteauthtask.CanReadRemoteBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanReadRemoteBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanReadRemoteStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanReadRemoteStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanFetchBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanFetchBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanFetchStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanFetchStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            ReadRemoteAuth readremoteauth = ServiceProvider.GetRequiredService<ReadRemoteAuth>();
            authorized = readremoteauth.CanReadRemoteBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanReadRemoteBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanReadRemoteString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanReadRemoteStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanFetchBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanFetchBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanFetchString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanFetchStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<ReadRemoteAuthTaskObj>();
            var service = ServiceProvider.GetRequiredService<IService>();
            return new Authorized<ReadRemoteAuthTaskObj>(DoFactoryMethodCallBool(target, FactoryOperation.Fetch, () => target.FetchBoolTrueDep(param, service)));
        }

        public virtual async Task<ReadRemoteAuthTaskObj?> FetchBoolFalseDep(int? param)
        {
            return (await FetchBoolFalseDepProperty(param)).Result;
        }

        public virtual async Task<Authorized<ReadRemoteAuthTaskObj>> RemoteFetchBoolFalseDep(int? param)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegate<Authorized<ReadRemoteAuthTaskObj>>(typeof(FetchBoolFalseDepDelegate), [param]))!;
        }

        public async Task<Authorized<ReadRemoteAuthTaskObj>> LocalFetchBoolFalseDep(int? param)
        {
            Authorized authorized;
            ReadRemoteAuthTask readremoteauthtask = ServiceProvider.GetRequiredService<ReadRemoteAuthTask>();
            authorized = await readremoteauthtask.CanReadRemoteBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanReadRemoteBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanReadRemoteStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanReadRemoteStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanFetchBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanFetchBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanFetchStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanFetchStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            ReadRemoteAuth readremoteauth = ServiceProvider.GetRequiredService<ReadRemoteAuth>();
            authorized = readremoteauth.CanReadRemoteBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanReadRemoteBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanReadRemoteString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanReadRemoteStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanFetchBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanFetchBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanFetchString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanFetchStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<ReadRemoteAuthTaskObj>();
            var service = ServiceProvider.GetRequiredService<IService>();
            return new Authorized<ReadRemoteAuthTaskObj>(DoFactoryMethodCallBool(target, FactoryOperation.Fetch, () => target.FetchBoolFalseDep(param, service)));
        }

        public virtual async Task<ReadRemoteAuthTaskObj?> FetchTaskDep(int? param)
        {
            return (await FetchTaskDepProperty(param)).Result;
        }

        public virtual async Task<Authorized<ReadRemoteAuthTaskObj>> RemoteFetchTaskDep(int? param)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegate<Authorized<ReadRemoteAuthTaskObj>>(typeof(FetchTaskDepDelegate), [param]))!;
        }

        public async Task<Authorized<ReadRemoteAuthTaskObj>> LocalFetchTaskDep(int? param)
        {
            Authorized authorized;
            ReadRemoteAuthTask readremoteauthtask = ServiceProvider.GetRequiredService<ReadRemoteAuthTask>();
            authorized = await readremoteauthtask.CanReadRemoteBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanReadRemoteBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanReadRemoteStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanReadRemoteStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanFetchBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanFetchBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanFetchStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanFetchStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            ReadRemoteAuth readremoteauth = ServiceProvider.GetRequiredService<ReadRemoteAuth>();
            authorized = readremoteauth.CanReadRemoteBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanReadRemoteBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanReadRemoteString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanReadRemoteStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanFetchBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanFetchBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanFetchString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanFetchStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<ReadRemoteAuthTaskObj>();
            var service = ServiceProvider.GetRequiredService<IService>();
            return new Authorized<ReadRemoteAuthTaskObj>(await DoFactoryMethodCallAsync(target, FactoryOperation.Fetch, () => target.FetchTaskDep(param, service)));
        }

        public virtual async Task<ReadRemoteAuthTaskObj?> FetchTaskBoolDep(int? param)
        {
            return (await FetchTaskBoolDepProperty(param)).Result;
        }

        public virtual async Task<Authorized<ReadRemoteAuthTaskObj>> RemoteFetchTaskBoolDep(int? param)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegate<Authorized<ReadRemoteAuthTaskObj>>(typeof(FetchTaskBoolDepDelegate), [param]))!;
        }

        public async Task<Authorized<ReadRemoteAuthTaskObj>> LocalFetchTaskBoolDep(int? param)
        {
            Authorized authorized;
            ReadRemoteAuthTask readremoteauthtask = ServiceProvider.GetRequiredService<ReadRemoteAuthTask>();
            authorized = await readremoteauthtask.CanReadRemoteBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanReadRemoteBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanReadRemoteStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanReadRemoteStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanFetchBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanFetchBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanFetchStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanFetchStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            ReadRemoteAuth readremoteauth = ServiceProvider.GetRequiredService<ReadRemoteAuth>();
            authorized = readremoteauth.CanReadRemoteBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanReadRemoteBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanReadRemoteString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanReadRemoteStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanFetchBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanFetchBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanFetchString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanFetchStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<ReadRemoteAuthTaskObj>();
            var service = ServiceProvider.GetRequiredService<IService>();
            return new Authorized<ReadRemoteAuthTaskObj>(await DoFactoryMethodCallBoolAsync(target, FactoryOperation.Fetch, () => target.FetchTaskBoolDep(param, service)));
        }

        public virtual async Task<ReadRemoteAuthTaskObj?> FetchTaskBoolFalseDep(int? param)
        {
            return (await FetchTaskBoolFalseDepProperty(param)).Result;
        }

        public virtual async Task<Authorized<ReadRemoteAuthTaskObj>> RemoteFetchTaskBoolFalseDep(int? param)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegate<Authorized<ReadRemoteAuthTaskObj>>(typeof(FetchTaskBoolFalseDepDelegate), [param]))!;
        }

        public async Task<Authorized<ReadRemoteAuthTaskObj>> LocalFetchTaskBoolFalseDep(int? param)
        {
            Authorized authorized;
            ReadRemoteAuthTask readremoteauthtask = ServiceProvider.GetRequiredService<ReadRemoteAuthTask>();
            authorized = await readremoteauthtask.CanReadRemoteBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanReadRemoteBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanReadRemoteStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanReadRemoteStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanFetchBoolTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanFetchBoolFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanFetchStringTask();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = await readremoteauthtask.CanFetchStringFalseTask(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            ReadRemoteAuth readremoteauth = ServiceProvider.GetRequiredService<ReadRemoteAuth>();
            authorized = readremoteauth.CanReadRemoteBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanReadRemoteBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanReadRemoteString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanReadRemoteStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanFetchBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanFetchBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanFetchString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            authorized = readremoteauth.CanFetchStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadRemoteAuthTaskObj>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<ReadRemoteAuthTaskObj>();
            var service = ServiceProvider.GetRequiredService<IService>();
            return new Authorized<ReadRemoteAuthTaskObj>(await DoFactoryMethodCallBoolAsync(target, FactoryOperation.Fetch, () => target.FetchTaskBoolFalseDep(param, service)));
        }

        public virtual Task<Authorized> CanCreateVoid(int? p)
        {
            return CanCreateVoidProperty(p);
        }

        public virtual async Task<Authorized> RemoteCanCreateVoid(int? p)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegate<Authorized>(typeof(CanCreateVoidDelegate), [p]))!;
        }

        public async Task<Authorized> LocalCanCreateVoid(int? p)
        {
            Authorized authorized;
            ReadRemoteAuthTask readremoteauthtask = ServiceProvider.GetRequiredService<ReadRemoteAuthTask>();
            authorized = await readremoteauthtask.CanReadRemoteBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanReadRemoteBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanReadRemoteStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanReadRemoteStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanCreateBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanCreateBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanCreateStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanCreateStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            ReadRemoteAuth readremoteauth = ServiceProvider.GetRequiredService<ReadRemoteAuth>();
            authorized = readremoteauth.CanReadRemoteBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanReadRemoteBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanReadRemoteString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanReadRemoteStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanCreateBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanCreateBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanCreateString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanCreateStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanCreateBool(int? p)
        {
            return CanCreateBoolProperty(p);
        }

        public virtual async Task<Authorized> RemoteCanCreateBool(int? p)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegate<Authorized>(typeof(CanCreateBoolDelegate), [p]))!;
        }

        public async Task<Authorized> LocalCanCreateBool(int? p)
        {
            Authorized authorized;
            ReadRemoteAuthTask readremoteauthtask = ServiceProvider.GetRequiredService<ReadRemoteAuthTask>();
            authorized = await readremoteauthtask.CanReadRemoteBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanReadRemoteBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanReadRemoteStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanReadRemoteStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanCreateBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanCreateBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanCreateStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanCreateStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            ReadRemoteAuth readremoteauth = ServiceProvider.GetRequiredService<ReadRemoteAuth>();
            authorized = readremoteauth.CanReadRemoteBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanReadRemoteBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanReadRemoteString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanReadRemoteStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanCreateBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanCreateBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanCreateString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanCreateStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanCreateTask(int? p)
        {
            return CanCreateTaskProperty(p);
        }

        public virtual async Task<Authorized> RemoteCanCreateTask(int? p)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegate<Authorized>(typeof(CanCreateTaskDelegate), [p]))!;
        }

        public async Task<Authorized> LocalCanCreateTask(int? p)
        {
            Authorized authorized;
            ReadRemoteAuthTask readremoteauthtask = ServiceProvider.GetRequiredService<ReadRemoteAuthTask>();
            authorized = await readremoteauthtask.CanReadRemoteBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanReadRemoteBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanReadRemoteStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanReadRemoteStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanCreateBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanCreateBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanCreateStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanCreateStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            ReadRemoteAuth readremoteauth = ServiceProvider.GetRequiredService<ReadRemoteAuth>();
            authorized = readremoteauth.CanReadRemoteBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanReadRemoteBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanReadRemoteString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanReadRemoteStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanCreateBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanCreateBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanCreateString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanCreateStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanCreateTaskBool(int? p)
        {
            return CanCreateTaskBoolProperty(p);
        }

        public virtual async Task<Authorized> RemoteCanCreateTaskBool(int? p)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegate<Authorized>(typeof(CanCreateTaskBoolDelegate), [p]))!;
        }

        public async Task<Authorized> LocalCanCreateTaskBool(int? p)
        {
            Authorized authorized;
            ReadRemoteAuthTask readremoteauthtask = ServiceProvider.GetRequiredService<ReadRemoteAuthTask>();
            authorized = await readremoteauthtask.CanReadRemoteBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanReadRemoteBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanReadRemoteStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanReadRemoteStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanCreateBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanCreateBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanCreateStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanCreateStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            ReadRemoteAuth readremoteauth = ServiceProvider.GetRequiredService<ReadRemoteAuth>();
            authorized = readremoteauth.CanReadRemoteBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanReadRemoteBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanReadRemoteString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanReadRemoteStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanCreateBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanCreateBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanCreateString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanCreateStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanCreateTaskBoolFalse(int? p)
        {
            return CanCreateTaskBoolFalseProperty(p);
        }

        public virtual async Task<Authorized> RemoteCanCreateTaskBoolFalse(int? p)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegate<Authorized>(typeof(CanCreateTaskBoolFalseDelegate), [p]))!;
        }

        public async Task<Authorized> LocalCanCreateTaskBoolFalse(int? p)
        {
            Authorized authorized;
            ReadRemoteAuthTask readremoteauthtask = ServiceProvider.GetRequiredService<ReadRemoteAuthTask>();
            authorized = await readremoteauthtask.CanReadRemoteBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanReadRemoteBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanReadRemoteStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanReadRemoteStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanCreateBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanCreateBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanCreateStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanCreateStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            ReadRemoteAuth readremoteauth = ServiceProvider.GetRequiredService<ReadRemoteAuth>();
            authorized = readremoteauth.CanReadRemoteBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanReadRemoteBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanReadRemoteString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanReadRemoteStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanCreateBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanCreateBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanCreateString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanCreateStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanCreateVoidDep(int? p)
        {
            return CanCreateVoidDepProperty(p);
        }

        public virtual async Task<Authorized> RemoteCanCreateVoidDep(int? p)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegate<Authorized>(typeof(CanCreateVoidDepDelegate), [p]))!;
        }

        public async Task<Authorized> LocalCanCreateVoidDep(int? p)
        {
            Authorized authorized;
            ReadRemoteAuthTask readremoteauthtask = ServiceProvider.GetRequiredService<ReadRemoteAuthTask>();
            authorized = await readremoteauthtask.CanReadRemoteBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanReadRemoteBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanReadRemoteStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanReadRemoteStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanCreateBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanCreateBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanCreateStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanCreateStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            ReadRemoteAuth readremoteauth = ServiceProvider.GetRequiredService<ReadRemoteAuth>();
            authorized = readremoteauth.CanReadRemoteBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanReadRemoteBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanReadRemoteString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanReadRemoteStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanCreateBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanCreateBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanCreateString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanCreateStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanCreateBoolTrueDep(int? p)
        {
            return CanCreateBoolTrueDepProperty(p);
        }

        public virtual async Task<Authorized> RemoteCanCreateBoolTrueDep(int? p)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegate<Authorized>(typeof(CanCreateBoolTrueDepDelegate), [p]))!;
        }

        public async Task<Authorized> LocalCanCreateBoolTrueDep(int? p)
        {
            Authorized authorized;
            ReadRemoteAuthTask readremoteauthtask = ServiceProvider.GetRequiredService<ReadRemoteAuthTask>();
            authorized = await readremoteauthtask.CanReadRemoteBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanReadRemoteBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanReadRemoteStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanReadRemoteStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanCreateBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanCreateBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanCreateStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanCreateStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            ReadRemoteAuth readremoteauth = ServiceProvider.GetRequiredService<ReadRemoteAuth>();
            authorized = readremoteauth.CanReadRemoteBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanReadRemoteBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanReadRemoteString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanReadRemoteStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanCreateBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanCreateBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanCreateString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanCreateStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanCreateBoolFalseDep(int? p)
        {
            return CanCreateBoolFalseDepProperty(p);
        }

        public virtual async Task<Authorized> RemoteCanCreateBoolFalseDep(int? p)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegate<Authorized>(typeof(CanCreateBoolFalseDepDelegate), [p]))!;
        }

        public async Task<Authorized> LocalCanCreateBoolFalseDep(int? p)
        {
            Authorized authorized;
            ReadRemoteAuthTask readremoteauthtask = ServiceProvider.GetRequiredService<ReadRemoteAuthTask>();
            authorized = await readremoteauthtask.CanReadRemoteBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanReadRemoteBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanReadRemoteStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanReadRemoteStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanCreateBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanCreateBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanCreateStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanCreateStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            ReadRemoteAuth readremoteauth = ServiceProvider.GetRequiredService<ReadRemoteAuth>();
            authorized = readremoteauth.CanReadRemoteBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanReadRemoteBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanReadRemoteString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanReadRemoteStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanCreateBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanCreateBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanCreateString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanCreateStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanCreateTaskDep(int? p)
        {
            return CanCreateTaskDepProperty(p);
        }

        public virtual async Task<Authorized> RemoteCanCreateTaskDep(int? p)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegate<Authorized>(typeof(CanCreateTaskDepDelegate), [p]))!;
        }

        public async Task<Authorized> LocalCanCreateTaskDep(int? p)
        {
            Authorized authorized;
            ReadRemoteAuthTask readremoteauthtask = ServiceProvider.GetRequiredService<ReadRemoteAuthTask>();
            authorized = await readremoteauthtask.CanReadRemoteBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanReadRemoteBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanReadRemoteStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanReadRemoteStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanCreateBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanCreateBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanCreateStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanCreateStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            ReadRemoteAuth readremoteauth = ServiceProvider.GetRequiredService<ReadRemoteAuth>();
            authorized = readremoteauth.CanReadRemoteBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanReadRemoteBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanReadRemoteString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanReadRemoteStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanCreateBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanCreateBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanCreateString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanCreateStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanCreateTaskBoolDep(int? p)
        {
            return CanCreateTaskBoolDepProperty(p);
        }

        public virtual async Task<Authorized> RemoteCanCreateTaskBoolDep(int? p)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegate<Authorized>(typeof(CanCreateTaskBoolDepDelegate), [p]))!;
        }

        public async Task<Authorized> LocalCanCreateTaskBoolDep(int? p)
        {
            Authorized authorized;
            ReadRemoteAuthTask readremoteauthtask = ServiceProvider.GetRequiredService<ReadRemoteAuthTask>();
            authorized = await readremoteauthtask.CanReadRemoteBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanReadRemoteBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanReadRemoteStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanReadRemoteStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanCreateBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanCreateBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanCreateStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanCreateStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            ReadRemoteAuth readremoteauth = ServiceProvider.GetRequiredService<ReadRemoteAuth>();
            authorized = readremoteauth.CanReadRemoteBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanReadRemoteBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanReadRemoteString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanReadRemoteStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanCreateBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanCreateBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanCreateString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanCreateStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanFetchVoid(int? p)
        {
            return CanFetchVoidProperty(p);
        }

        public virtual async Task<Authorized> RemoteCanFetchVoid(int? p)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegate<Authorized>(typeof(CanFetchVoidDelegate), [p]))!;
        }

        public async Task<Authorized> LocalCanFetchVoid(int? p)
        {
            Authorized authorized;
            ReadRemoteAuthTask readremoteauthtask = ServiceProvider.GetRequiredService<ReadRemoteAuthTask>();
            authorized = await readremoteauthtask.CanReadRemoteBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanReadRemoteBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanReadRemoteStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanReadRemoteStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanFetchBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanFetchBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanFetchStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanFetchStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            ReadRemoteAuth readremoteauth = ServiceProvider.GetRequiredService<ReadRemoteAuth>();
            authorized = readremoteauth.CanReadRemoteBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanReadRemoteBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanReadRemoteString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanReadRemoteStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanFetchBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanFetchBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanFetchString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanFetchStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanFetchBool(int? p)
        {
            return CanFetchBoolProperty(p);
        }

        public virtual async Task<Authorized> RemoteCanFetchBool(int? p)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegate<Authorized>(typeof(CanFetchBoolDelegate), [p]))!;
        }

        public async Task<Authorized> LocalCanFetchBool(int? p)
        {
            Authorized authorized;
            ReadRemoteAuthTask readremoteauthtask = ServiceProvider.GetRequiredService<ReadRemoteAuthTask>();
            authorized = await readremoteauthtask.CanReadRemoteBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanReadRemoteBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanReadRemoteStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanReadRemoteStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanFetchBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanFetchBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanFetchStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanFetchStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            ReadRemoteAuth readremoteauth = ServiceProvider.GetRequiredService<ReadRemoteAuth>();
            authorized = readremoteauth.CanReadRemoteBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanReadRemoteBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanReadRemoteString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanReadRemoteStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanFetchBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanFetchBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanFetchString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanFetchStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanFetchTask(int? p)
        {
            return CanFetchTaskProperty(p);
        }

        public virtual async Task<Authorized> RemoteCanFetchTask(int? p)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegate<Authorized>(typeof(CanFetchTaskDelegate), [p]))!;
        }

        public async Task<Authorized> LocalCanFetchTask(int? p)
        {
            Authorized authorized;
            ReadRemoteAuthTask readremoteauthtask = ServiceProvider.GetRequiredService<ReadRemoteAuthTask>();
            authorized = await readremoteauthtask.CanReadRemoteBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanReadRemoteBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanReadRemoteStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanReadRemoteStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanFetchBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanFetchBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanFetchStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanFetchStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            ReadRemoteAuth readremoteauth = ServiceProvider.GetRequiredService<ReadRemoteAuth>();
            authorized = readremoteauth.CanReadRemoteBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanReadRemoteBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanReadRemoteString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanReadRemoteStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanFetchBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanFetchBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanFetchString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanFetchStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanFetchTaskBool(int? p)
        {
            return CanFetchTaskBoolProperty(p);
        }

        public virtual async Task<Authorized> RemoteCanFetchTaskBool(int? p)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegate<Authorized>(typeof(CanFetchTaskBoolDelegate), [p]))!;
        }

        public async Task<Authorized> LocalCanFetchTaskBool(int? p)
        {
            Authorized authorized;
            ReadRemoteAuthTask readremoteauthtask = ServiceProvider.GetRequiredService<ReadRemoteAuthTask>();
            authorized = await readremoteauthtask.CanReadRemoteBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanReadRemoteBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanReadRemoteStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanReadRemoteStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanFetchBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanFetchBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanFetchStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanFetchStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            ReadRemoteAuth readremoteauth = ServiceProvider.GetRequiredService<ReadRemoteAuth>();
            authorized = readremoteauth.CanReadRemoteBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanReadRemoteBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanReadRemoteString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanReadRemoteStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanFetchBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanFetchBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanFetchString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanFetchStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanFetchVoidDep(int? p)
        {
            return CanFetchVoidDepProperty(p);
        }

        public virtual async Task<Authorized> RemoteCanFetchVoidDep(int? p)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegate<Authorized>(typeof(CanFetchVoidDepDelegate), [p]))!;
        }

        public async Task<Authorized> LocalCanFetchVoidDep(int? p)
        {
            Authorized authorized;
            ReadRemoteAuthTask readremoteauthtask = ServiceProvider.GetRequiredService<ReadRemoteAuthTask>();
            authorized = await readremoteauthtask.CanReadRemoteBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanReadRemoteBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanReadRemoteStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanReadRemoteStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanFetchBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanFetchBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanFetchStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanFetchStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            ReadRemoteAuth readremoteauth = ServiceProvider.GetRequiredService<ReadRemoteAuth>();
            authorized = readremoteauth.CanReadRemoteBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanReadRemoteBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanReadRemoteString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanReadRemoteStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanFetchBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanFetchBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanFetchString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanFetchStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanFetchBoolTrueDep(int? p)
        {
            return CanFetchBoolTrueDepProperty(p);
        }

        public virtual async Task<Authorized> RemoteCanFetchBoolTrueDep(int? p)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegate<Authorized>(typeof(CanFetchBoolTrueDepDelegate), [p]))!;
        }

        public async Task<Authorized> LocalCanFetchBoolTrueDep(int? p)
        {
            Authorized authorized;
            ReadRemoteAuthTask readremoteauthtask = ServiceProvider.GetRequiredService<ReadRemoteAuthTask>();
            authorized = await readremoteauthtask.CanReadRemoteBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanReadRemoteBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanReadRemoteStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanReadRemoteStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanFetchBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanFetchBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanFetchStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanFetchStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            ReadRemoteAuth readremoteauth = ServiceProvider.GetRequiredService<ReadRemoteAuth>();
            authorized = readremoteauth.CanReadRemoteBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanReadRemoteBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanReadRemoteString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanReadRemoteStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanFetchBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanFetchBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanFetchString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanFetchStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanFetchBoolFalseDep(int? p)
        {
            return CanFetchBoolFalseDepProperty(p);
        }

        public virtual async Task<Authorized> RemoteCanFetchBoolFalseDep(int? p)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegate<Authorized>(typeof(CanFetchBoolFalseDepDelegate), [p]))!;
        }

        public async Task<Authorized> LocalCanFetchBoolFalseDep(int? p)
        {
            Authorized authorized;
            ReadRemoteAuthTask readremoteauthtask = ServiceProvider.GetRequiredService<ReadRemoteAuthTask>();
            authorized = await readremoteauthtask.CanReadRemoteBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanReadRemoteBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanReadRemoteStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanReadRemoteStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanFetchBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanFetchBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanFetchStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanFetchStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            ReadRemoteAuth readremoteauth = ServiceProvider.GetRequiredService<ReadRemoteAuth>();
            authorized = readremoteauth.CanReadRemoteBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanReadRemoteBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanReadRemoteString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanReadRemoteStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanFetchBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanFetchBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanFetchString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanFetchStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanFetchTaskDep(int? p)
        {
            return CanFetchTaskDepProperty(p);
        }

        public virtual async Task<Authorized> RemoteCanFetchTaskDep(int? p)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegate<Authorized>(typeof(CanFetchTaskDepDelegate), [p]))!;
        }

        public async Task<Authorized> LocalCanFetchTaskDep(int? p)
        {
            Authorized authorized;
            ReadRemoteAuthTask readremoteauthtask = ServiceProvider.GetRequiredService<ReadRemoteAuthTask>();
            authorized = await readremoteauthtask.CanReadRemoteBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanReadRemoteBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanReadRemoteStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanReadRemoteStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanFetchBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanFetchBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanFetchStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanFetchStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            ReadRemoteAuth readremoteauth = ServiceProvider.GetRequiredService<ReadRemoteAuth>();
            authorized = readremoteauth.CanReadRemoteBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanReadRemoteBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanReadRemoteString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanReadRemoteStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanFetchBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanFetchBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanFetchString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanFetchStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanFetchTaskBoolDep(int? p)
        {
            return CanFetchTaskBoolDepProperty(p);
        }

        public virtual async Task<Authorized> RemoteCanFetchTaskBoolDep(int? p)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegate<Authorized>(typeof(CanFetchTaskBoolDepDelegate), [p]))!;
        }

        public async Task<Authorized> LocalCanFetchTaskBoolDep(int? p)
        {
            Authorized authorized;
            ReadRemoteAuthTask readremoteauthtask = ServiceProvider.GetRequiredService<ReadRemoteAuthTask>();
            authorized = await readremoteauthtask.CanReadRemoteBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanReadRemoteBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanReadRemoteStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanReadRemoteStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanFetchBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanFetchBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanFetchStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanFetchStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            ReadRemoteAuth readremoteauth = ServiceProvider.GetRequiredService<ReadRemoteAuth>();
            authorized = readremoteauth.CanReadRemoteBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanReadRemoteBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanReadRemoteString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanReadRemoteStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanFetchBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanFetchBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanFetchString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanFetchStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanFetchTaskBoolFalseDep(int? p)
        {
            return CanFetchTaskBoolFalseDepProperty(p);
        }

        public virtual async Task<Authorized> RemoteCanFetchTaskBoolFalseDep(int? p)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegate<Authorized>(typeof(CanFetchTaskBoolFalseDepDelegate), [p]))!;
        }

        public async Task<Authorized> LocalCanFetchTaskBoolFalseDep(int? p)
        {
            Authorized authorized;
            ReadRemoteAuthTask readremoteauthtask = ServiceProvider.GetRequiredService<ReadRemoteAuthTask>();
            authorized = await readremoteauthtask.CanReadRemoteBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanReadRemoteBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanReadRemoteStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanReadRemoteStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanFetchBoolTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanFetchBoolFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanFetchStringTask();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = await readremoteauthtask.CanFetchStringFalseTask(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            ReadRemoteAuth readremoteauth = ServiceProvider.GetRequiredService<ReadRemoteAuth>();
            authorized = readremoteauth.CanReadRemoteBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanReadRemoteBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanReadRemoteString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanReadRemoteStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanFetchBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanFetchBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanFetchString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readremoteauth.CanFetchStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public static void FactoryServiceRegistrar(IServiceCollection services, NeatooFactory remoteLocal)
        {
            services.AddScoped<ReadRemoteAuthTaskObjFactory>();
            services.AddScoped<IReadRemoteAuthTaskObjFactory, ReadRemoteAuthTaskObjFactory>();
            services.AddScoped<CreateVoidDelegate>(cc =>
            {
                var factory = cc.GetRequiredService<ReadRemoteAuthTaskObjFactory>();
                return (int? param) => factory.LocalCreateVoid(param);
            });
            services.AddScoped<CreateBoolDelegate>(cc =>
            {
                var factory = cc.GetRequiredService<ReadRemoteAuthTaskObjFactory>();
                return (int? param) => factory.LocalCreateBool(param);
            });
            services.AddScoped<CreateTaskDelegate>(cc =>
            {
                var factory = cc.GetRequiredService<ReadRemoteAuthTaskObjFactory>();
                return (int? param) => factory.LocalCreateTask(param);
            });
            services.AddScoped<CreateTaskBoolDelegate>(cc =>
            {
                var factory = cc.GetRequiredService<ReadRemoteAuthTaskObjFactory>();
                return (int? param) => factory.LocalCreateTaskBool(param);
            });
            services.AddScoped<CreateTaskBoolFalseDelegate>(cc =>
            {
                var factory = cc.GetRequiredService<ReadRemoteAuthTaskObjFactory>();
                return (int? param) => factory.LocalCreateTaskBoolFalse(param);
            });
            services.AddScoped<CreateVoidDepDelegate>(cc =>
            {
                var factory = cc.GetRequiredService<ReadRemoteAuthTaskObjFactory>();
                return (int? param) => factory.LocalCreateVoidDep(param);
            });
            services.AddScoped<CreateBoolTrueDepDelegate>(cc =>
            {
                var factory = cc.GetRequiredService<ReadRemoteAuthTaskObjFactory>();
                return (int? param) => factory.LocalCreateBoolTrueDep(param);
            });
            services.AddScoped<CreateBoolFalseDepDelegate>(cc =>
            {
                var factory = cc.GetRequiredService<ReadRemoteAuthTaskObjFactory>();
                return (int? param) => factory.LocalCreateBoolFalseDep(param);
            });
            services.AddScoped<CreateTaskDepDelegate>(cc =>
            {
                var factory = cc.GetRequiredService<ReadRemoteAuthTaskObjFactory>();
                return (int? param) => factory.LocalCreateTaskDep(param);
            });
            services.AddScoped<CreateTaskBoolDepDelegate>(cc =>
            {
                var factory = cc.GetRequiredService<ReadRemoteAuthTaskObjFactory>();
                return (int? param) => factory.LocalCreateTaskBoolDep(param);
            });
            services.AddScoped<FetchVoidDelegate>(cc =>
            {
                var factory = cc.GetRequiredService<ReadRemoteAuthTaskObjFactory>();
                return (int? param) => factory.LocalFetchVoid(param);
            });
            services.AddScoped<FetchBoolDelegate>(cc =>
            {
                var factory = cc.GetRequiredService<ReadRemoteAuthTaskObjFactory>();
                return (int? param) => factory.LocalFetchBool(param);
            });
            services.AddScoped<FetchTaskDelegate>(cc =>
            {
                var factory = cc.GetRequiredService<ReadRemoteAuthTaskObjFactory>();
                return (int? param) => factory.LocalFetchTask(param);
            });
            services.AddScoped<FetchTaskBoolDelegate>(cc =>
            {
                var factory = cc.GetRequiredService<ReadRemoteAuthTaskObjFactory>();
                return (int? param) => factory.LocalFetchTaskBool(param);
            });
            services.AddScoped<FetchVoidDepDelegate>(cc =>
            {
                var factory = cc.GetRequiredService<ReadRemoteAuthTaskObjFactory>();
                return (int? param) => factory.LocalFetchVoidDep(param);
            });
            services.AddScoped<FetchBoolTrueDepDelegate>(cc =>
            {
                var factory = cc.GetRequiredService<ReadRemoteAuthTaskObjFactory>();
                return (int? param) => factory.LocalFetchBoolTrueDep(param);
            });
            services.AddScoped<FetchBoolFalseDepDelegate>(cc =>
            {
                var factory = cc.GetRequiredService<ReadRemoteAuthTaskObjFactory>();
                return (int? param) => factory.LocalFetchBoolFalseDep(param);
            });
            services.AddScoped<FetchTaskDepDelegate>(cc =>
            {
                var factory = cc.GetRequiredService<ReadRemoteAuthTaskObjFactory>();
                return (int? param) => factory.LocalFetchTaskDep(param);
            });
            services.AddScoped<FetchTaskBoolDepDelegate>(cc =>
            {
                var factory = cc.GetRequiredService<ReadRemoteAuthTaskObjFactory>();
                return (int? param) => factory.LocalFetchTaskBoolDep(param);
            });
            services.AddScoped<FetchTaskBoolFalseDepDelegate>(cc =>
            {
                var factory = cc.GetRequiredService<ReadRemoteAuthTaskObjFactory>();
                return (int? param) => factory.LocalFetchTaskBoolFalseDep(param);
            });
            services.AddScoped<CanCreateVoidDelegate>(cc =>
            {
                var factory = cc.GetRequiredService<ReadRemoteAuthTaskObjFactory>();
                return (int? p) => factory.LocalCanCreateVoid(p);
            });
            services.AddScoped<CanCreateBoolDelegate>(cc =>
            {
                var factory = cc.GetRequiredService<ReadRemoteAuthTaskObjFactory>();
                return (int? p) => factory.LocalCanCreateBool(p);
            });
            services.AddScoped<CanCreateTaskDelegate>(cc =>
            {
                var factory = cc.GetRequiredService<ReadRemoteAuthTaskObjFactory>();
                return (int? p) => factory.LocalCanCreateTask(p);
            });
            services.AddScoped<CanCreateTaskBoolDelegate>(cc =>
            {
                var factory = cc.GetRequiredService<ReadRemoteAuthTaskObjFactory>();
                return (int? p) => factory.LocalCanCreateTaskBool(p);
            });
            services.AddScoped<CanCreateTaskBoolFalseDelegate>(cc =>
            {
                var factory = cc.GetRequiredService<ReadRemoteAuthTaskObjFactory>();
                return (int? p) => factory.LocalCanCreateTaskBoolFalse(p);
            });
            services.AddScoped<CanCreateVoidDepDelegate>(cc =>
            {
                var factory = cc.GetRequiredService<ReadRemoteAuthTaskObjFactory>();
                return (int? p) => factory.LocalCanCreateVoidDep(p);
            });
            services.AddScoped<CanCreateBoolTrueDepDelegate>(cc =>
            {
                var factory = cc.GetRequiredService<ReadRemoteAuthTaskObjFactory>();
                return (int? p) => factory.LocalCanCreateBoolTrueDep(p);
            });
            services.AddScoped<CanCreateBoolFalseDepDelegate>(cc =>
            {
                var factory = cc.GetRequiredService<ReadRemoteAuthTaskObjFactory>();
                return (int? p) => factory.LocalCanCreateBoolFalseDep(p);
            });
            services.AddScoped<CanCreateTaskDepDelegate>(cc =>
            {
                var factory = cc.GetRequiredService<ReadRemoteAuthTaskObjFactory>();
                return (int? p) => factory.LocalCanCreateTaskDep(p);
            });
            services.AddScoped<CanCreateTaskBoolDepDelegate>(cc =>
            {
                var factory = cc.GetRequiredService<ReadRemoteAuthTaskObjFactory>();
                return (int? p) => factory.LocalCanCreateTaskBoolDep(p);
            });
            services.AddScoped<CanFetchVoidDelegate>(cc =>
            {
                var factory = cc.GetRequiredService<ReadRemoteAuthTaskObjFactory>();
                return (int? p) => factory.LocalCanFetchVoid(p);
            });
            services.AddScoped<CanFetchBoolDelegate>(cc =>
            {
                var factory = cc.GetRequiredService<ReadRemoteAuthTaskObjFactory>();
                return (int? p) => factory.LocalCanFetchBool(p);
            });
            services.AddScoped<CanFetchTaskDelegate>(cc =>
            {
                var factory = cc.GetRequiredService<ReadRemoteAuthTaskObjFactory>();
                return (int? p) => factory.LocalCanFetchTask(p);
            });
            services.AddScoped<CanFetchTaskBoolDelegate>(cc =>
            {
                var factory = cc.GetRequiredService<ReadRemoteAuthTaskObjFactory>();
                return (int? p) => factory.LocalCanFetchTaskBool(p);
            });
            services.AddScoped<CanFetchVoidDepDelegate>(cc =>
            {
                var factory = cc.GetRequiredService<ReadRemoteAuthTaskObjFactory>();
                return (int? p) => factory.LocalCanFetchVoidDep(p);
            });
            services.AddScoped<CanFetchBoolTrueDepDelegate>(cc =>
            {
                var factory = cc.GetRequiredService<ReadRemoteAuthTaskObjFactory>();
                return (int? p) => factory.LocalCanFetchBoolTrueDep(p);
            });
            services.AddScoped<CanFetchBoolFalseDepDelegate>(cc =>
            {
                var factory = cc.GetRequiredService<ReadRemoteAuthTaskObjFactory>();
                return (int? p) => factory.LocalCanFetchBoolFalseDep(p);
            });
            services.AddScoped<CanFetchTaskDepDelegate>(cc =>
            {
                var factory = cc.GetRequiredService<ReadRemoteAuthTaskObjFactory>();
                return (int? p) => factory.LocalCanFetchTaskDep(p);
            });
            services.AddScoped<CanFetchTaskBoolDepDelegate>(cc =>
            {
                var factory = cc.GetRequiredService<ReadRemoteAuthTaskObjFactory>();
                return (int? p) => factory.LocalCanFetchTaskBoolDep(p);
            });
            services.AddScoped<CanFetchTaskBoolFalseDepDelegate>(cc =>
            {
                var factory = cc.GetRequiredService<ReadRemoteAuthTaskObjFactory>();
                return (int? p) => factory.LocalCanFetchTaskBoolFalseDep(p);
            });
            services.AddTransient<ReadRemoteAuthTaskObj>();
        }
    }
}