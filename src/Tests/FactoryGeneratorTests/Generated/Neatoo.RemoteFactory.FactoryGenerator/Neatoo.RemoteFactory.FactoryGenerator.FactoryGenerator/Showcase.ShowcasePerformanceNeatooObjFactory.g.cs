#nullable enable
using Neatoo.RemoteFactory;
using Neatoo.RemoteFactory.Internal;
using Microsoft.Extensions.DependencyInjection;
using static Neatoo.RemoteFactory.FactoryGeneratorTests.Showcase.ShowcasePerformance;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

/*
							READONLY - DO NOT EDIT!!!!
							Generated by Neatoo.RemoteFactory
*/
namespace Neatoo.RemoteFactory.FactoryGeneratorTests.Showcase
{
    public interface IShowcasePerformanceNeatooObjFactory
    {
        IShowcasePerformanceNeatooObj Create();
        IShowcasePerformanceNeatooObj Create(int id);
    }

    internal class ShowcasePerformanceNeatooObjFactory : FactoryBase<IShowcasePerformanceNeatooObj>, IShowcasePerformanceNeatooObjFactory
    {
        private readonly IServiceProvider ServiceProvider;
        public ShowcasePerformanceNeatooObjFactory(IServiceProvider serviceProvider, IFactoryCore<IShowcasePerformanceNeatooObj> factoryCore) : base(factoryCore)
        {
            this.ServiceProvider = serviceProvider;
        }

        public ShowcasePerformanceNeatooObjFactory(IServiceProvider serviceProvider, IMakeRemoteDelegateRequest remoteMethodDelegate, IFactoryCore<IShowcasePerformanceNeatooObj> factoryCore) : base(factoryCore)
        {
            this.ServiceProvider = serviceProvider;
        }

        public virtual IShowcasePerformanceNeatooObj Create()
        {
            return LocalCreate();
        }

        public IShowcasePerformanceNeatooObj LocalCreate()
        {
            var target = ServiceProvider.GetRequiredService<ShowcasePerformanceNeatooObj>();
            var factory = ServiceProvider.GetRequiredService<IShowcasePerformanceNeatooObjFactory>();
            return DoFactoryMethodCall(target, FactoryOperation.Create, () => target.Create(factory));
        }

        public virtual IShowcasePerformanceNeatooObj Create(int id)
        {
            return LocalCreate1(id);
        }

        public IShowcasePerformanceNeatooObj LocalCreate1(int id)
        {
            var target = ServiceProvider.GetRequiredService<ShowcasePerformanceNeatooObj>();
            var factory = ServiceProvider.GetRequiredService<IShowcasePerformanceNeatooObjFactory>();
            return DoFactoryMethodCall(target, FactoryOperation.Create, () => target.Create(id, factory));
        }

        public static void FactoryServiceRegistrar(IServiceCollection services, NeatooFactory remoteLocal)
        {
            services.AddScoped<ShowcasePerformanceNeatooObjFactory>();
            services.AddScoped<IShowcasePerformanceNeatooObjFactory, ShowcasePerformanceNeatooObjFactory>();
            services.AddTransient<ShowcasePerformanceNeatooObj>();
            services.AddTransient<IShowcasePerformanceNeatooObj, ShowcasePerformanceNeatooObj>();
        }
    }
}