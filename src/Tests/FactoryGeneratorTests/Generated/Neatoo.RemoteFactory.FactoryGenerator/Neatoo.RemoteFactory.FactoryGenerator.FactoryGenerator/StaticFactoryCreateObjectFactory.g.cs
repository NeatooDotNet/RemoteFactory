#nullable enable
using Neatoo.RemoteFactory;
using Neatoo.RemoteFactory.Internal;
using Microsoft.Extensions.DependencyInjection;
using static Neatoo.RemoteFactory.FactoryGeneratorTests.Factory.StaticFactoryMethodTests;
using Neatoo.RemoteFactory.FactoryGeneratorTests.Shared;

/*
							READONLY - DO NOT EDIT!!!!
							Generated by Neatoo.RemoteFactory
*/
namespace Neatoo.RemoteFactory.FactoryGeneratorTests.Factory
{
    public interface IStaticFactoryCreateObjectFactory
    {
        StaticFactoryCreateObject Create();
    }

    internal class StaticFactoryCreateObjectFactory : FactoryBase<StaticFactoryCreateObject>, IStaticFactoryCreateObjectFactory
    {
        private readonly IServiceProvider ServiceProvider;
        private readonly IMakeRemoteDelegateRequest? MakeRemoteDelegateRequest;
        // Delegates
        // Delegate Properties to provide Local or Remote fork in execution
        public StaticFactoryCreateObjectFactory(IServiceProvider serviceProvider, IFactoryCore<StaticFactoryCreateObject> factoryCore) : base(factoryCore)
        {
            this.ServiceProvider = serviceProvider;
        }

        public StaticFactoryCreateObjectFactory(IServiceProvider serviceProvider, IMakeRemoteDelegateRequest remoteMethodDelegate, IFactoryCore<StaticFactoryCreateObject> factoryCore) : base(factoryCore)
        {
            this.ServiceProvider = serviceProvider;
            this.MakeRemoteDelegateRequest = remoteMethodDelegate;
        }

        public virtual StaticFactoryCreateObject Create()
        {
            return LocalCreate();
        }

        public StaticFactoryCreateObject LocalCreate()
        {
            return DoFactoryMethodCall(FactoryOperation.Create, () => StaticFactoryCreateObject.Create());
        }

        public static void FactoryServiceRegistrar(IServiceCollection services, NeatooFactory remoteLocal)
        {
            services.AddScoped<StaticFactoryCreateObjectFactory>();
            services.AddScoped<IStaticFactoryCreateObjectFactory, StaticFactoryCreateObjectFactory>();
        }
    }
}