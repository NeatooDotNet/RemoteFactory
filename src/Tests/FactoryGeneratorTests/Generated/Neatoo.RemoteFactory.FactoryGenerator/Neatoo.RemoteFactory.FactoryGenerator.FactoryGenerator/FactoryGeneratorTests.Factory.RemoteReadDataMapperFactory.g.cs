#nullable enable
using Neatoo.RemoteFactory;
using Neatoo.RemoteFactory.Internal;
using Microsoft.Extensions.DependencyInjection;
using static Neatoo.RemoteFactory.FactoryGeneratorTests.Factory.RemoteReadTests;
using Neatoo.RemoteFactory.FactoryGeneratorTests;
using Neatoo.RemoteFactory.FactoryGeneratorTests.Shared;
using Xunit;

/*
							READONLY - DO NOT EDIT!!!!
							Generated by Neatoo.RemoteFactory
*/
namespace Neatoo.RemoteFactory.FactoryGeneratorTests.Factory
{
    public interface IRemoteReadDataMapperFactory : IRemoteReadDataMapperClientFactory
    {
    }

    internal class RemoteReadDataMapperFactory : RemoteReadDataMapperClientFactory, IRemoteReadDataMapperFactory
    {
        private readonly IServiceProvider ServiceProvider;
        public RemoteReadDataMapperFactory(IServiceProvider serviceProvider, IFactoryCore<RemoteReadDataMapper> factoryCore) : base(factoryCore)
        {
            this.ServiceProvider = serviceProvider;
            CreateVoidProperty = LocalCreateVoid;
            CreateBoolProperty = LocalCreateBool;
            CreateTaskProperty = LocalCreateTask;
            CreateTaskBoolProperty = LocalCreateTaskBool;
            CreateVoid1Property = LocalCreateVoid1;
            CreateBool1Property = LocalCreateBool1;
            CreateTask1Property = LocalCreateTask1;
            CreateTaskBool1Property = LocalCreateTaskBool1;
            CreateTaskBoolFalseProperty = LocalCreateTaskBoolFalse;
            CreateVoidDepProperty = LocalCreateVoidDep;
            CreateBoolTrueDepProperty = LocalCreateBoolTrueDep;
            CreateBoolFalseDepProperty = LocalCreateBoolFalseDep;
            CreateTaskDepProperty = LocalCreateTaskDep;
            CreateTaskBoolDepProperty = LocalCreateTaskBoolDep;
            CreateTaskBoolFalseDepProperty = LocalCreateTaskBoolFalseDep;
            CreateVoidDep1Property = LocalCreateVoidDep1;
            CreateBoolTrueDep1Property = LocalCreateBoolTrueDep1;
            CreateBoolFalseDep1Property = LocalCreateBoolFalseDep1;
            CreateTaskDep1Property = LocalCreateTaskDep1;
            CreateTaskBoolDep1Property = LocalCreateTaskBoolDep1;
            FetchVoidProperty = LocalFetchVoid;
            FetchBoolProperty = LocalFetchBool;
            FetchTaskProperty = LocalFetchTask;
            FetchTaskBoolProperty = LocalFetchTaskBool;
            FetchVoid1Property = LocalFetchVoid1;
            FetchBool1Property = LocalFetchBool1;
            FetchTask1Property = LocalFetchTask1;
            FetchTaskBool1Property = LocalFetchTaskBool1;
            FetchVoidDepProperty = LocalFetchVoidDep;
            FetchBoolTrueDepProperty = LocalFetchBoolTrueDep;
            FetchBoolFalseDepProperty = LocalFetchBoolFalseDep;
            FetchTaskDepProperty = LocalFetchTaskDep;
            FetchTaskBoolDepProperty = LocalFetchTaskBoolDep;
            FetchVoidDep1Property = LocalFetchVoidDep1;
            FetchBoolTrueDep1Property = LocalFetchBoolTrueDep1;
            FetchBoolFalseDep1Property = LocalFetchBoolFalseDep1;
            FetchTaskDep1Property = LocalFetchTaskDep1;
            FetchTaskBoolDep1Property = LocalFetchTaskBoolDep1;
            FetchTaskBoolFalseDepProperty = LocalFetchTaskBoolFalseDep;
        }

        public RemoteReadDataMapperFactory(IServiceProvider serviceProvider, IMakeRemoteDelegateRequest remoteMethodDelegate, IFactoryCore<RemoteReadDataMapper> factoryCore) : base(remoteMethodDelegate, factoryCore)
        {
            this.ServiceProvider = serviceProvider;
        }

        public Task<RemoteReadDataMapper> LocalCreateVoid()
        {
            var target = ServiceProvider.GetRequiredService<RemoteReadDataMapper>();
            return Task.FromResult(DoFactoryMethodCall(target, FactoryOperation.Create, () => target.CreateVoid()));
        }

        public Task<RemoteReadDataMapper?> LocalCreateBool()
        {
            var target = ServiceProvider.GetRequiredService<RemoteReadDataMapper>();
            return Task.FromResult(DoFactoryMethodCallBool(target, FactoryOperation.Create, () => target.CreateBool()));
        }

        public Task<RemoteReadDataMapper> LocalCreateTask()
        {
            var target = ServiceProvider.GetRequiredService<RemoteReadDataMapper>();
            return DoFactoryMethodCallAsync(target, FactoryOperation.Create, () => target.CreateTask());
        }

        public Task<RemoteReadDataMapper?> LocalCreateTaskBool()
        {
            var target = ServiceProvider.GetRequiredService<RemoteReadDataMapper>();
            return DoFactoryMethodCallBoolAsync(target, FactoryOperation.Create, () => target.CreateTaskBool());
        }

        public Task<RemoteReadDataMapper> LocalCreateVoid1(int? param)
        {
            var target = ServiceProvider.GetRequiredService<RemoteReadDataMapper>();
            return Task.FromResult(DoFactoryMethodCall(target, FactoryOperation.Create, () => target.CreateVoid(param)));
        }

        public Task<RemoteReadDataMapper?> LocalCreateBool1(int? param)
        {
            var target = ServiceProvider.GetRequiredService<RemoteReadDataMapper>();
            return Task.FromResult(DoFactoryMethodCallBool(target, FactoryOperation.Create, () => target.CreateBool(param)));
        }

        public Task<RemoteReadDataMapper> LocalCreateTask1(int? param)
        {
            var target = ServiceProvider.GetRequiredService<RemoteReadDataMapper>();
            return DoFactoryMethodCallAsync(target, FactoryOperation.Create, () => target.CreateTask(param));
        }

        public Task<RemoteReadDataMapper?> LocalCreateTaskBool1(int? param)
        {
            var target = ServiceProvider.GetRequiredService<RemoteReadDataMapper>();
            return DoFactoryMethodCallBoolAsync(target, FactoryOperation.Create, () => target.CreateTaskBool(param));
        }

        public Task<RemoteReadDataMapper?> LocalCreateTaskBoolFalse(int? param)
        {
            var target = ServiceProvider.GetRequiredService<RemoteReadDataMapper>();
            return DoFactoryMethodCallBoolAsync(target, FactoryOperation.Create, () => target.CreateTaskBoolFalse(param));
        }

        public Task<RemoteReadDataMapper> LocalCreateVoidDep()
        {
            var target = ServiceProvider.GetRequiredService<RemoteReadDataMapper>();
            var service = ServiceProvider.GetRequiredService<IService>();
            return Task.FromResult(DoFactoryMethodCall(target, FactoryOperation.Create, () => target.CreateVoidDep(service)));
        }

        public Task<RemoteReadDataMapper?> LocalCreateBoolTrueDep()
        {
            var target = ServiceProvider.GetRequiredService<RemoteReadDataMapper>();
            var service = ServiceProvider.GetRequiredService<IService>();
            return Task.FromResult(DoFactoryMethodCallBool(target, FactoryOperation.Create, () => target.CreateBoolTrueDep(service)));
        }

        public Task<RemoteReadDataMapper?> LocalCreateBoolFalseDep()
        {
            var target = ServiceProvider.GetRequiredService<RemoteReadDataMapper>();
            var service = ServiceProvider.GetRequiredService<IService>();
            return Task.FromResult(DoFactoryMethodCallBool(target, FactoryOperation.Create, () => target.CreateBoolFalseDep(service)));
        }

        public Task<RemoteReadDataMapper> LocalCreateTaskDep()
        {
            var target = ServiceProvider.GetRequiredService<RemoteReadDataMapper>();
            var service = ServiceProvider.GetRequiredService<IService>();
            return DoFactoryMethodCallAsync(target, FactoryOperation.Create, () => target.CreateTaskDep(service));
        }

        public Task<RemoteReadDataMapper?> LocalCreateTaskBoolDep()
        {
            var target = ServiceProvider.GetRequiredService<RemoteReadDataMapper>();
            var service = ServiceProvider.GetRequiredService<IService>();
            return DoFactoryMethodCallBoolAsync(target, FactoryOperation.Create, () => target.CreateTaskBoolDep(service));
        }

        public Task<RemoteReadDataMapper?> LocalCreateTaskBoolFalseDep()
        {
            var target = ServiceProvider.GetRequiredService<RemoteReadDataMapper>();
            var service = ServiceProvider.GetRequiredService<IService>();
            return DoFactoryMethodCallBoolAsync(target, FactoryOperation.Create, () => target.CreateTaskBoolFalseDep(service));
        }

        public Task<RemoteReadDataMapper> LocalCreateVoidDep1(int? param)
        {
            var target = ServiceProvider.GetRequiredService<RemoteReadDataMapper>();
            var service = ServiceProvider.GetRequiredService<IService>();
            return Task.FromResult(DoFactoryMethodCall(target, FactoryOperation.Create, () => target.CreateVoidDep(param, service)));
        }

        public Task<RemoteReadDataMapper?> LocalCreateBoolTrueDep1(int? param)
        {
            var target = ServiceProvider.GetRequiredService<RemoteReadDataMapper>();
            var service = ServiceProvider.GetRequiredService<IService>();
            return Task.FromResult(DoFactoryMethodCallBool(target, FactoryOperation.Create, () => target.CreateBoolTrueDep(param, service)));
        }

        public Task<RemoteReadDataMapper?> LocalCreateBoolFalseDep1(int? param)
        {
            var target = ServiceProvider.GetRequiredService<RemoteReadDataMapper>();
            var service = ServiceProvider.GetRequiredService<IService>();
            return Task.FromResult(DoFactoryMethodCallBool(target, FactoryOperation.Create, () => target.CreateBoolFalseDep(param, service)));
        }

        public Task<RemoteReadDataMapper> LocalCreateTaskDep1(int? param)
        {
            var target = ServiceProvider.GetRequiredService<RemoteReadDataMapper>();
            var service = ServiceProvider.GetRequiredService<IService>();
            return DoFactoryMethodCallAsync(target, FactoryOperation.Create, () => target.CreateTaskDep(param, service));
        }

        public Task<RemoteReadDataMapper?> LocalCreateTaskBoolDep1(int? param)
        {
            var target = ServiceProvider.GetRequiredService<RemoteReadDataMapper>();
            var service = ServiceProvider.GetRequiredService<IService>();
            return DoFactoryMethodCallBoolAsync(target, FactoryOperation.Create, () => target.CreateTaskBoolDep(param, service));
        }

        public Task<RemoteReadDataMapper> LocalFetchVoid()
        {
            var target = ServiceProvider.GetRequiredService<RemoteReadDataMapper>();
            return Task.FromResult(DoFactoryMethodCall(target, FactoryOperation.Fetch, () => target.FetchVoid()));
        }

        public Task<RemoteReadDataMapper?> LocalFetchBool()
        {
            var target = ServiceProvider.GetRequiredService<RemoteReadDataMapper>();
            return Task.FromResult(DoFactoryMethodCallBool(target, FactoryOperation.Fetch, () => target.FetchBool()));
        }

        public Task<RemoteReadDataMapper> LocalFetchTask()
        {
            var target = ServiceProvider.GetRequiredService<RemoteReadDataMapper>();
            return DoFactoryMethodCallAsync(target, FactoryOperation.Fetch, () => target.FetchTask());
        }

        public Task<RemoteReadDataMapper?> LocalFetchTaskBool()
        {
            var target = ServiceProvider.GetRequiredService<RemoteReadDataMapper>();
            return DoFactoryMethodCallBoolAsync(target, FactoryOperation.Fetch, () => target.FetchTaskBool());
        }

        public Task<RemoteReadDataMapper> LocalFetchVoid1(int? param)
        {
            var target = ServiceProvider.GetRequiredService<RemoteReadDataMapper>();
            return Task.FromResult(DoFactoryMethodCall(target, FactoryOperation.Fetch, () => target.FetchVoid(param)));
        }

        public Task<RemoteReadDataMapper?> LocalFetchBool1(int? param)
        {
            var target = ServiceProvider.GetRequiredService<RemoteReadDataMapper>();
            return Task.FromResult(DoFactoryMethodCallBool(target, FactoryOperation.Fetch, () => target.FetchBool(param)));
        }

        public Task<RemoteReadDataMapper> LocalFetchTask1(int? param)
        {
            var target = ServiceProvider.GetRequiredService<RemoteReadDataMapper>();
            return DoFactoryMethodCallAsync(target, FactoryOperation.Fetch, () => target.FetchTask(param));
        }

        public Task<RemoteReadDataMapper?> LocalFetchTaskBool1(int? param)
        {
            var target = ServiceProvider.GetRequiredService<RemoteReadDataMapper>();
            return DoFactoryMethodCallBoolAsync(target, FactoryOperation.Fetch, () => target.FetchTaskBool(param));
        }

        public Task<RemoteReadDataMapper> LocalFetchVoidDep()
        {
            var target = ServiceProvider.GetRequiredService<RemoteReadDataMapper>();
            var service = ServiceProvider.GetRequiredService<IService>();
            return Task.FromResult(DoFactoryMethodCall(target, FactoryOperation.Fetch, () => target.FetchVoidDep(service)));
        }

        public Task<RemoteReadDataMapper?> LocalFetchBoolTrueDep()
        {
            var target = ServiceProvider.GetRequiredService<RemoteReadDataMapper>();
            var service = ServiceProvider.GetRequiredService<IService>();
            return Task.FromResult(DoFactoryMethodCallBool(target, FactoryOperation.Fetch, () => target.FetchBoolTrueDep(service)));
        }

        public Task<RemoteReadDataMapper?> LocalFetchBoolFalseDep()
        {
            var target = ServiceProvider.GetRequiredService<RemoteReadDataMapper>();
            var service = ServiceProvider.GetRequiredService<IService>();
            return Task.FromResult(DoFactoryMethodCallBool(target, FactoryOperation.Fetch, () => target.FetchBoolFalseDep(service)));
        }

        public Task<RemoteReadDataMapper> LocalFetchTaskDep()
        {
            var target = ServiceProvider.GetRequiredService<RemoteReadDataMapper>();
            var service = ServiceProvider.GetRequiredService<IService>();
            return DoFactoryMethodCallAsync(target, FactoryOperation.Fetch, () => target.FetchTaskDep(service));
        }

        public Task<RemoteReadDataMapper?> LocalFetchTaskBoolDep()
        {
            var target = ServiceProvider.GetRequiredService<RemoteReadDataMapper>();
            var service = ServiceProvider.GetRequiredService<IService>();
            return DoFactoryMethodCallBoolAsync(target, FactoryOperation.Fetch, () => target.FetchTaskBoolDep(service));
        }

        public Task<RemoteReadDataMapper> LocalFetchVoidDep1(int? param)
        {
            var target = ServiceProvider.GetRequiredService<RemoteReadDataMapper>();
            var service = ServiceProvider.GetRequiredService<IService>();
            return Task.FromResult(DoFactoryMethodCall(target, FactoryOperation.Fetch, () => target.FetchVoidDep(param, service)));
        }

        public Task<RemoteReadDataMapper?> LocalFetchBoolTrueDep1(int? param)
        {
            var target = ServiceProvider.GetRequiredService<RemoteReadDataMapper>();
            var service = ServiceProvider.GetRequiredService<IService>();
            return Task.FromResult(DoFactoryMethodCallBool(target, FactoryOperation.Fetch, () => target.FetchBoolTrueDep(param, service)));
        }

        public Task<RemoteReadDataMapper?> LocalFetchBoolFalseDep1(int? param)
        {
            var target = ServiceProvider.GetRequiredService<RemoteReadDataMapper>();
            var service = ServiceProvider.GetRequiredService<IService>();
            return Task.FromResult(DoFactoryMethodCallBool(target, FactoryOperation.Fetch, () => target.FetchBoolFalseDep(param, service)));
        }

        public Task<RemoteReadDataMapper> LocalFetchTaskDep1(int? param)
        {
            var target = ServiceProvider.GetRequiredService<RemoteReadDataMapper>();
            var service = ServiceProvider.GetRequiredService<IService>();
            return DoFactoryMethodCallAsync(target, FactoryOperation.Fetch, () => target.FetchTaskDep(param, service));
        }

        public Task<RemoteReadDataMapper?> LocalFetchTaskBoolDep1(int? param)
        {
            var target = ServiceProvider.GetRequiredService<RemoteReadDataMapper>();
            var service = ServiceProvider.GetRequiredService<IService>();
            return DoFactoryMethodCallBoolAsync(target, FactoryOperation.Fetch, () => target.FetchTaskBoolDep(param, service));
        }

        public Task<RemoteReadDataMapper?> LocalFetchTaskBoolFalseDep(int? param)
        {
            var target = ServiceProvider.GetRequiredService<RemoteReadDataMapper>();
            var service = ServiceProvider.GetRequiredService<IService>();
            return DoFactoryMethodCallBoolAsync(target, FactoryOperation.Fetch, () => target.FetchTaskBoolFalseDep(param, service));
        }

        public static void FactoryServiceRegistrar(IServiceCollection services, NeatooFactory remoteLocal)
        {
            services.AddScoped<RemoteReadDataMapperFactory>();
            services.AddScoped<IRemoteReadDataMapperFactory, RemoteReadDataMapperFactory>();
            services.AddScoped<CreateVoidDelegate>(cc =>
            {
                var factory = cc.GetRequiredService<RemoteReadDataMapperFactory>();
                return () => factory.LocalCreateVoid();
            });
            services.AddScoped<CreateBoolDelegate>(cc =>
            {
                var factory = cc.GetRequiredService<RemoteReadDataMapperFactory>();
                return () => factory.LocalCreateBool();
            });
            services.AddScoped<CreateTaskDelegate>(cc =>
            {
                var factory = cc.GetRequiredService<RemoteReadDataMapperFactory>();
                return () => factory.LocalCreateTask();
            });
            services.AddScoped<CreateTaskBoolDelegate>(cc =>
            {
                var factory = cc.GetRequiredService<RemoteReadDataMapperFactory>();
                return () => factory.LocalCreateTaskBool();
            });
            services.AddScoped<CreateVoid1Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<RemoteReadDataMapperFactory>();
                return (int? param) => factory.LocalCreateVoid1(param);
            });
            services.AddScoped<CreateBool1Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<RemoteReadDataMapperFactory>();
                return (int? param) => factory.LocalCreateBool1(param);
            });
            services.AddScoped<CreateTask1Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<RemoteReadDataMapperFactory>();
                return (int? param) => factory.LocalCreateTask1(param);
            });
            services.AddScoped<CreateTaskBool1Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<RemoteReadDataMapperFactory>();
                return (int? param) => factory.LocalCreateTaskBool1(param);
            });
            services.AddScoped<CreateTaskBoolFalseDelegate>(cc =>
            {
                var factory = cc.GetRequiredService<RemoteReadDataMapperFactory>();
                return (int? param) => factory.LocalCreateTaskBoolFalse(param);
            });
            services.AddScoped<CreateVoidDepDelegate>(cc =>
            {
                var factory = cc.GetRequiredService<RemoteReadDataMapperFactory>();
                return () => factory.LocalCreateVoidDep();
            });
            services.AddScoped<CreateBoolTrueDepDelegate>(cc =>
            {
                var factory = cc.GetRequiredService<RemoteReadDataMapperFactory>();
                return () => factory.LocalCreateBoolTrueDep();
            });
            services.AddScoped<CreateBoolFalseDepDelegate>(cc =>
            {
                var factory = cc.GetRequiredService<RemoteReadDataMapperFactory>();
                return () => factory.LocalCreateBoolFalseDep();
            });
            services.AddScoped<CreateTaskDepDelegate>(cc =>
            {
                var factory = cc.GetRequiredService<RemoteReadDataMapperFactory>();
                return () => factory.LocalCreateTaskDep();
            });
            services.AddScoped<CreateTaskBoolDepDelegate>(cc =>
            {
                var factory = cc.GetRequiredService<RemoteReadDataMapperFactory>();
                return () => factory.LocalCreateTaskBoolDep();
            });
            services.AddScoped<CreateTaskBoolFalseDepDelegate>(cc =>
            {
                var factory = cc.GetRequiredService<RemoteReadDataMapperFactory>();
                return () => factory.LocalCreateTaskBoolFalseDep();
            });
            services.AddScoped<CreateVoidDep1Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<RemoteReadDataMapperFactory>();
                return (int? param) => factory.LocalCreateVoidDep1(param);
            });
            services.AddScoped<CreateBoolTrueDep1Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<RemoteReadDataMapperFactory>();
                return (int? param) => factory.LocalCreateBoolTrueDep1(param);
            });
            services.AddScoped<CreateBoolFalseDep1Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<RemoteReadDataMapperFactory>();
                return (int? param) => factory.LocalCreateBoolFalseDep1(param);
            });
            services.AddScoped<CreateTaskDep1Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<RemoteReadDataMapperFactory>();
                return (int? param) => factory.LocalCreateTaskDep1(param);
            });
            services.AddScoped<CreateTaskBoolDep1Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<RemoteReadDataMapperFactory>();
                return (int? param) => factory.LocalCreateTaskBoolDep1(param);
            });
            services.AddScoped<FetchVoidDelegate>(cc =>
            {
                var factory = cc.GetRequiredService<RemoteReadDataMapperFactory>();
                return () => factory.LocalFetchVoid();
            });
            services.AddScoped<FetchBoolDelegate>(cc =>
            {
                var factory = cc.GetRequiredService<RemoteReadDataMapperFactory>();
                return () => factory.LocalFetchBool();
            });
            services.AddScoped<FetchTaskDelegate>(cc =>
            {
                var factory = cc.GetRequiredService<RemoteReadDataMapperFactory>();
                return () => factory.LocalFetchTask();
            });
            services.AddScoped<FetchTaskBoolDelegate>(cc =>
            {
                var factory = cc.GetRequiredService<RemoteReadDataMapperFactory>();
                return () => factory.LocalFetchTaskBool();
            });
            services.AddScoped<FetchVoid1Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<RemoteReadDataMapperFactory>();
                return (int? param) => factory.LocalFetchVoid1(param);
            });
            services.AddScoped<FetchBool1Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<RemoteReadDataMapperFactory>();
                return (int? param) => factory.LocalFetchBool1(param);
            });
            services.AddScoped<FetchTask1Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<RemoteReadDataMapperFactory>();
                return (int? param) => factory.LocalFetchTask1(param);
            });
            services.AddScoped<FetchTaskBool1Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<RemoteReadDataMapperFactory>();
                return (int? param) => factory.LocalFetchTaskBool1(param);
            });
            services.AddScoped<FetchVoidDepDelegate>(cc =>
            {
                var factory = cc.GetRequiredService<RemoteReadDataMapperFactory>();
                return () => factory.LocalFetchVoidDep();
            });
            services.AddScoped<FetchBoolTrueDepDelegate>(cc =>
            {
                var factory = cc.GetRequiredService<RemoteReadDataMapperFactory>();
                return () => factory.LocalFetchBoolTrueDep();
            });
            services.AddScoped<FetchBoolFalseDepDelegate>(cc =>
            {
                var factory = cc.GetRequiredService<RemoteReadDataMapperFactory>();
                return () => factory.LocalFetchBoolFalseDep();
            });
            services.AddScoped<FetchTaskDepDelegate>(cc =>
            {
                var factory = cc.GetRequiredService<RemoteReadDataMapperFactory>();
                return () => factory.LocalFetchTaskDep();
            });
            services.AddScoped<FetchTaskBoolDepDelegate>(cc =>
            {
                var factory = cc.GetRequiredService<RemoteReadDataMapperFactory>();
                return () => factory.LocalFetchTaskBoolDep();
            });
            services.AddScoped<FetchVoidDep1Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<RemoteReadDataMapperFactory>();
                return (int? param) => factory.LocalFetchVoidDep1(param);
            });
            services.AddScoped<FetchBoolTrueDep1Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<RemoteReadDataMapperFactory>();
                return (int? param) => factory.LocalFetchBoolTrueDep1(param);
            });
            services.AddScoped<FetchBoolFalseDep1Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<RemoteReadDataMapperFactory>();
                return (int? param) => factory.LocalFetchBoolFalseDep1(param);
            });
            services.AddScoped<FetchTaskDep1Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<RemoteReadDataMapperFactory>();
                return (int? param) => factory.LocalFetchTaskDep1(param);
            });
            services.AddScoped<FetchTaskBoolDep1Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<RemoteReadDataMapperFactory>();
                return (int? param) => factory.LocalFetchTaskBoolDep1(param);
            });
            services.AddScoped<FetchTaskBoolFalseDepDelegate>(cc =>
            {
                var factory = cc.GetRequiredService<RemoteReadDataMapperFactory>();
                return (int? param) => factory.LocalFetchTaskBoolFalseDep(param);
            });
            services.AddTransient<RemoteReadDataMapper>();
        }
    }
}