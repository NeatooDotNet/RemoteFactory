#nullable enable
#if !EXCLUDECLIENTFACTORIES
using Neatoo.RemoteFactory;
using Neatoo.RemoteFactory.Internal;
using Microsoft.Extensions.DependencyInjection;
using Neatoo.RemoteFactory.FactoryGeneratorTests.Shared;

/*
							READONLY - DO NOT EDIT!!!!
							Generated by Neatoo.RemoteFactory
*/
namespace Neatoo.RemoteFactory.FactoryGeneratorTests.Showcase
{
    public interface IShowcaseAuthRemoteClientFactory
    {
        Task<IShowcaseAuthRemote?> Create(List<int> intList);
        Task<Authorized> CanCreate();
    }

    internal class ShowcaseAuthRemoteClientFactory : FactoryBase<IShowcaseAuthRemote>, IShowcaseAuthRemoteClientFactory
    {
        protected readonly IMakeRemoteDelegateRequest? MakeRemoteDelegateRequest;
        // Delegates
        public delegate Task<Authorized<IShowcaseAuthRemote>> CreateDelegate(List<int> intList);
        public delegate Task<Authorized> CanCreateDelegate();
        // Delegate Properties to provide Local or Remote fork in execution
        public CreateDelegate CreateProperty { get; protected set; }
        public CanCreateDelegate CanCreateProperty { get; protected set; }

        public ShowcaseAuthRemoteClientFactory(IFactoryCore<IShowcaseAuthRemote> factoryCore) : base(factoryCore)
        {
            CreateProperty = RemoteCreate;
            CanCreateProperty = RemoteCanCreate;
        }

        public ShowcaseAuthRemoteClientFactory(IMakeRemoteDelegateRequest remoteMethodDelegate, IFactoryCore<IShowcaseAuthRemote> factoryCore) : this(factoryCore)
        {
            this.MakeRemoteDelegateRequest = remoteMethodDelegate;
        }

        public virtual async Task<IShowcaseAuthRemote?> Create(List<int> intList)
        {
            return (await CreateProperty(intList)).Result;
        }

        public virtual async Task<Authorized<IShowcaseAuthRemote>> RemoteCreate(List<int> intList)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegate<Authorized<IShowcaseAuthRemote>>(typeof(CreateDelegate), [intList]))!;
        }

        public virtual Task<Authorized> CanCreate()
        {
            return CanCreateProperty();
        }

        public virtual async Task<Authorized> RemoteCanCreate()
        {
            return (await MakeRemoteDelegateRequest!.ForDelegate<Authorized>(typeof(CanCreateDelegate), []))!;
        }

        public static void ClientFactoryServiceRegistrar(IServiceCollection services, NeatooFactory remoteLocal)
        {
            services.AddScoped<IShowcaseAuthRemoteClientFactory, ShowcaseAuthRemoteClientFactory>();
        }
    }
}
#endif
