#nullable enable
#if !EXCLUDECLIENTFACTORIES
using Neatoo.RemoteFactory;
using Neatoo.RemoteFactory.Internal;
using Microsoft.Extensions.DependencyInjection;
using Neatoo.RemoteFactory.FactoryGeneratorTests.Shared;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

/*
							READONLY - DO NOT EDIT!!!!
							Generated by Neatoo.RemoteFactory
*/
namespace Neatoo.RemoteFactory.FactoryGeneratorTests.Showcase
{
    public interface IShowcaseSaveClientFactory
    {
        Task<IShowcaseSave> SaveRemote(IShowcaseSave target);
    }

    internal class ShowcaseSaveClientFactory : FactorySaveBase<IShowcaseSave>, IShowcaseSaveClientFactory
    {
        protected readonly IMakeRemoteDelegateRequest? MakeRemoteDelegateRequest;
        // Delegates
        public delegate Task<IShowcaseSave> SaveRemoteDelegate(IShowcaseSave target);
        // Delegate Properties to provide Local or Remote fork in execution
        public SaveRemoteDelegate SaveRemoteProperty { get; protected set; }

        public ShowcaseSaveClientFactory(IFactoryCore<IShowcaseSave> factoryCore) : base(factoryCore)
        {
            SaveRemoteProperty = RemoteSaveRemote;
        }

        public ShowcaseSaveClientFactory(IMakeRemoteDelegateRequest remoteMethodDelegate, IFactoryCore<IShowcaseSave> factoryCore) : this(factoryCore)
        {
            this.MakeRemoteDelegateRequest = remoteMethodDelegate;
        }

        public virtual Task<IShowcaseSave> SaveRemote(IShowcaseSave target)
        {
            return SaveRemoteProperty(target);
        }

        public virtual async Task<IShowcaseSave> RemoteSaveRemote(IShowcaseSave target)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegate<IShowcaseSave>(typeof(SaveRemoteDelegate), [target]))!;
        }

        public static void ClientFactoryServiceRegistrar(IServiceCollection services, NeatooFactory remoteLocal)
        {
            services.AddScoped<IShowcaseSaveClientFactory, ShowcaseSaveClientFactory>();
        }
    }
}
#endif
