#nullable enable
using Neatoo.RemoteFactory;
using Neatoo.RemoteFactory.Internal;
using Microsoft.Extensions.DependencyInjection;
using static Neatoo.RemoteFactory.FactoryGeneratorTests.SpecificSenarios.SaveWNoDeleteIsNotNullableTests;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

/*
							READONLY - DO NOT EDIT!!!!
							Generated by Neatoo.RemoteFactory
*/
namespace Neatoo.RemoteFactory.FactoryGeneratorTests.SpecificSenarios
{
    public interface ISaveWNoDeleteIsNotNullableFactory
    {
        SaveWNoDeleteIsNotNullable Create();
        SaveWNoDeleteIsNotNullable Save(SaveWNoDeleteIsNotNullable target);
    }

    internal class SaveWNoDeleteIsNotNullableFactory : FactorySaveBase<SaveWNoDeleteIsNotNullable>, IFactorySave<SaveWNoDeleteIsNotNullable>, ISaveWNoDeleteIsNotNullableFactory
    {
        private readonly IServiceProvider ServiceProvider;
        private readonly IMakeRemoteDelegateRequest? MakeRemoteDelegateRequest;
        // Delegates
        // Delegate Properties to provide Local or Remote fork in execution
        public SaveWNoDeleteIsNotNullableFactory(IServiceProvider serviceProvider, IFactoryCore<SaveWNoDeleteIsNotNullable> factoryCore) : base(factoryCore)
        {
            this.ServiceProvider = serviceProvider;
        }

        public SaveWNoDeleteIsNotNullableFactory(IServiceProvider serviceProvider, IMakeRemoteDelegateRequest remoteMethodDelegate, IFactoryCore<SaveWNoDeleteIsNotNullable> factoryCore) : base(factoryCore)
        {
            this.ServiceProvider = serviceProvider;
            this.MakeRemoteDelegateRequest = remoteMethodDelegate;
        }

        public virtual SaveWNoDeleteIsNotNullable Create()
        {
            return LocalCreate();
        }

        public SaveWNoDeleteIsNotNullable LocalCreate()
        {
            return DoFactoryMethodCall(FactoryOperation.Create, () => new SaveWNoDeleteIsNotNullable());
        }

        public SaveWNoDeleteIsNotNullable LocalInsert(SaveWNoDeleteIsNotNullable target)
        {
            var cTarget = (SaveWNoDeleteIsNotNullable)target ?? throw new Exception("SaveWNoDeleteIsNotNullable must implement SaveWNoDeleteIsNotNullable");
            return DoFactoryMethodCall(cTarget, FactoryOperation.Insert, () => cTarget.Insert());
        }

        public SaveWNoDeleteIsNotNullable LocalUpdate(SaveWNoDeleteIsNotNullable target)
        {
            var cTarget = (SaveWNoDeleteIsNotNullable)target ?? throw new Exception("SaveWNoDeleteIsNotNullable must implement SaveWNoDeleteIsNotNullable");
            return DoFactoryMethodCall(cTarget, FactoryOperation.Update, () => cTarget.Update());
        }

        public virtual SaveWNoDeleteIsNotNullable Save(SaveWNoDeleteIsNotNullable target)
        {
            return LocalSave(target);
        }

        async Task<IFactorySaveMeta?> IFactorySave<SaveWNoDeleteIsNotNullable>.Save(SaveWNoDeleteIsNotNullable target)
        {
            return await Task.FromResult((IFactorySaveMeta? )Save(target));
        }

        public virtual SaveWNoDeleteIsNotNullable LocalSave(SaveWNoDeleteIsNotNullable target)
        {
            if (target.IsDeleted)
            {
                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert(target);
            }
            else
            {
                return LocalUpdate(target);
            }
        }

        public static void FactoryServiceRegistrar(IServiceCollection services, NeatooFactory remoteLocal)
        {
            services.AddScoped<SaveWNoDeleteIsNotNullableFactory>();
            services.AddScoped<ISaveWNoDeleteIsNotNullableFactory, SaveWNoDeleteIsNotNullableFactory>();
            services.AddTransient<SaveWNoDeleteIsNotNullable>();
            services.AddScoped<IFactorySave<SaveWNoDeleteIsNotNullable>, SaveWNoDeleteIsNotNullableFactory>();
        }
    }
}