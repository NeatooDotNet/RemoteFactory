#nullable enable
#if !EXCLUDECLIENTFACTORIES
using Neatoo.RemoteFactory;
using Neatoo.RemoteFactory.Internal;
using Microsoft.Extensions.DependencyInjection;
using Neatoo.RemoteFactory.FactoryGeneratorTests.Shared;

/*
							READONLY - DO NOT EDIT!!!!
							Generated by Neatoo.RemoteFactory
*/
namespace Neatoo.RemoteFactory.FactoryGeneratorTests.Showcase
{
    public interface IShowcaseReadClientFactory
    {
        Task<IShowcaseRead> CreateRemote(List<int> intList);
    }

    internal class ShowcaseReadClientFactory : FactoryBase<IShowcaseRead>, IShowcaseReadClientFactory
    {
        protected readonly IMakeRemoteDelegateRequest? MakeRemoteDelegateRequest;
        // Delegates
        public delegate Task<IShowcaseRead> CreateRemoteDelegate(List<int> intList);
        // Delegate Properties to provide Local or Remote fork in execution
        public CreateRemoteDelegate CreateRemoteProperty { get; protected set; }

        public ShowcaseReadClientFactory(IFactoryCore<IShowcaseRead> factoryCore) : base(factoryCore)
        {
            CreateRemoteProperty = RemoteCreateRemote;
        }

        public ShowcaseReadClientFactory(IMakeRemoteDelegateRequest remoteMethodDelegate, IFactoryCore<IShowcaseRead> factoryCore) : this(factoryCore)
        {
            this.MakeRemoteDelegateRequest = remoteMethodDelegate;
        }

        public virtual Task<IShowcaseRead> CreateRemote(List<int> intList)
        {
            return CreateRemoteProperty(intList);
        }

        public virtual async Task<IShowcaseRead> RemoteCreateRemote(List<int> intList)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegate<IShowcaseRead>(typeof(CreateRemoteDelegate), [intList]))!;
        }

        public static void ClientFactoryServiceRegistrar(IServiceCollection services, NeatooFactory remoteLocal)
        {
            services.AddScoped<IShowcaseReadClientFactory, ShowcaseReadClientFactory>();
        }
    }
}
#endif
