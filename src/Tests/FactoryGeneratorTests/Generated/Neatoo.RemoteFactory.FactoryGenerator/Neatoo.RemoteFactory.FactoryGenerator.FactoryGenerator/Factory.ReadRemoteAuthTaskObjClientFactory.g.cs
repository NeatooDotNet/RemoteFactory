#nullable enable
#if !EXCLUDECLIENTFACTORIES
using Neatoo.RemoteFactory;
using Neatoo.RemoteFactory.Internal;
using Microsoft.Extensions.DependencyInjection;
using static Neatoo.RemoteFactory.FactoryGeneratorTests.Factory.ReadRemoteAuthTests;
using Neatoo.RemoteFactory.FactoryGeneratorTests;
using Neatoo.RemoteFactory.FactoryGeneratorTests.Shared;
using Xunit;

/*
							READONLY - DO NOT EDIT!!!!
							Generated by Neatoo.RemoteFactory
*/
namespace Neatoo.RemoteFactory.FactoryGeneratorTests.Factory
{
    public interface IReadRemoteAuthTaskObjClientFactory
    {
        Task<ReadRemoteAuthTaskObj?> CreateVoid(int? param);
        Task<ReadRemoteAuthTaskObj?> CreateBool(int? param);
        Task<ReadRemoteAuthTaskObj?> CreateTask(int? param);
        Task<ReadRemoteAuthTaskObj?> CreateTaskBool(int? param);
        Task<ReadRemoteAuthTaskObj?> CreateTaskBoolFalse(int? param);
        Task<ReadRemoteAuthTaskObj?> CreateVoidDep(int? param);
        Task<ReadRemoteAuthTaskObj?> CreateBoolTrueDep(int? param);
        Task<ReadRemoteAuthTaskObj?> CreateBoolFalseDep(int? param);
        Task<ReadRemoteAuthTaskObj?> CreateTaskDep(int? param);
        Task<ReadRemoteAuthTaskObj?> CreateTaskBoolDep(int? param);
        Task<ReadRemoteAuthTaskObj?> FetchVoid(int? param);
        Task<ReadRemoteAuthTaskObj?> FetchBool(int? param);
        Task<ReadRemoteAuthTaskObj?> FetchTask(int? param);
        Task<ReadRemoteAuthTaskObj?> FetchTaskBool(int? param);
        Task<ReadRemoteAuthTaskObj?> FetchVoidDep(int? param);
        Task<ReadRemoteAuthTaskObj?> FetchBoolTrueDep(int? param);
        Task<ReadRemoteAuthTaskObj?> FetchBoolFalseDep(int? param);
        Task<ReadRemoteAuthTaskObj?> FetchTaskDep(int? param);
        Task<ReadRemoteAuthTaskObj?> FetchTaskBoolDep(int? param);
        Task<ReadRemoteAuthTaskObj?> FetchTaskBoolFalseDep(int? param);
        Task<Authorized> CanCreateVoid(int? p);
        Task<Authorized> CanCreateBool(int? p);
        Task<Authorized> CanCreateTask(int? p);
        Task<Authorized> CanCreateTaskBool(int? p);
        Task<Authorized> CanCreateTaskBoolFalse(int? p);
        Task<Authorized> CanCreateVoidDep(int? p);
        Task<Authorized> CanCreateBoolTrueDep(int? p);
        Task<Authorized> CanCreateBoolFalseDep(int? p);
        Task<Authorized> CanCreateTaskDep(int? p);
        Task<Authorized> CanCreateTaskBoolDep(int? p);
        Task<Authorized> CanFetchVoid(int? p);
        Task<Authorized> CanFetchBool(int? p);
        Task<Authorized> CanFetchTask(int? p);
        Task<Authorized> CanFetchTaskBool(int? p);
        Task<Authorized> CanFetchVoidDep(int? p);
        Task<Authorized> CanFetchBoolTrueDep(int? p);
        Task<Authorized> CanFetchBoolFalseDep(int? p);
        Task<Authorized> CanFetchTaskDep(int? p);
        Task<Authorized> CanFetchTaskBoolDep(int? p);
        Task<Authorized> CanFetchTaskBoolFalseDep(int? p);
    }

    internal class ReadRemoteAuthTaskObjClientFactory : FactoryBase<ReadRemoteAuthTaskObj>, IReadRemoteAuthTaskObjClientFactory
    {
        protected readonly IMakeRemoteDelegateRequest? MakeRemoteDelegateRequest;
        // Delegates
        public delegate Task<Authorized<ReadRemoteAuthTaskObj>> CreateVoidDelegate(int? param);
        public delegate Task<Authorized<ReadRemoteAuthTaskObj>> CreateBoolDelegate(int? param);
        public delegate Task<Authorized<ReadRemoteAuthTaskObj>> CreateTaskDelegate(int? param);
        public delegate Task<Authorized<ReadRemoteAuthTaskObj>> CreateTaskBoolDelegate(int? param);
        public delegate Task<Authorized<ReadRemoteAuthTaskObj>> CreateTaskBoolFalseDelegate(int? param);
        public delegate Task<Authorized<ReadRemoteAuthTaskObj>> CreateVoidDepDelegate(int? param);
        public delegate Task<Authorized<ReadRemoteAuthTaskObj>> CreateBoolTrueDepDelegate(int? param);
        public delegate Task<Authorized<ReadRemoteAuthTaskObj>> CreateBoolFalseDepDelegate(int? param);
        public delegate Task<Authorized<ReadRemoteAuthTaskObj>> CreateTaskDepDelegate(int? param);
        public delegate Task<Authorized<ReadRemoteAuthTaskObj>> CreateTaskBoolDepDelegate(int? param);
        public delegate Task<Authorized<ReadRemoteAuthTaskObj>> FetchVoidDelegate(int? param);
        public delegate Task<Authorized<ReadRemoteAuthTaskObj>> FetchBoolDelegate(int? param);
        public delegate Task<Authorized<ReadRemoteAuthTaskObj>> FetchTaskDelegate(int? param);
        public delegate Task<Authorized<ReadRemoteAuthTaskObj>> FetchTaskBoolDelegate(int? param);
        public delegate Task<Authorized<ReadRemoteAuthTaskObj>> FetchVoidDepDelegate(int? param);
        public delegate Task<Authorized<ReadRemoteAuthTaskObj>> FetchBoolTrueDepDelegate(int? param);
        public delegate Task<Authorized<ReadRemoteAuthTaskObj>> FetchBoolFalseDepDelegate(int? param);
        public delegate Task<Authorized<ReadRemoteAuthTaskObj>> FetchTaskDepDelegate(int? param);
        public delegate Task<Authorized<ReadRemoteAuthTaskObj>> FetchTaskBoolDepDelegate(int? param);
        public delegate Task<Authorized<ReadRemoteAuthTaskObj>> FetchTaskBoolFalseDepDelegate(int? param);
        public delegate Task<Authorized> CanCreateVoidDelegate(int? p);
        public delegate Task<Authorized> CanCreateBoolDelegate(int? p);
        public delegate Task<Authorized> CanCreateTaskDelegate(int? p);
        public delegate Task<Authorized> CanCreateTaskBoolDelegate(int? p);
        public delegate Task<Authorized> CanCreateTaskBoolFalseDelegate(int? p);
        public delegate Task<Authorized> CanCreateVoidDepDelegate(int? p);
        public delegate Task<Authorized> CanCreateBoolTrueDepDelegate(int? p);
        public delegate Task<Authorized> CanCreateBoolFalseDepDelegate(int? p);
        public delegate Task<Authorized> CanCreateTaskDepDelegate(int? p);
        public delegate Task<Authorized> CanCreateTaskBoolDepDelegate(int? p);
        public delegate Task<Authorized> CanFetchVoidDelegate(int? p);
        public delegate Task<Authorized> CanFetchBoolDelegate(int? p);
        public delegate Task<Authorized> CanFetchTaskDelegate(int? p);
        public delegate Task<Authorized> CanFetchTaskBoolDelegate(int? p);
        public delegate Task<Authorized> CanFetchVoidDepDelegate(int? p);
        public delegate Task<Authorized> CanFetchBoolTrueDepDelegate(int? p);
        public delegate Task<Authorized> CanFetchBoolFalseDepDelegate(int? p);
        public delegate Task<Authorized> CanFetchTaskDepDelegate(int? p);
        public delegate Task<Authorized> CanFetchTaskBoolDepDelegate(int? p);
        public delegate Task<Authorized> CanFetchTaskBoolFalseDepDelegate(int? p);
        // Delegate Properties to provide Local or Remote fork in execution
        public CreateVoidDelegate CreateVoidProperty { get; protected set; }
        public CreateBoolDelegate CreateBoolProperty { get; protected set; }
        public CreateTaskDelegate CreateTaskProperty { get; protected set; }
        public CreateTaskBoolDelegate CreateTaskBoolProperty { get; protected set; }
        public CreateTaskBoolFalseDelegate CreateTaskBoolFalseProperty { get; protected set; }
        public CreateVoidDepDelegate CreateVoidDepProperty { get; protected set; }
        public CreateBoolTrueDepDelegate CreateBoolTrueDepProperty { get; protected set; }
        public CreateBoolFalseDepDelegate CreateBoolFalseDepProperty { get; protected set; }
        public CreateTaskDepDelegate CreateTaskDepProperty { get; protected set; }
        public CreateTaskBoolDepDelegate CreateTaskBoolDepProperty { get; protected set; }
        public FetchVoidDelegate FetchVoidProperty { get; protected set; }
        public FetchBoolDelegate FetchBoolProperty { get; protected set; }
        public FetchTaskDelegate FetchTaskProperty { get; protected set; }
        public FetchTaskBoolDelegate FetchTaskBoolProperty { get; protected set; }
        public FetchVoidDepDelegate FetchVoidDepProperty { get; protected set; }
        public FetchBoolTrueDepDelegate FetchBoolTrueDepProperty { get; protected set; }
        public FetchBoolFalseDepDelegate FetchBoolFalseDepProperty { get; protected set; }
        public FetchTaskDepDelegate FetchTaskDepProperty { get; protected set; }
        public FetchTaskBoolDepDelegate FetchTaskBoolDepProperty { get; protected set; }
        public FetchTaskBoolFalseDepDelegate FetchTaskBoolFalseDepProperty { get; protected set; }
        public CanCreateVoidDelegate CanCreateVoidProperty { get; protected set; }
        public CanCreateBoolDelegate CanCreateBoolProperty { get; protected set; }
        public CanCreateTaskDelegate CanCreateTaskProperty { get; protected set; }
        public CanCreateTaskBoolDelegate CanCreateTaskBoolProperty { get; protected set; }
        public CanCreateTaskBoolFalseDelegate CanCreateTaskBoolFalseProperty { get; protected set; }
        public CanCreateVoidDepDelegate CanCreateVoidDepProperty { get; protected set; }
        public CanCreateBoolTrueDepDelegate CanCreateBoolTrueDepProperty { get; protected set; }
        public CanCreateBoolFalseDepDelegate CanCreateBoolFalseDepProperty { get; protected set; }
        public CanCreateTaskDepDelegate CanCreateTaskDepProperty { get; protected set; }
        public CanCreateTaskBoolDepDelegate CanCreateTaskBoolDepProperty { get; protected set; }
        public CanFetchVoidDelegate CanFetchVoidProperty { get; protected set; }
        public CanFetchBoolDelegate CanFetchBoolProperty { get; protected set; }
        public CanFetchTaskDelegate CanFetchTaskProperty { get; protected set; }
        public CanFetchTaskBoolDelegate CanFetchTaskBoolProperty { get; protected set; }
        public CanFetchVoidDepDelegate CanFetchVoidDepProperty { get; protected set; }
        public CanFetchBoolTrueDepDelegate CanFetchBoolTrueDepProperty { get; protected set; }
        public CanFetchBoolFalseDepDelegate CanFetchBoolFalseDepProperty { get; protected set; }
        public CanFetchTaskDepDelegate CanFetchTaskDepProperty { get; protected set; }
        public CanFetchTaskBoolDepDelegate CanFetchTaskBoolDepProperty { get; protected set; }
        public CanFetchTaskBoolFalseDepDelegate CanFetchTaskBoolFalseDepProperty { get; protected set; }

        public ReadRemoteAuthTaskObjClientFactory(IFactoryCore<ReadRemoteAuthTaskObj> factoryCore) : base(factoryCore)
        {
            CreateVoidProperty = RemoteCreateVoid;
            CreateBoolProperty = RemoteCreateBool;
            CreateTaskProperty = RemoteCreateTask;
            CreateTaskBoolProperty = RemoteCreateTaskBool;
            CreateTaskBoolFalseProperty = RemoteCreateTaskBoolFalse;
            CreateVoidDepProperty = RemoteCreateVoidDep;
            CreateBoolTrueDepProperty = RemoteCreateBoolTrueDep;
            CreateBoolFalseDepProperty = RemoteCreateBoolFalseDep;
            CreateTaskDepProperty = RemoteCreateTaskDep;
            CreateTaskBoolDepProperty = RemoteCreateTaskBoolDep;
            FetchVoidProperty = RemoteFetchVoid;
            FetchBoolProperty = RemoteFetchBool;
            FetchTaskProperty = RemoteFetchTask;
            FetchTaskBoolProperty = RemoteFetchTaskBool;
            FetchVoidDepProperty = RemoteFetchVoidDep;
            FetchBoolTrueDepProperty = RemoteFetchBoolTrueDep;
            FetchBoolFalseDepProperty = RemoteFetchBoolFalseDep;
            FetchTaskDepProperty = RemoteFetchTaskDep;
            FetchTaskBoolDepProperty = RemoteFetchTaskBoolDep;
            FetchTaskBoolFalseDepProperty = RemoteFetchTaskBoolFalseDep;
            CanCreateVoidProperty = RemoteCanCreateVoid;
            CanCreateBoolProperty = RemoteCanCreateBool;
            CanCreateTaskProperty = RemoteCanCreateTask;
            CanCreateTaskBoolProperty = RemoteCanCreateTaskBool;
            CanCreateTaskBoolFalseProperty = RemoteCanCreateTaskBoolFalse;
            CanCreateVoidDepProperty = RemoteCanCreateVoidDep;
            CanCreateBoolTrueDepProperty = RemoteCanCreateBoolTrueDep;
            CanCreateBoolFalseDepProperty = RemoteCanCreateBoolFalseDep;
            CanCreateTaskDepProperty = RemoteCanCreateTaskDep;
            CanCreateTaskBoolDepProperty = RemoteCanCreateTaskBoolDep;
            CanFetchVoidProperty = RemoteCanFetchVoid;
            CanFetchBoolProperty = RemoteCanFetchBool;
            CanFetchTaskProperty = RemoteCanFetchTask;
            CanFetchTaskBoolProperty = RemoteCanFetchTaskBool;
            CanFetchVoidDepProperty = RemoteCanFetchVoidDep;
            CanFetchBoolTrueDepProperty = RemoteCanFetchBoolTrueDep;
            CanFetchBoolFalseDepProperty = RemoteCanFetchBoolFalseDep;
            CanFetchTaskDepProperty = RemoteCanFetchTaskDep;
            CanFetchTaskBoolDepProperty = RemoteCanFetchTaskBoolDep;
            CanFetchTaskBoolFalseDepProperty = RemoteCanFetchTaskBoolFalseDep;
        }

        public ReadRemoteAuthTaskObjClientFactory(IMakeRemoteDelegateRequest remoteMethodDelegate, IFactoryCore<ReadRemoteAuthTaskObj> factoryCore) : this(factoryCore)
        {
            this.MakeRemoteDelegateRequest = remoteMethodDelegate;
        }

        public virtual async Task<ReadRemoteAuthTaskObj?> CreateVoid(int? param)
        {
            return (await CreateVoidProperty(param)).Result;
        }

        public virtual async Task<Authorized<ReadRemoteAuthTaskObj>> RemoteCreateVoid(int? param)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegate<Authorized<ReadRemoteAuthTaskObj>>(typeof(CreateVoidDelegate), [param]))!;
        }

        public virtual async Task<ReadRemoteAuthTaskObj?> CreateBool(int? param)
        {
            return (await CreateBoolProperty(param)).Result;
        }

        public virtual async Task<Authorized<ReadRemoteAuthTaskObj>> RemoteCreateBool(int? param)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegate<Authorized<ReadRemoteAuthTaskObj>>(typeof(CreateBoolDelegate), [param]))!;
        }

        public virtual async Task<ReadRemoteAuthTaskObj?> CreateTask(int? param)
        {
            return (await CreateTaskProperty(param)).Result;
        }

        public virtual async Task<Authorized<ReadRemoteAuthTaskObj>> RemoteCreateTask(int? param)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegate<Authorized<ReadRemoteAuthTaskObj>>(typeof(CreateTaskDelegate), [param]))!;
        }

        public virtual async Task<ReadRemoteAuthTaskObj?> CreateTaskBool(int? param)
        {
            return (await CreateTaskBoolProperty(param)).Result;
        }

        public virtual async Task<Authorized<ReadRemoteAuthTaskObj>> RemoteCreateTaskBool(int? param)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegate<Authorized<ReadRemoteAuthTaskObj>>(typeof(CreateTaskBoolDelegate), [param]))!;
        }

        public virtual async Task<ReadRemoteAuthTaskObj?> CreateTaskBoolFalse(int? param)
        {
            return (await CreateTaskBoolFalseProperty(param)).Result;
        }

        public virtual async Task<Authorized<ReadRemoteAuthTaskObj>> RemoteCreateTaskBoolFalse(int? param)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegate<Authorized<ReadRemoteAuthTaskObj>>(typeof(CreateTaskBoolFalseDelegate), [param]))!;
        }

        public virtual async Task<ReadRemoteAuthTaskObj?> CreateVoidDep(int? param)
        {
            return (await CreateVoidDepProperty(param)).Result;
        }

        public virtual async Task<Authorized<ReadRemoteAuthTaskObj>> RemoteCreateVoidDep(int? param)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegate<Authorized<ReadRemoteAuthTaskObj>>(typeof(CreateVoidDepDelegate), [param]))!;
        }

        public virtual async Task<ReadRemoteAuthTaskObj?> CreateBoolTrueDep(int? param)
        {
            return (await CreateBoolTrueDepProperty(param)).Result;
        }

        public virtual async Task<Authorized<ReadRemoteAuthTaskObj>> RemoteCreateBoolTrueDep(int? param)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegate<Authorized<ReadRemoteAuthTaskObj>>(typeof(CreateBoolTrueDepDelegate), [param]))!;
        }

        public virtual async Task<ReadRemoteAuthTaskObj?> CreateBoolFalseDep(int? param)
        {
            return (await CreateBoolFalseDepProperty(param)).Result;
        }

        public virtual async Task<Authorized<ReadRemoteAuthTaskObj>> RemoteCreateBoolFalseDep(int? param)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegate<Authorized<ReadRemoteAuthTaskObj>>(typeof(CreateBoolFalseDepDelegate), [param]))!;
        }

        public virtual async Task<ReadRemoteAuthTaskObj?> CreateTaskDep(int? param)
        {
            return (await CreateTaskDepProperty(param)).Result;
        }

        public virtual async Task<Authorized<ReadRemoteAuthTaskObj>> RemoteCreateTaskDep(int? param)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegate<Authorized<ReadRemoteAuthTaskObj>>(typeof(CreateTaskDepDelegate), [param]))!;
        }

        public virtual async Task<ReadRemoteAuthTaskObj?> CreateTaskBoolDep(int? param)
        {
            return (await CreateTaskBoolDepProperty(param)).Result;
        }

        public virtual async Task<Authorized<ReadRemoteAuthTaskObj>> RemoteCreateTaskBoolDep(int? param)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegate<Authorized<ReadRemoteAuthTaskObj>>(typeof(CreateTaskBoolDepDelegate), [param]))!;
        }

        public virtual async Task<ReadRemoteAuthTaskObj?> FetchVoid(int? param)
        {
            return (await FetchVoidProperty(param)).Result;
        }

        public virtual async Task<Authorized<ReadRemoteAuthTaskObj>> RemoteFetchVoid(int? param)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegate<Authorized<ReadRemoteAuthTaskObj>>(typeof(FetchVoidDelegate), [param]))!;
        }

        public virtual async Task<ReadRemoteAuthTaskObj?> FetchBool(int? param)
        {
            return (await FetchBoolProperty(param)).Result;
        }

        public virtual async Task<Authorized<ReadRemoteAuthTaskObj>> RemoteFetchBool(int? param)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegate<Authorized<ReadRemoteAuthTaskObj>>(typeof(FetchBoolDelegate), [param]))!;
        }

        public virtual async Task<ReadRemoteAuthTaskObj?> FetchTask(int? param)
        {
            return (await FetchTaskProperty(param)).Result;
        }

        public virtual async Task<Authorized<ReadRemoteAuthTaskObj>> RemoteFetchTask(int? param)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegate<Authorized<ReadRemoteAuthTaskObj>>(typeof(FetchTaskDelegate), [param]))!;
        }

        public virtual async Task<ReadRemoteAuthTaskObj?> FetchTaskBool(int? param)
        {
            return (await FetchTaskBoolProperty(param)).Result;
        }

        public virtual async Task<Authorized<ReadRemoteAuthTaskObj>> RemoteFetchTaskBool(int? param)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegate<Authorized<ReadRemoteAuthTaskObj>>(typeof(FetchTaskBoolDelegate), [param]))!;
        }

        public virtual async Task<ReadRemoteAuthTaskObj?> FetchVoidDep(int? param)
        {
            return (await FetchVoidDepProperty(param)).Result;
        }

        public virtual async Task<Authorized<ReadRemoteAuthTaskObj>> RemoteFetchVoidDep(int? param)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegate<Authorized<ReadRemoteAuthTaskObj>>(typeof(FetchVoidDepDelegate), [param]))!;
        }

        public virtual async Task<ReadRemoteAuthTaskObj?> FetchBoolTrueDep(int? param)
        {
            return (await FetchBoolTrueDepProperty(param)).Result;
        }

        public virtual async Task<Authorized<ReadRemoteAuthTaskObj>> RemoteFetchBoolTrueDep(int? param)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegate<Authorized<ReadRemoteAuthTaskObj>>(typeof(FetchBoolTrueDepDelegate), [param]))!;
        }

        public virtual async Task<ReadRemoteAuthTaskObj?> FetchBoolFalseDep(int? param)
        {
            return (await FetchBoolFalseDepProperty(param)).Result;
        }

        public virtual async Task<Authorized<ReadRemoteAuthTaskObj>> RemoteFetchBoolFalseDep(int? param)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegate<Authorized<ReadRemoteAuthTaskObj>>(typeof(FetchBoolFalseDepDelegate), [param]))!;
        }

        public virtual async Task<ReadRemoteAuthTaskObj?> FetchTaskDep(int? param)
        {
            return (await FetchTaskDepProperty(param)).Result;
        }

        public virtual async Task<Authorized<ReadRemoteAuthTaskObj>> RemoteFetchTaskDep(int? param)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegate<Authorized<ReadRemoteAuthTaskObj>>(typeof(FetchTaskDepDelegate), [param]))!;
        }

        public virtual async Task<ReadRemoteAuthTaskObj?> FetchTaskBoolDep(int? param)
        {
            return (await FetchTaskBoolDepProperty(param)).Result;
        }

        public virtual async Task<Authorized<ReadRemoteAuthTaskObj>> RemoteFetchTaskBoolDep(int? param)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegate<Authorized<ReadRemoteAuthTaskObj>>(typeof(FetchTaskBoolDepDelegate), [param]))!;
        }

        public virtual async Task<ReadRemoteAuthTaskObj?> FetchTaskBoolFalseDep(int? param)
        {
            return (await FetchTaskBoolFalseDepProperty(param)).Result;
        }

        public virtual async Task<Authorized<ReadRemoteAuthTaskObj>> RemoteFetchTaskBoolFalseDep(int? param)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegate<Authorized<ReadRemoteAuthTaskObj>>(typeof(FetchTaskBoolFalseDepDelegate), [param]))!;
        }

        public virtual Task<Authorized> CanCreateVoid(int? p)
        {
            return CanCreateVoidProperty(p);
        }

        public virtual async Task<Authorized> RemoteCanCreateVoid(int? p)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegate<Authorized>(typeof(CanCreateVoidDelegate), [p]))!;
        }

        public virtual Task<Authorized> CanCreateBool(int? p)
        {
            return CanCreateBoolProperty(p);
        }

        public virtual async Task<Authorized> RemoteCanCreateBool(int? p)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegate<Authorized>(typeof(CanCreateBoolDelegate), [p]))!;
        }

        public virtual Task<Authorized> CanCreateTask(int? p)
        {
            return CanCreateTaskProperty(p);
        }

        public virtual async Task<Authorized> RemoteCanCreateTask(int? p)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegate<Authorized>(typeof(CanCreateTaskDelegate), [p]))!;
        }

        public virtual Task<Authorized> CanCreateTaskBool(int? p)
        {
            return CanCreateTaskBoolProperty(p);
        }

        public virtual async Task<Authorized> RemoteCanCreateTaskBool(int? p)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegate<Authorized>(typeof(CanCreateTaskBoolDelegate), [p]))!;
        }

        public virtual Task<Authorized> CanCreateTaskBoolFalse(int? p)
        {
            return CanCreateTaskBoolFalseProperty(p);
        }

        public virtual async Task<Authorized> RemoteCanCreateTaskBoolFalse(int? p)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegate<Authorized>(typeof(CanCreateTaskBoolFalseDelegate), [p]))!;
        }

        public virtual Task<Authorized> CanCreateVoidDep(int? p)
        {
            return CanCreateVoidDepProperty(p);
        }

        public virtual async Task<Authorized> RemoteCanCreateVoidDep(int? p)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegate<Authorized>(typeof(CanCreateVoidDepDelegate), [p]))!;
        }

        public virtual Task<Authorized> CanCreateBoolTrueDep(int? p)
        {
            return CanCreateBoolTrueDepProperty(p);
        }

        public virtual async Task<Authorized> RemoteCanCreateBoolTrueDep(int? p)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegate<Authorized>(typeof(CanCreateBoolTrueDepDelegate), [p]))!;
        }

        public virtual Task<Authorized> CanCreateBoolFalseDep(int? p)
        {
            return CanCreateBoolFalseDepProperty(p);
        }

        public virtual async Task<Authorized> RemoteCanCreateBoolFalseDep(int? p)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegate<Authorized>(typeof(CanCreateBoolFalseDepDelegate), [p]))!;
        }

        public virtual Task<Authorized> CanCreateTaskDep(int? p)
        {
            return CanCreateTaskDepProperty(p);
        }

        public virtual async Task<Authorized> RemoteCanCreateTaskDep(int? p)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegate<Authorized>(typeof(CanCreateTaskDepDelegate), [p]))!;
        }

        public virtual Task<Authorized> CanCreateTaskBoolDep(int? p)
        {
            return CanCreateTaskBoolDepProperty(p);
        }

        public virtual async Task<Authorized> RemoteCanCreateTaskBoolDep(int? p)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegate<Authorized>(typeof(CanCreateTaskBoolDepDelegate), [p]))!;
        }

        public virtual Task<Authorized> CanFetchVoid(int? p)
        {
            return CanFetchVoidProperty(p);
        }

        public virtual async Task<Authorized> RemoteCanFetchVoid(int? p)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegate<Authorized>(typeof(CanFetchVoidDelegate), [p]))!;
        }

        public virtual Task<Authorized> CanFetchBool(int? p)
        {
            return CanFetchBoolProperty(p);
        }

        public virtual async Task<Authorized> RemoteCanFetchBool(int? p)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegate<Authorized>(typeof(CanFetchBoolDelegate), [p]))!;
        }

        public virtual Task<Authorized> CanFetchTask(int? p)
        {
            return CanFetchTaskProperty(p);
        }

        public virtual async Task<Authorized> RemoteCanFetchTask(int? p)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegate<Authorized>(typeof(CanFetchTaskDelegate), [p]))!;
        }

        public virtual Task<Authorized> CanFetchTaskBool(int? p)
        {
            return CanFetchTaskBoolProperty(p);
        }

        public virtual async Task<Authorized> RemoteCanFetchTaskBool(int? p)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegate<Authorized>(typeof(CanFetchTaskBoolDelegate), [p]))!;
        }

        public virtual Task<Authorized> CanFetchVoidDep(int? p)
        {
            return CanFetchVoidDepProperty(p);
        }

        public virtual async Task<Authorized> RemoteCanFetchVoidDep(int? p)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegate<Authorized>(typeof(CanFetchVoidDepDelegate), [p]))!;
        }

        public virtual Task<Authorized> CanFetchBoolTrueDep(int? p)
        {
            return CanFetchBoolTrueDepProperty(p);
        }

        public virtual async Task<Authorized> RemoteCanFetchBoolTrueDep(int? p)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegate<Authorized>(typeof(CanFetchBoolTrueDepDelegate), [p]))!;
        }

        public virtual Task<Authorized> CanFetchBoolFalseDep(int? p)
        {
            return CanFetchBoolFalseDepProperty(p);
        }

        public virtual async Task<Authorized> RemoteCanFetchBoolFalseDep(int? p)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegate<Authorized>(typeof(CanFetchBoolFalseDepDelegate), [p]))!;
        }

        public virtual Task<Authorized> CanFetchTaskDep(int? p)
        {
            return CanFetchTaskDepProperty(p);
        }

        public virtual async Task<Authorized> RemoteCanFetchTaskDep(int? p)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegate<Authorized>(typeof(CanFetchTaskDepDelegate), [p]))!;
        }

        public virtual Task<Authorized> CanFetchTaskBoolDep(int? p)
        {
            return CanFetchTaskBoolDepProperty(p);
        }

        public virtual async Task<Authorized> RemoteCanFetchTaskBoolDep(int? p)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegate<Authorized>(typeof(CanFetchTaskBoolDepDelegate), [p]))!;
        }

        public virtual Task<Authorized> CanFetchTaskBoolFalseDep(int? p)
        {
            return CanFetchTaskBoolFalseDepProperty(p);
        }

        public virtual async Task<Authorized> RemoteCanFetchTaskBoolFalseDep(int? p)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegate<Authorized>(typeof(CanFetchTaskBoolFalseDepDelegate), [p]))!;
        }

        public static void ClientFactoryServiceRegistrar(IServiceCollection services, NeatooFactory remoteLocal)
        {
            services.AddScoped<IReadRemoteAuthTaskObjClientFactory, ReadRemoteAuthTaskObjClientFactory>();
        }
    }
}
#endif
