#nullable enable
using Neatoo.RemoteFactory;
using Neatoo.RemoteFactory.Internal;
using Microsoft.Extensions.DependencyInjection;
using static Neatoo.RemoteFactory.FactoryGeneratorTests.Factory.ConstructorCreateTests;
using Neatoo.RemoteFactory.FactoryGeneratorTests.Shared;

/*
							READONLY - DO NOT EDIT!!!!
							Generated by Neatoo.RemoteFactory
*/
namespace Neatoo.RemoteFactory.FactoryGeneratorTests.Factory
{
    public interface IConstructorCreateObjectDepFactory
    {
        ConstructorCreateObjectDep Create();
    }

    internal class ConstructorCreateObjectDepFactory : FactoryBase<ConstructorCreateObjectDep>, IConstructorCreateObjectDepFactory
    {
        private readonly IServiceProvider ServiceProvider;
        public ConstructorCreateObjectDepFactory(IServiceProvider serviceProvider, IFactoryCore<ConstructorCreateObjectDep> factoryCore) : base(factoryCore)
        {
            this.ServiceProvider = serviceProvider;
        }

        public ConstructorCreateObjectDepFactory(IServiceProvider serviceProvider, IMakeRemoteDelegateRequest remoteMethodDelegate, IFactoryCore<ConstructorCreateObjectDep> factoryCore) : base(factoryCore)
        {
            this.ServiceProvider = serviceProvider;
        }

        public virtual ConstructorCreateObjectDep Create()
        {
            return LocalCreate();
        }

        public ConstructorCreateObjectDep LocalCreate()
        {
            var service = ServiceProvider.GetRequiredService<IService>();
            return DoFactoryMethodCall(FactoryOperation.Create, () => new ConstructorCreateObjectDep(service));
        }

        public static void FactoryServiceRegistrar(IServiceCollection services, NeatooFactory remoteLocal)
        {
            services.AddScoped<ConstructorCreateObjectDepFactory>();
            services.AddScoped<IConstructorCreateObjectDepFactory, ConstructorCreateObjectDepFactory>();
        }
    }
}