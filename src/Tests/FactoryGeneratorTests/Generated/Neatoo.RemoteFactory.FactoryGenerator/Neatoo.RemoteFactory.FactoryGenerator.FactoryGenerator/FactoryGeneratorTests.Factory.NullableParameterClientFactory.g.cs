#nullable enable
#if !EXCLUDECLIENTFACTORIES
using Neatoo.RemoteFactory;
using Neatoo.RemoteFactory.Internal;
using Microsoft.Extensions.DependencyInjection;
using static Neatoo.RemoteFactory.FactoryGeneratorTests.Factory.NullableParameterTests;
using Neatoo.RemoteFactory.FactoryGeneratorTests;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Xunit;

/*
							READONLY - DO NOT EDIT!!!!
							Generated by Neatoo.RemoteFactory
*/
namespace Neatoo.RemoteFactory.FactoryGeneratorTests.Factory
{
    public interface INullableParameterClientFactory
    {
        Task<NullableParameter> CreateRemote(int? p);
    }

    internal class NullableParameterClientFactory : FactoryBase<NullableParameter>, INullableParameterClientFactory
    {
        protected readonly IMakeRemoteDelegateRequest? MakeRemoteDelegateRequest;
        // Delegates
        public delegate Task<NullableParameter> CreateRemoteDelegate(int? p);
        // Delegate Properties to provide Local or Remote fork in execution
        public CreateRemoteDelegate CreateRemoteProperty { get; protected set; }

        public NullableParameterClientFactory(IFactoryCore<NullableParameter> factoryCore) : base(factoryCore)
        {
            CreateRemoteProperty = RemoteCreateRemote;
        }

        public NullableParameterClientFactory(IMakeRemoteDelegateRequest remoteMethodDelegate, IFactoryCore<NullableParameter> factoryCore) : this(factoryCore)
        {
            this.MakeRemoteDelegateRequest = remoteMethodDelegate;
        }

        public virtual Task<NullableParameter> CreateRemote(int? p)
        {
            return CreateRemoteProperty(p);
        }

        public virtual async Task<NullableParameter> RemoteCreateRemote(int? p)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegate<NullableParameter>(typeof(CreateRemoteDelegate), [p]))!;
        }

        public static void ClientFactoryServiceRegistrar(IServiceCollection services, NeatooFactory remoteLocal)
        {
            services.AddScoped<INullableParameterClientFactory, NullableParameterClientFactory>();
        }
    }
}
#endif
