#nullable enable
using Neatoo.RemoteFactory;
using Neatoo.RemoteFactory.Internal;
using Microsoft.Extensions.DependencyInjection;
using Neatoo.RemoteFactory.FactoryGeneratorTests.Shared;

/*
							READONLY - DO NOT EDIT!!!!
							Generated by Neatoo.RemoteFactory
*/
namespace Neatoo.RemoteFactory.FactoryGeneratorTests.Showcase
{
    public interface IShowcaseReadFactory
    {
        IShowcaseRead Create(List<int> intList);
        IShowcaseRead CreateVoid(List<int> intList);
        IShowcaseRead? CreateBool(List<int> intList);
        Task<IShowcaseRead> CreateTask(List<int> intList);
        Task<IShowcaseRead?> CreateTaskBool(List<int> intList);
        Task<IShowcaseRead> CreateService(List<int> intList);
        Task<IShowcaseRead> CreateStatic(List<int> intList);
        Task<IShowcaseRead> CreateRemote(List<int> intList);
        Task<IShowcaseRead> CreateRemoteClientFail(List<int> intList);
        IShowcaseRead FetchVoid(int id);
    }

    internal class ShowcaseReadFactory : FactoryBase<IShowcaseRead>, IShowcaseReadFactory
    {
        private readonly IServiceProvider ServiceProvider;
        private readonly IMakeRemoteDelegateRequest? MakeRemoteDelegateRequest;
        // Delegates
        public delegate Task<IShowcaseRead> CreateRemoteDelegate(List<int> intList);
        // Delegate Properties to provide Local or Remote fork in execution
        public CreateRemoteDelegate CreateRemoteProperty { get; }

        public ShowcaseReadFactory(IServiceProvider serviceProvider, IFactoryCore<IShowcaseRead> factoryCore) : base(factoryCore)
        {
            this.ServiceProvider = serviceProvider;
            CreateRemoteProperty = LocalCreateRemote;
        }

        public ShowcaseReadFactory(IServiceProvider serviceProvider, IMakeRemoteDelegateRequest remoteMethodDelegate, IFactoryCore<IShowcaseRead> factoryCore) : base(factoryCore)
        {
            this.ServiceProvider = serviceProvider;
            this.MakeRemoteDelegateRequest = remoteMethodDelegate;
            CreateRemoteProperty = RemoteCreateRemote;
        }

        public virtual IShowcaseRead Create(List<int> intList)
        {
            return LocalCreate(intList);
        }

        public IShowcaseRead LocalCreate(List<int> intList)
        {
            var service = ServiceProvider.GetRequiredService<IService>();
            return DoFactoryMethodCall(FactoryOperation.Create, () => new ShowcaseRead(intList, service));
        }

        public virtual IShowcaseRead CreateVoid(List<int> intList)
        {
            return LocalCreateVoid(intList);
        }

        public IShowcaseRead LocalCreateVoid(List<int> intList)
        {
            var target = ServiceProvider.GetRequiredService<ShowcaseRead>();
            return DoFactoryMethodCall(target, FactoryOperation.Create, () => target.CreateVoid(intList));
        }

        public virtual IShowcaseRead? CreateBool(List<int> intList)
        {
            return LocalCreateBool(intList);
        }

        public IShowcaseRead? LocalCreateBool(List<int> intList)
        {
            var target = ServiceProvider.GetRequiredService<ShowcaseRead>();
            return DoFactoryMethodCallBool(target, FactoryOperation.Create, () => target.CreateBool(intList));
        }

        public virtual Task<IShowcaseRead> CreateTask(List<int> intList)
        {
            return LocalCreateTask(intList);
        }

        public Task<IShowcaseRead> LocalCreateTask(List<int> intList)
        {
            var target = ServiceProvider.GetRequiredService<ShowcaseRead>();
            return DoFactoryMethodCallAsync(target, FactoryOperation.Create, () => target.CreateTask(intList));
        }

        public virtual Task<IShowcaseRead?> CreateTaskBool(List<int> intList)
        {
            return LocalCreateTaskBool(intList);
        }

        public Task<IShowcaseRead?> LocalCreateTaskBool(List<int> intList)
        {
            var target = ServiceProvider.GetRequiredService<ShowcaseRead>();
            return DoFactoryMethodCallBoolAsync(target, FactoryOperation.Create, () => target.CreateTaskBool(intList));
        }

        public virtual Task<IShowcaseRead> CreateService(List<int> intList)
        {
            return LocalCreateService(intList);
        }

        public Task<IShowcaseRead> LocalCreateService(List<int> intList)
        {
            var target = ServiceProvider.GetRequiredService<ShowcaseRead>();
            var service = ServiceProvider.GetRequiredService<IService>();
            return DoFactoryMethodCallAsync(target, FactoryOperation.Create, () => target.CreateService(intList, service));
        }

        public virtual Task<IShowcaseRead> CreateStatic(List<int> intList)
        {
            return LocalCreateStatic(intList);
        }

        public Task<IShowcaseRead> LocalCreateStatic(List<int> intList)
        {
            var service = ServiceProvider.GetRequiredService<IService>();
            return DoFactoryMethodCallAsync(FactoryOperation.Create, () => ShowcaseRead.CreateStatic(intList, service));
        }

        public virtual Task<IShowcaseRead> CreateRemote(List<int> intList)
        {
            return CreateRemoteProperty(intList);
        }

        public virtual async Task<IShowcaseRead> RemoteCreateRemote(List<int> intList)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegate<IShowcaseRead>(typeof(CreateRemoteDelegate), [intList]))!;
        }

        public Task<IShowcaseRead> LocalCreateRemote(List<int> intList)
        {
            var target = ServiceProvider.GetRequiredService<ShowcaseRead>();
            var service = ServiceProvider.GetRequiredService<IServerOnlyService>();
            return Task.FromResult(DoFactoryMethodCall(target, FactoryOperation.Create, () => target.CreateRemote(intList, service)));
        }

        public virtual Task<IShowcaseRead> CreateRemoteClientFail(List<int> intList)
        {
            return LocalCreateRemoteClientFail(intList);
        }

        public Task<IShowcaseRead> LocalCreateRemoteClientFail(List<int> intList)
        {
            var target = ServiceProvider.GetRequiredService<ShowcaseRead>();
            var service = ServiceProvider.GetRequiredService<IServerOnlyService>();
            return DoFactoryMethodCallAsync(target, FactoryOperation.Create, () => target.CreateRemoteClientFail(intList, service));
        }

        public virtual IShowcaseRead FetchVoid(int id)
        {
            return LocalFetchVoid(id);
        }

        public IShowcaseRead LocalFetchVoid(int id)
        {
            var target = ServiceProvider.GetRequiredService<ShowcaseRead>();
            return DoFactoryMethodCall(target, FactoryOperation.Fetch, () => target.FetchVoid(id));
        }

        public static void FactoryServiceRegistrar(IServiceCollection services, NeatooFactory remoteLocal)
        {
            services.AddScoped<ShowcaseReadFactory>();
            services.AddScoped<IShowcaseReadFactory, ShowcaseReadFactory>();
            services.AddScoped<CreateRemoteDelegate>(cc =>
            {
                var factory = cc.GetRequiredService<ShowcaseReadFactory>();
                return (List<int> intList) => factory.LocalCreateRemote(intList);
            });
            services.AddTransient<ShowcaseRead>();
            services.AddTransient<IShowcaseRead, ShowcaseRead>();
        }
    }
}