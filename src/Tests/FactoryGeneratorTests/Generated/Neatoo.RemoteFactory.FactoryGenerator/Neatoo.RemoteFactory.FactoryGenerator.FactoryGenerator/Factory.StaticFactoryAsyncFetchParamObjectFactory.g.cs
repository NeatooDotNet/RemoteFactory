#nullable enable
using Neatoo.RemoteFactory;
using Neatoo.RemoteFactory.Internal;
using Microsoft.Extensions.DependencyInjection;
using static Neatoo.RemoteFactory.FactoryGeneratorTests.Factory.StaticFactoryMethodTests;
using Neatoo.RemoteFactory.FactoryGeneratorTests.Shared;

/*
							READONLY - DO NOT EDIT!!!!
							Generated by Neatoo.RemoteFactory
*/
namespace Neatoo.RemoteFactory.FactoryGeneratorTests.Factory
{
    public interface IStaticFactoryAsyncFetchParamObjectFactory
    {
        Task<StaticFactoryAsyncFetchParamObject> Fetch(int? a);
    }

    internal class StaticFactoryAsyncFetchParamObjectFactory : FactoryBase<StaticFactoryAsyncFetchParamObject>, IStaticFactoryAsyncFetchParamObjectFactory
    {
        private readonly IServiceProvider ServiceProvider;
        private readonly IMakeRemoteDelegateRequest? MakeRemoteDelegateRequest;
        // Delegates
        // Delegate Properties to provide Local or Remote fork in execution
        public StaticFactoryAsyncFetchParamObjectFactory(IServiceProvider serviceProvider, IFactoryCore<StaticFactoryAsyncFetchParamObject> factoryCore) : base(factoryCore)
        {
            this.ServiceProvider = serviceProvider;
        }

        public StaticFactoryAsyncFetchParamObjectFactory(IServiceProvider serviceProvider, IMakeRemoteDelegateRequest remoteMethodDelegate, IFactoryCore<StaticFactoryAsyncFetchParamObject> factoryCore) : base(factoryCore)
        {
            this.ServiceProvider = serviceProvider;
            this.MakeRemoteDelegateRequest = remoteMethodDelegate;
        }

        public virtual Task<StaticFactoryAsyncFetchParamObject> Fetch(int? a)
        {
            return LocalFetch(a);
        }

        public Task<StaticFactoryAsyncFetchParamObject> LocalFetch(int? a)
        {
            var service = ServiceProvider.GetRequiredService<IService>();
            return DoFactoryMethodCallAsync(FactoryOperation.Fetch, () => StaticFactoryAsyncFetchParamObject.Fetch(a, service));
        }

        public static void FactoryServiceRegistrar(IServiceCollection services, NeatooFactory remoteLocal)
        {
            services.AddScoped<StaticFactoryAsyncFetchParamObjectFactory>();
            services.AddScoped<IStaticFactoryAsyncFetchParamObjectFactory, StaticFactoryAsyncFetchParamObjectFactory>();
        }
    }
}