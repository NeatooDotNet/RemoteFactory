#nullable enable
using Neatoo.RemoteFactory;
using Neatoo.RemoteFactory.Internal;
using Microsoft.Extensions.DependencyInjection;
using static Neatoo.RemoteFactory.FactoryGeneratorTests.Factory.ReadAuthTests;
using Neatoo.RemoteFactory.FactoryGeneratorTests;
using Xunit;
using Neatoo.RemoteFactory.FactoryGeneratorTests.Shared;

/*
							READONLY - DO NOT EDIT!!!!
							Generated by Neatoo.RemoteFactory
*/
namespace Neatoo.RemoteFactory.FactoryGeneratorTests.Factory
{
    public interface IReadAuthObjectFactory
    {
        ReadAuthObject? CreateVoid(int? param);
        ReadAuthObject? CreateBool(int? param);
        Task<ReadAuthObject?> CreateTask(int? param);
        Task<ReadAuthObject?> CreateTaskBool(int? param);
        Task<ReadAuthObject?> CreateTaskBoolFalse(int? param);
        ReadAuthObject? CreateVoidDep(int? param);
        ReadAuthObject? CreateBoolTrueDep(int? param);
        ReadAuthObject? CreateBoolFalseDep(int? param);
        Task<ReadAuthObject?> CreateTaskDep(int? param);
        Task<ReadAuthObject?> CreateTaskBoolDep(int? param);
        ReadAuthObject? FetchVoid(int? param);
        ReadAuthObject? FetchBool(int? param);
        Task<ReadAuthObject?> FetchTask(int? param);
        Task<ReadAuthObject?> FetchTaskBool(int? param);
        ReadAuthObject? FetchVoidDep(int? param);
        ReadAuthObject? FetchBoolTrueDep(int? param);
        ReadAuthObject? FetchBoolFalseDep(int? param);
        Task<ReadAuthObject?> FetchTaskDep(int? param);
        Task<ReadAuthObject?> FetchTaskBoolDep(int? param);
        Task<ReadAuthObject?> FetchTaskBoolFalseDep(int? param);
        Authorized CanCreateVoid(int? p);
        Authorized CanCreateBool(int? p);
        Authorized CanCreateTask(int? p);
        Authorized CanCreateTaskBool(int? p);
        Authorized CanCreateTaskBoolFalse(int? p);
        Authorized CanCreateVoidDep(int? p);
        Authorized CanCreateBoolTrueDep(int? p);
        Authorized CanCreateBoolFalseDep(int? p);
        Authorized CanCreateTaskDep(int? p);
        Authorized CanCreateTaskBoolDep(int? p);
        Authorized CanFetchVoid(int? p);
        Authorized CanFetchBool(int? p);
        Authorized CanFetchTask(int? p);
        Authorized CanFetchTaskBool(int? p);
        Authorized CanFetchVoidDep(int? p);
        Authorized CanFetchBoolTrueDep(int? p);
        Authorized CanFetchBoolFalseDep(int? p);
        Authorized CanFetchTaskDep(int? p);
        Authorized CanFetchTaskBoolDep(int? p);
        Authorized CanFetchTaskBoolFalseDep(int? p);
    }

    internal class ReadAuthObjectFactory : FactoryBase<ReadAuthObject>, IReadAuthObjectFactory
    {
        private readonly IServiceProvider ServiceProvider;
        public ReadAuthObjectFactory(IServiceProvider serviceProvider, IFactoryCore<ReadAuthObject> factoryCore) : base(factoryCore)
        {
            this.ServiceProvider = serviceProvider;
        }

        public ReadAuthObjectFactory(IServiceProvider serviceProvider, IMakeRemoteDelegateRequest remoteMethodDelegate, IFactoryCore<ReadAuthObject> factoryCore) : base(factoryCore)
        {
            this.ServiceProvider = serviceProvider;
        }

        public virtual ReadAuthObject? CreateVoid(int? param)
        {
            return (LocalCreateVoid(param)).Result;
        }

        public Authorized<ReadAuthObject> LocalCreateVoid(int? param)
        {
            Authorized authorized;
            ReadAuth readauth = ServiceProvider.GetRequiredService<ReadAuth>();
            authorized = readauth.CanAnyBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanAnyBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanAnyString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanAnyStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanReadBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanReadBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanReadString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanReadStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanCreateBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanCreateBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanCreateString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanCreateStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<ReadAuthObject>();
            return new Authorized<ReadAuthObject>(DoFactoryMethodCall(target, FactoryOperation.Create, () => target.CreateVoid(param)));
        }

        public virtual ReadAuthObject? CreateBool(int? param)
        {
            return (LocalCreateBool(param)).Result;
        }

        public Authorized<ReadAuthObject> LocalCreateBool(int? param)
        {
            Authorized authorized;
            ReadAuth readauth = ServiceProvider.GetRequiredService<ReadAuth>();
            authorized = readauth.CanAnyBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanAnyBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanAnyString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanAnyStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanReadBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanReadBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanReadString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanReadStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanCreateBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanCreateBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanCreateString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanCreateStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<ReadAuthObject>();
            return new Authorized<ReadAuthObject>(DoFactoryMethodCallBool(target, FactoryOperation.Create, () => target.CreateBool(param)));
        }

        public virtual async Task<ReadAuthObject?> CreateTask(int? param)
        {
            return (await LocalCreateTask(param)).Result;
        }

        public async Task<Authorized<ReadAuthObject>> LocalCreateTask(int? param)
        {
            Authorized authorized;
            ReadAuth readauth = ServiceProvider.GetRequiredService<ReadAuth>();
            authorized = readauth.CanAnyBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanAnyBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanAnyString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanAnyStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanReadBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanReadBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanReadString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanReadStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanCreateBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanCreateBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanCreateString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanCreateStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<ReadAuthObject>();
            return new Authorized<ReadAuthObject>(await DoFactoryMethodCallAsync(target, FactoryOperation.Create, () => target.CreateTask(param)));
        }

        public virtual async Task<ReadAuthObject?> CreateTaskBool(int? param)
        {
            return (await LocalCreateTaskBool(param)).Result;
        }

        public async Task<Authorized<ReadAuthObject>> LocalCreateTaskBool(int? param)
        {
            Authorized authorized;
            ReadAuth readauth = ServiceProvider.GetRequiredService<ReadAuth>();
            authorized = readauth.CanAnyBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanAnyBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanAnyString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanAnyStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanReadBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanReadBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanReadString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanReadStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanCreateBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanCreateBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanCreateString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanCreateStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<ReadAuthObject>();
            return new Authorized<ReadAuthObject>(await DoFactoryMethodCallBoolAsync(target, FactoryOperation.Create, () => target.CreateTaskBool(param)));
        }

        public virtual async Task<ReadAuthObject?> CreateTaskBoolFalse(int? param)
        {
            return (await LocalCreateTaskBoolFalse(param)).Result;
        }

        public async Task<Authorized<ReadAuthObject>> LocalCreateTaskBoolFalse(int? param)
        {
            Authorized authorized;
            ReadAuth readauth = ServiceProvider.GetRequiredService<ReadAuth>();
            authorized = readauth.CanAnyBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanAnyBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanAnyString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanAnyStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanReadBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanReadBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanReadString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanReadStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanCreateBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanCreateBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanCreateString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanCreateStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<ReadAuthObject>();
            return new Authorized<ReadAuthObject>(await DoFactoryMethodCallBoolAsync(target, FactoryOperation.Create, () => target.CreateTaskBoolFalse(param)));
        }

        public virtual ReadAuthObject? CreateVoidDep(int? param)
        {
            return (LocalCreateVoidDep(param)).Result;
        }

        public Authorized<ReadAuthObject> LocalCreateVoidDep(int? param)
        {
            Authorized authorized;
            ReadAuth readauth = ServiceProvider.GetRequiredService<ReadAuth>();
            authorized = readauth.CanAnyBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanAnyBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanAnyString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanAnyStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanReadBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanReadBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanReadString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanReadStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanCreateBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanCreateBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanCreateString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanCreateStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<ReadAuthObject>();
            var service = ServiceProvider.GetRequiredService<IService>();
            return new Authorized<ReadAuthObject>(DoFactoryMethodCall(target, FactoryOperation.Create, () => target.CreateVoidDep(param, service)));
        }

        public virtual ReadAuthObject? CreateBoolTrueDep(int? param)
        {
            return (LocalCreateBoolTrueDep(param)).Result;
        }

        public Authorized<ReadAuthObject> LocalCreateBoolTrueDep(int? param)
        {
            Authorized authorized;
            ReadAuth readauth = ServiceProvider.GetRequiredService<ReadAuth>();
            authorized = readauth.CanAnyBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanAnyBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanAnyString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanAnyStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanReadBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanReadBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanReadString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanReadStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanCreateBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanCreateBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanCreateString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanCreateStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<ReadAuthObject>();
            var service = ServiceProvider.GetRequiredService<IService>();
            return new Authorized<ReadAuthObject>(DoFactoryMethodCallBool(target, FactoryOperation.Create, () => target.CreateBoolTrueDep(param, service)));
        }

        public virtual ReadAuthObject? CreateBoolFalseDep(int? param)
        {
            return (LocalCreateBoolFalseDep(param)).Result;
        }

        public Authorized<ReadAuthObject> LocalCreateBoolFalseDep(int? param)
        {
            Authorized authorized;
            ReadAuth readauth = ServiceProvider.GetRequiredService<ReadAuth>();
            authorized = readauth.CanAnyBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanAnyBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanAnyString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanAnyStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanReadBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanReadBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanReadString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanReadStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanCreateBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanCreateBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanCreateString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanCreateStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<ReadAuthObject>();
            var service = ServiceProvider.GetRequiredService<IService>();
            return new Authorized<ReadAuthObject>(DoFactoryMethodCallBool(target, FactoryOperation.Create, () => target.CreateBoolFalseDep(param, service)));
        }

        public virtual async Task<ReadAuthObject?> CreateTaskDep(int? param)
        {
            return (await LocalCreateTaskDep(param)).Result;
        }

        public async Task<Authorized<ReadAuthObject>> LocalCreateTaskDep(int? param)
        {
            Authorized authorized;
            ReadAuth readauth = ServiceProvider.GetRequiredService<ReadAuth>();
            authorized = readauth.CanAnyBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanAnyBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanAnyString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanAnyStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanReadBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanReadBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanReadString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanReadStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanCreateBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanCreateBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanCreateString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanCreateStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<ReadAuthObject>();
            var service = ServiceProvider.GetRequiredService<IService>();
            return new Authorized<ReadAuthObject>(await DoFactoryMethodCallAsync(target, FactoryOperation.Create, () => target.CreateTaskDep(param, service)));
        }

        public virtual async Task<ReadAuthObject?> CreateTaskBoolDep(int? param)
        {
            return (await LocalCreateTaskBoolDep(param)).Result;
        }

        public async Task<Authorized<ReadAuthObject>> LocalCreateTaskBoolDep(int? param)
        {
            Authorized authorized;
            ReadAuth readauth = ServiceProvider.GetRequiredService<ReadAuth>();
            authorized = readauth.CanAnyBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanAnyBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanAnyString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanAnyStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanReadBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanReadBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanReadString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanReadStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanCreateBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanCreateBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanCreateString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanCreateStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<ReadAuthObject>();
            var service = ServiceProvider.GetRequiredService<IService>();
            return new Authorized<ReadAuthObject>(await DoFactoryMethodCallBoolAsync(target, FactoryOperation.Create, () => target.CreateTaskBoolDep(param, service)));
        }

        public virtual ReadAuthObject? FetchVoid(int? param)
        {
            return (LocalFetchVoid(param)).Result;
        }

        public Authorized<ReadAuthObject> LocalFetchVoid(int? param)
        {
            Authorized authorized;
            ReadAuth readauth = ServiceProvider.GetRequiredService<ReadAuth>();
            authorized = readauth.CanAnyBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanAnyBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanAnyString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanAnyStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanReadBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanReadBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanReadString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanReadStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanFetchBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanFetchBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanFetchString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanFetchStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<ReadAuthObject>();
            return new Authorized<ReadAuthObject>(DoFactoryMethodCall(target, FactoryOperation.Fetch, () => target.FetchVoid(param)));
        }

        public virtual ReadAuthObject? FetchBool(int? param)
        {
            return (LocalFetchBool(param)).Result;
        }

        public Authorized<ReadAuthObject> LocalFetchBool(int? param)
        {
            Authorized authorized;
            ReadAuth readauth = ServiceProvider.GetRequiredService<ReadAuth>();
            authorized = readauth.CanAnyBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanAnyBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanAnyString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanAnyStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanReadBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanReadBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanReadString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanReadStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanFetchBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanFetchBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanFetchString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanFetchStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<ReadAuthObject>();
            return new Authorized<ReadAuthObject>(DoFactoryMethodCallBool(target, FactoryOperation.Fetch, () => target.FetchBool(param)));
        }

        public virtual async Task<ReadAuthObject?> FetchTask(int? param)
        {
            return (await LocalFetchTask(param)).Result;
        }

        public async Task<Authorized<ReadAuthObject>> LocalFetchTask(int? param)
        {
            Authorized authorized;
            ReadAuth readauth = ServiceProvider.GetRequiredService<ReadAuth>();
            authorized = readauth.CanAnyBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanAnyBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanAnyString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanAnyStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanReadBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanReadBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanReadString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanReadStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanFetchBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanFetchBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanFetchString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanFetchStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<ReadAuthObject>();
            return new Authorized<ReadAuthObject>(await DoFactoryMethodCallAsync(target, FactoryOperation.Fetch, () => target.FetchTask(param)));
        }

        public virtual async Task<ReadAuthObject?> FetchTaskBool(int? param)
        {
            return (await LocalFetchTaskBool(param)).Result;
        }

        public async Task<Authorized<ReadAuthObject>> LocalFetchTaskBool(int? param)
        {
            Authorized authorized;
            ReadAuth readauth = ServiceProvider.GetRequiredService<ReadAuth>();
            authorized = readauth.CanAnyBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanAnyBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanAnyString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanAnyStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanReadBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanReadBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanReadString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanReadStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanFetchBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanFetchBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanFetchString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanFetchStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<ReadAuthObject>();
            return new Authorized<ReadAuthObject>(await DoFactoryMethodCallBoolAsync(target, FactoryOperation.Fetch, () => target.FetchTaskBool(param)));
        }

        public virtual ReadAuthObject? FetchVoidDep(int? param)
        {
            return (LocalFetchVoidDep(param)).Result;
        }

        public Authorized<ReadAuthObject> LocalFetchVoidDep(int? param)
        {
            Authorized authorized;
            ReadAuth readauth = ServiceProvider.GetRequiredService<ReadAuth>();
            authorized = readauth.CanAnyBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanAnyBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanAnyString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanAnyStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanReadBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanReadBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanReadString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanReadStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanFetchBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanFetchBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanFetchString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanFetchStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<ReadAuthObject>();
            var service = ServiceProvider.GetRequiredService<IService>();
            return new Authorized<ReadAuthObject>(DoFactoryMethodCall(target, FactoryOperation.Fetch, () => target.FetchVoidDep(param, service)));
        }

        public virtual ReadAuthObject? FetchBoolTrueDep(int? param)
        {
            return (LocalFetchBoolTrueDep(param)).Result;
        }

        public Authorized<ReadAuthObject> LocalFetchBoolTrueDep(int? param)
        {
            Authorized authorized;
            ReadAuth readauth = ServiceProvider.GetRequiredService<ReadAuth>();
            authorized = readauth.CanAnyBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanAnyBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanAnyString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanAnyStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanReadBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanReadBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanReadString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanReadStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanFetchBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanFetchBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanFetchString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanFetchStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<ReadAuthObject>();
            var service = ServiceProvider.GetRequiredService<IService>();
            return new Authorized<ReadAuthObject>(DoFactoryMethodCallBool(target, FactoryOperation.Fetch, () => target.FetchBoolTrueDep(param, service)));
        }

        public virtual ReadAuthObject? FetchBoolFalseDep(int? param)
        {
            return (LocalFetchBoolFalseDep(param)).Result;
        }

        public Authorized<ReadAuthObject> LocalFetchBoolFalseDep(int? param)
        {
            Authorized authorized;
            ReadAuth readauth = ServiceProvider.GetRequiredService<ReadAuth>();
            authorized = readauth.CanAnyBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanAnyBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanAnyString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanAnyStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanReadBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanReadBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanReadString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanReadStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanFetchBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanFetchBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanFetchString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanFetchStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<ReadAuthObject>();
            var service = ServiceProvider.GetRequiredService<IService>();
            return new Authorized<ReadAuthObject>(DoFactoryMethodCallBool(target, FactoryOperation.Fetch, () => target.FetchBoolFalseDep(param, service)));
        }

        public virtual async Task<ReadAuthObject?> FetchTaskDep(int? param)
        {
            return (await LocalFetchTaskDep(param)).Result;
        }

        public async Task<Authorized<ReadAuthObject>> LocalFetchTaskDep(int? param)
        {
            Authorized authorized;
            ReadAuth readauth = ServiceProvider.GetRequiredService<ReadAuth>();
            authorized = readauth.CanAnyBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanAnyBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanAnyString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanAnyStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanReadBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanReadBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanReadString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanReadStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanFetchBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanFetchBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanFetchString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanFetchStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<ReadAuthObject>();
            var service = ServiceProvider.GetRequiredService<IService>();
            return new Authorized<ReadAuthObject>(await DoFactoryMethodCallAsync(target, FactoryOperation.Fetch, () => target.FetchTaskDep(param, service)));
        }

        public virtual async Task<ReadAuthObject?> FetchTaskBoolDep(int? param)
        {
            return (await LocalFetchTaskBoolDep(param)).Result;
        }

        public async Task<Authorized<ReadAuthObject>> LocalFetchTaskBoolDep(int? param)
        {
            Authorized authorized;
            ReadAuth readauth = ServiceProvider.GetRequiredService<ReadAuth>();
            authorized = readauth.CanAnyBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanAnyBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanAnyString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanAnyStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanReadBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanReadBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanReadString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanReadStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanFetchBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanFetchBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanFetchString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanFetchStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<ReadAuthObject>();
            var service = ServiceProvider.GetRequiredService<IService>();
            return new Authorized<ReadAuthObject>(await DoFactoryMethodCallBoolAsync(target, FactoryOperation.Fetch, () => target.FetchTaskBoolDep(param, service)));
        }

        public virtual async Task<ReadAuthObject?> FetchTaskBoolFalseDep(int? param)
        {
            return (await LocalFetchTaskBoolFalseDep(param)).Result;
        }

        public async Task<Authorized<ReadAuthObject>> LocalFetchTaskBoolFalseDep(int? param)
        {
            Authorized authorized;
            ReadAuth readauth = ServiceProvider.GetRequiredService<ReadAuth>();
            authorized = readauth.CanAnyBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanAnyBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanAnyString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanAnyStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanReadBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanReadBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanReadString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanReadStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanFetchBool();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanFetchBoolFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanFetchString();
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            authorized = readauth.CanFetchStringFalse(param);
            if (!authorized.HasAccess)
            {
                return new Authorized<ReadAuthObject>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<ReadAuthObject>();
            var service = ServiceProvider.GetRequiredService<IService>();
            return new Authorized<ReadAuthObject>(await DoFactoryMethodCallBoolAsync(target, FactoryOperation.Fetch, () => target.FetchTaskBoolFalseDep(param, service)));
        }

        public virtual Authorized CanCreateVoid(int? p)
        {
            return LocalCanCreateVoid(p);
        }

        public Authorized LocalCanCreateVoid(int? p)
        {
            Authorized authorized;
            ReadAuth readauth = ServiceProvider.GetRequiredService<ReadAuth>();
            authorized = readauth.CanAnyBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanAnyBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanAnyString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanAnyStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanCreateBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanCreateBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanCreateString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanCreateStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Authorized CanCreateBool(int? p)
        {
            return LocalCanCreateBool(p);
        }

        public Authorized LocalCanCreateBool(int? p)
        {
            Authorized authorized;
            ReadAuth readauth = ServiceProvider.GetRequiredService<ReadAuth>();
            authorized = readauth.CanAnyBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanAnyBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanAnyString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanAnyStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanCreateBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanCreateBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanCreateString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanCreateStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Authorized CanCreateTask(int? p)
        {
            return LocalCanCreateTask(p);
        }

        public Authorized LocalCanCreateTask(int? p)
        {
            Authorized authorized;
            ReadAuth readauth = ServiceProvider.GetRequiredService<ReadAuth>();
            authorized = readauth.CanAnyBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanAnyBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanAnyString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanAnyStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanCreateBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanCreateBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanCreateString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanCreateStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Authorized CanCreateTaskBool(int? p)
        {
            return LocalCanCreateTaskBool(p);
        }

        public Authorized LocalCanCreateTaskBool(int? p)
        {
            Authorized authorized;
            ReadAuth readauth = ServiceProvider.GetRequiredService<ReadAuth>();
            authorized = readauth.CanAnyBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanAnyBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanAnyString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanAnyStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanCreateBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanCreateBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanCreateString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanCreateStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Authorized CanCreateTaskBoolFalse(int? p)
        {
            return LocalCanCreateTaskBoolFalse(p);
        }

        public Authorized LocalCanCreateTaskBoolFalse(int? p)
        {
            Authorized authorized;
            ReadAuth readauth = ServiceProvider.GetRequiredService<ReadAuth>();
            authorized = readauth.CanAnyBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanAnyBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanAnyString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanAnyStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanCreateBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanCreateBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanCreateString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanCreateStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Authorized CanCreateVoidDep(int? p)
        {
            return LocalCanCreateVoidDep(p);
        }

        public Authorized LocalCanCreateVoidDep(int? p)
        {
            Authorized authorized;
            ReadAuth readauth = ServiceProvider.GetRequiredService<ReadAuth>();
            authorized = readauth.CanAnyBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanAnyBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanAnyString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanAnyStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanCreateBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanCreateBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanCreateString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanCreateStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Authorized CanCreateBoolTrueDep(int? p)
        {
            return LocalCanCreateBoolTrueDep(p);
        }

        public Authorized LocalCanCreateBoolTrueDep(int? p)
        {
            Authorized authorized;
            ReadAuth readauth = ServiceProvider.GetRequiredService<ReadAuth>();
            authorized = readauth.CanAnyBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanAnyBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanAnyString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanAnyStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanCreateBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanCreateBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanCreateString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanCreateStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Authorized CanCreateBoolFalseDep(int? p)
        {
            return LocalCanCreateBoolFalseDep(p);
        }

        public Authorized LocalCanCreateBoolFalseDep(int? p)
        {
            Authorized authorized;
            ReadAuth readauth = ServiceProvider.GetRequiredService<ReadAuth>();
            authorized = readauth.CanAnyBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanAnyBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanAnyString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanAnyStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanCreateBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanCreateBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanCreateString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanCreateStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Authorized CanCreateTaskDep(int? p)
        {
            return LocalCanCreateTaskDep(p);
        }

        public Authorized LocalCanCreateTaskDep(int? p)
        {
            Authorized authorized;
            ReadAuth readauth = ServiceProvider.GetRequiredService<ReadAuth>();
            authorized = readauth.CanAnyBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanAnyBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanAnyString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanAnyStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanCreateBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanCreateBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanCreateString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanCreateStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Authorized CanCreateTaskBoolDep(int? p)
        {
            return LocalCanCreateTaskBoolDep(p);
        }

        public Authorized LocalCanCreateTaskBoolDep(int? p)
        {
            Authorized authorized;
            ReadAuth readauth = ServiceProvider.GetRequiredService<ReadAuth>();
            authorized = readauth.CanAnyBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanAnyBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanAnyString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanAnyStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanCreateBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanCreateBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanCreateString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanCreateStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Authorized CanFetchVoid(int? p)
        {
            return LocalCanFetchVoid(p);
        }

        public Authorized LocalCanFetchVoid(int? p)
        {
            Authorized authorized;
            ReadAuth readauth = ServiceProvider.GetRequiredService<ReadAuth>();
            authorized = readauth.CanAnyBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanAnyBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanAnyString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanAnyStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanFetchBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanFetchBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanFetchString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanFetchStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Authorized CanFetchBool(int? p)
        {
            return LocalCanFetchBool(p);
        }

        public Authorized LocalCanFetchBool(int? p)
        {
            Authorized authorized;
            ReadAuth readauth = ServiceProvider.GetRequiredService<ReadAuth>();
            authorized = readauth.CanAnyBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanAnyBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanAnyString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanAnyStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanFetchBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanFetchBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanFetchString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanFetchStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Authorized CanFetchTask(int? p)
        {
            return LocalCanFetchTask(p);
        }

        public Authorized LocalCanFetchTask(int? p)
        {
            Authorized authorized;
            ReadAuth readauth = ServiceProvider.GetRequiredService<ReadAuth>();
            authorized = readauth.CanAnyBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanAnyBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanAnyString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanAnyStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanFetchBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanFetchBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanFetchString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanFetchStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Authorized CanFetchTaskBool(int? p)
        {
            return LocalCanFetchTaskBool(p);
        }

        public Authorized LocalCanFetchTaskBool(int? p)
        {
            Authorized authorized;
            ReadAuth readauth = ServiceProvider.GetRequiredService<ReadAuth>();
            authorized = readauth.CanAnyBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanAnyBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanAnyString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanAnyStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanFetchBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanFetchBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanFetchString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanFetchStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Authorized CanFetchVoidDep(int? p)
        {
            return LocalCanFetchVoidDep(p);
        }

        public Authorized LocalCanFetchVoidDep(int? p)
        {
            Authorized authorized;
            ReadAuth readauth = ServiceProvider.GetRequiredService<ReadAuth>();
            authorized = readauth.CanAnyBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanAnyBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanAnyString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanAnyStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanFetchBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanFetchBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanFetchString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanFetchStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Authorized CanFetchBoolTrueDep(int? p)
        {
            return LocalCanFetchBoolTrueDep(p);
        }

        public Authorized LocalCanFetchBoolTrueDep(int? p)
        {
            Authorized authorized;
            ReadAuth readauth = ServiceProvider.GetRequiredService<ReadAuth>();
            authorized = readauth.CanAnyBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanAnyBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanAnyString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanAnyStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanFetchBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanFetchBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanFetchString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanFetchStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Authorized CanFetchBoolFalseDep(int? p)
        {
            return LocalCanFetchBoolFalseDep(p);
        }

        public Authorized LocalCanFetchBoolFalseDep(int? p)
        {
            Authorized authorized;
            ReadAuth readauth = ServiceProvider.GetRequiredService<ReadAuth>();
            authorized = readauth.CanAnyBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanAnyBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanAnyString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanAnyStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanFetchBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanFetchBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanFetchString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanFetchStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Authorized CanFetchTaskDep(int? p)
        {
            return LocalCanFetchTaskDep(p);
        }

        public Authorized LocalCanFetchTaskDep(int? p)
        {
            Authorized authorized;
            ReadAuth readauth = ServiceProvider.GetRequiredService<ReadAuth>();
            authorized = readauth.CanAnyBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanAnyBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanAnyString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanAnyStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanFetchBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanFetchBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanFetchString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanFetchStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Authorized CanFetchTaskBoolDep(int? p)
        {
            return LocalCanFetchTaskBoolDep(p);
        }

        public Authorized LocalCanFetchTaskBoolDep(int? p)
        {
            Authorized authorized;
            ReadAuth readauth = ServiceProvider.GetRequiredService<ReadAuth>();
            authorized = readauth.CanAnyBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanAnyBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanAnyString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanAnyStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanFetchBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanFetchBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanFetchString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanFetchStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Authorized CanFetchTaskBoolFalseDep(int? p)
        {
            return LocalCanFetchTaskBoolFalseDep(p);
        }

        public Authorized LocalCanFetchTaskBoolFalseDep(int? p)
        {
            Authorized authorized;
            ReadAuth readauth = ServiceProvider.GetRequiredService<ReadAuth>();
            authorized = readauth.CanAnyBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanAnyBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanAnyString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanAnyStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanReadStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanFetchBool();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanFetchBoolFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanFetchString();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = readauth.CanFetchStringFalse(p);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public static void FactoryServiceRegistrar(IServiceCollection services, NeatooFactory remoteLocal)
        {
            services.AddScoped<ReadAuthObjectFactory>();
            services.AddScoped<IReadAuthObjectFactory, ReadAuthObjectFactory>();
            services.AddTransient<ReadAuthObject>();
        }
    }
}