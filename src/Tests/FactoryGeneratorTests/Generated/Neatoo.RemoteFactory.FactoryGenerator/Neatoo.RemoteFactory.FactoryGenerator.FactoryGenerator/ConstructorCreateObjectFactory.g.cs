#nullable enable
using Neatoo.RemoteFactory;
using Neatoo.RemoteFactory.Internal;
using Microsoft.Extensions.DependencyInjection;
using static Neatoo.RemoteFactory.FactoryGeneratorTests.Factory.ConstructorCreateTests;
using Neatoo.RemoteFactory.FactoryGeneratorTests.Shared;

/*
							READONLY - DO NOT EDIT!!!!
							Generated by Neatoo.RemoteFactory
*/
namespace Neatoo.RemoteFactory.FactoryGeneratorTests.Factory
{
    public interface IConstructorCreateObjectFactory
    {
        ConstructorCreateObject Create();
    }

    internal class ConstructorCreateObjectFactory : FactoryBase<ConstructorCreateObject>, IConstructorCreateObjectFactory
    {
        private readonly IServiceProvider ServiceProvider;
        private readonly IMakeRemoteDelegateRequest? MakeRemoteDelegateRequest;
        // Delegates
        // Delegate Properties to provide Local or Remote fork in execution
        public ConstructorCreateObjectFactory(IServiceProvider serviceProvider, IFactoryCore<ConstructorCreateObject> factoryCore) : base(factoryCore)
        {
            this.ServiceProvider = serviceProvider;
        }

        public ConstructorCreateObjectFactory(IServiceProvider serviceProvider, IMakeRemoteDelegateRequest remoteMethodDelegate, IFactoryCore<ConstructorCreateObject> factoryCore) : base(factoryCore)
        {
            this.ServiceProvider = serviceProvider;
            this.MakeRemoteDelegateRequest = remoteMethodDelegate;
        }

        public virtual ConstructorCreateObject Create()
        {
            return LocalCreate();
        }

        public ConstructorCreateObject LocalCreate()
        {
            return DoFactoryMethodCall(FactoryOperation.Create, () => new ConstructorCreateObject());
        }

        public static void FactoryServiceRegistrar(IServiceCollection services, NeatooFactory remoteLocal)
        {
            services.AddScoped<ConstructorCreateObjectFactory>();
            services.AddScoped<IConstructorCreateObjectFactory, ConstructorCreateObjectFactory>();
        }
    }
}