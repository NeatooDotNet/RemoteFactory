#nullable enable
using Neatoo.RemoteFactory;
using Neatoo.RemoteFactory.Internal;
using Microsoft.Extensions.DependencyInjection;
using static Neatoo.RemoteFactory.FactoryGeneratorTests.Factory.StaticFactoryMethodTests;
using Neatoo.RemoteFactory.FactoryGeneratorTests.Shared;

/*
							READONLY - DO NOT EDIT!!!!
							Generated by Neatoo.RemoteFactory
*/
namespace Neatoo.RemoteFactory.FactoryGeneratorTests.Factory
{
    public interface IStaticFactoryAsyncFetchParamAuthObjectFactory
    {
        Task<StaticFactoryAsyncFetchParamAuthObject?> Fetch(int? a);
        Authorized CanFetch(int? a);
    }

    internal class StaticFactoryAsyncFetchParamAuthObjectFactory : FactoryBase<StaticFactoryAsyncFetchParamAuthObject>, IStaticFactoryAsyncFetchParamAuthObjectFactory
    {
        private readonly IServiceProvider ServiceProvider;
        public StaticFactoryAsyncFetchParamAuthObjectFactory(IServiceProvider serviceProvider, IFactoryCore<StaticFactoryAsyncFetchParamAuthObject> factoryCore) : base(factoryCore)
        {
            this.ServiceProvider = serviceProvider;
        }

        public StaticFactoryAsyncFetchParamAuthObjectFactory(IServiceProvider serviceProvider, IMakeRemoteDelegateRequest remoteMethodDelegate, IFactoryCore<StaticFactoryAsyncFetchParamAuthObject> factoryCore) : base(factoryCore)
        {
            this.ServiceProvider = serviceProvider;
        }

        public virtual async Task<StaticFactoryAsyncFetchParamAuthObject?> Fetch(int? a)
        {
            return (await LocalFetch(a)).Result;
        }

        public async Task<Authorized<StaticFactoryAsyncFetchParamAuthObject>> LocalFetch(int? a)
        {
            Authorized authorized;
            AuthorizeStaticFactoryAsyncFetchParamAuthObject authorizestaticfactoryasyncfetchparamauthobject = ServiceProvider.GetRequiredService<AuthorizeStaticFactoryAsyncFetchParamAuthObject>();
            authorized = authorizestaticfactoryasyncfetchparamauthobject.CanFetch(a);
            if (!authorized.HasAccess)
            {
                return new Authorized<StaticFactoryAsyncFetchParamAuthObject>(authorized);
            }

            var service = ServiceProvider.GetRequiredService<IService>();
            return new Authorized<StaticFactoryAsyncFetchParamAuthObject>(await DoFactoryMethodCallAsync(FactoryOperation.Fetch, () => StaticFactoryAsyncFetchParamAuthObject.Fetch(a, service)));
        }

        public virtual Authorized CanFetch(int? a)
        {
            return LocalCanFetch(a);
        }

        public Authorized LocalCanFetch(int? a)
        {
            Authorized authorized;
            AuthorizeStaticFactoryAsyncFetchParamAuthObject authorizestaticfactoryasyncfetchparamauthobject = ServiceProvider.GetRequiredService<AuthorizeStaticFactoryAsyncFetchParamAuthObject>();
            authorized = authorizestaticfactoryasyncfetchparamauthobject.CanFetch(a);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public static void FactoryServiceRegistrar(IServiceCollection services, NeatooFactory remoteLocal)
        {
            services.AddScoped<StaticFactoryAsyncFetchParamAuthObjectFactory>();
            services.AddScoped<IStaticFactoryAsyncFetchParamAuthObjectFactory, StaticFactoryAsyncFetchParamAuthObjectFactory>();
        }
    }
}