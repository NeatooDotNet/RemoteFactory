#nullable enable
using Neatoo.RemoteFactory;
using Neatoo.RemoteFactory.Internal;
using Microsoft.Extensions.DependencyInjection;
using static Neatoo.RemoteFactory.FactoryGeneratorTests.SpecificSenarios.HasBaseClassFactoryAttributeTestsBase;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

/*
							READONLY - DO NOT EDIT!!!!
							Generated by Neatoo.RemoteFactory
*/
namespace Neatoo.RemoteFactory.FactoryGeneratorTests.SpecificSenarios
{
    public interface IDerivedClassFactory
    {
    }

    internal class DerivedClassFactory : FactoryBase<DerivedClass>, IDerivedClassFactory
    {
        private readonly IServiceProvider ServiceProvider;
        public DerivedClassFactory(IServiceProvider serviceProvider, IFactoryCore<DerivedClass> factoryCore) : base(factoryCore)
        {
            this.ServiceProvider = serviceProvider;
        }

        public DerivedClassFactory(IServiceProvider serviceProvider, IMakeRemoteDelegateRequest remoteMethodDelegate, IFactoryCore<DerivedClass> factoryCore) : base(factoryCore)
        {
            this.ServiceProvider = serviceProvider;
        }

        public static void FactoryServiceRegistrar(IServiceCollection services, NeatooFactory remoteLocal)
        {
            services.AddScoped<DerivedClassFactory>();
            services.AddScoped<IDerivedClassFactory, DerivedClassFactory>();
        }
    }
}