#nullable enable
using Neatoo.RemoteFactory;
using Neatoo.RemoteFactory.Internal;
using Microsoft.Extensions.DependencyInjection;
using static Neatoo.RemoteFactory.FactoryGeneratorTests.Factory.StaticFactoryMethodTests;
using Neatoo.RemoteFactory.FactoryGeneratorTests.Shared;

/*
							READONLY - DO NOT EDIT!!!!
							Generated by Neatoo.RemoteFactory
*/
namespace Neatoo.RemoteFactory.FactoryGeneratorTests.Factory
{
    public interface IStaticFactoryAsyncFetchObjectFactory
    {
        Task<StaticFactoryAsyncFetchObject> Fetch();
    }

    internal class StaticFactoryAsyncFetchObjectFactory : FactoryBase<StaticFactoryAsyncFetchObject>, IStaticFactoryAsyncFetchObjectFactory
    {
        private readonly IServiceProvider ServiceProvider;
        private readonly IMakeRemoteDelegateRequest? MakeRemoteDelegateRequest;
        // Delegates
        // Delegate Properties to provide Local or Remote fork in execution
        public StaticFactoryAsyncFetchObjectFactory(IServiceProvider serviceProvider, IFactoryCore<StaticFactoryAsyncFetchObject> factoryCore) : base(factoryCore)
        {
            this.ServiceProvider = serviceProvider;
        }

        public StaticFactoryAsyncFetchObjectFactory(IServiceProvider serviceProvider, IMakeRemoteDelegateRequest remoteMethodDelegate, IFactoryCore<StaticFactoryAsyncFetchObject> factoryCore) : base(factoryCore)
        {
            this.ServiceProvider = serviceProvider;
            this.MakeRemoteDelegateRequest = remoteMethodDelegate;
        }

        public virtual Task<StaticFactoryAsyncFetchObject> Fetch()
        {
            return LocalFetch();
        }

        public Task<StaticFactoryAsyncFetchObject> LocalFetch()
        {
            return DoFactoryMethodCallAsync(FactoryOperation.Fetch, () => StaticFactoryAsyncFetchObject.Fetch());
        }

        public static void FactoryServiceRegistrar(IServiceCollection services, NeatooFactory remoteLocal)
        {
            services.AddScoped<StaticFactoryAsyncFetchObjectFactory>();
            services.AddScoped<IStaticFactoryAsyncFetchObjectFactory, StaticFactoryAsyncFetchObjectFactory>();
        }
    }
}