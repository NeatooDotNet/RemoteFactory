#nullable enable
using Neatoo.RemoteFactory;
using Neatoo.RemoteFactory.Internal;
using Microsoft.Extensions.DependencyInjection;
using static Neatoo.RemoteFactory.FactoryGeneratorTests.SpecificSenarios.IgnoreWriteMethodReturn;
using Microsoft.VisualStudio.TestPlatform.ObjectModel;

/*
							READONLY - DO NOT EDIT!!!!
							Generated by Neatoo.RemoteFactory
*/
namespace Neatoo.RemoteFactory.FactoryGeneratorTests.SpecificSenarios
{
    public interface IIgnoreMethodReturnObjFactory
    {
        IgnoreMethodReturnObj Create();
        IgnoreMethodReturnObj Save(IgnoreMethodReturnObj target);
    }

    internal class IgnoreMethodReturnObjFactory : FactorySaveBase<IgnoreMethodReturnObj>, IFactorySave<IgnoreMethodReturnObj>, IIgnoreMethodReturnObjFactory
    {
        private readonly IServiceProvider ServiceProvider;
        private readonly IMakeRemoteDelegateRequest? MakeRemoteDelegateRequest;
        // Delegates
        // Delegate Properties to provide Local or Remote fork in execution
        public IgnoreMethodReturnObjFactory(IServiceProvider serviceProvider, IFactoryCore<IgnoreMethodReturnObj> factoryCore) : base(factoryCore)
        {
            this.ServiceProvider = serviceProvider;
        }

        public IgnoreMethodReturnObjFactory(IServiceProvider serviceProvider, IMakeRemoteDelegateRequest remoteMethodDelegate, IFactoryCore<IgnoreMethodReturnObj> factoryCore) : base(factoryCore)
        {
            this.ServiceProvider = serviceProvider;
            this.MakeRemoteDelegateRequest = remoteMethodDelegate;
        }

        public virtual IgnoreMethodReturnObj Create()
        {
            return LocalCreate();
        }

        public IgnoreMethodReturnObj LocalCreate()
        {
            return DoFactoryMethodCall(FactoryOperation.Create, () => new IgnoreMethodReturnObj());
        }

        public IgnoreMethodReturnObj LocalInsert(IgnoreMethodReturnObj target)
        {
            var cTarget = (IgnoreMethodReturnObj)target ?? throw new Exception("IgnoreMethodReturnObj must implement IgnoreMethodReturnObj");
            return DoFactoryMethodCall(cTarget, FactoryOperation.Insert, () => cTarget.Insert());
        }

        public IgnoreMethodReturnObj LocalUpdate(IgnoreMethodReturnObj target)
        {
            var cTarget = (IgnoreMethodReturnObj)target ?? throw new Exception("IgnoreMethodReturnObj must implement IgnoreMethodReturnObj");
            return DoFactoryMethodCall(cTarget, FactoryOperation.Update, () => cTarget.Update());
        }

        public virtual IgnoreMethodReturnObj Save(IgnoreMethodReturnObj target)
        {
            return LocalSave(target);
        }

        async Task<IFactorySaveMeta?> IFactorySave<IgnoreMethodReturnObj>.Save(IgnoreMethodReturnObj target)
        {
            return await Task.FromResult((IFactorySaveMeta? )Save(target));
        }

        public virtual IgnoreMethodReturnObj LocalSave(IgnoreMethodReturnObj target)
        {
            if (target.IsDeleted)
            {
                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert(target);
            }
            else
            {
                return LocalUpdate(target);
            }
        }

        public static void FactoryServiceRegistrar(IServiceCollection services, NeatooFactory remoteLocal)
        {
            services.AddScoped<IgnoreMethodReturnObjFactory>();
            services.AddScoped<IIgnoreMethodReturnObjFactory, IgnoreMethodReturnObjFactory>();
            services.AddTransient<IgnoreMethodReturnObj>();
            services.AddScoped<IFactorySave<IgnoreMethodReturnObj>, IgnoreMethodReturnObjFactory>();
        }
    }
}