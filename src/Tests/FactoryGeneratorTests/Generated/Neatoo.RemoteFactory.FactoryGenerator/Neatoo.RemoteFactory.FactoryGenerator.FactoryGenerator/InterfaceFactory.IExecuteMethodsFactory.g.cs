#nullable enable
using Neatoo.RemoteFactory;
using Neatoo.RemoteFactory.Internal;
using Microsoft.Extensions.DependencyInjection;
using Neatoo.RemoteFactory.FactoryGeneratorTests.Shared;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

/*
											READONLY - DO NOT EDIT!!!!
											Generated by Neatoo.RemoteFactory
				*/
namespace Neatoo.RemoteFactory.FactoryGeneratorTests.InterfaceFactory
{
    public interface IExecuteMethodsFactory : IExecuteMethods
    {
    }

    internal class ExecuteMethodsFactory : IExecuteMethodsFactory
    {
        private readonly IServiceProvider ServiceProvider;
        private readonly IMakeRemoteDelegateRequest? MakeRemoteDelegateRequest;
        // Delegates
        public delegate Task<bool> BoolMethodDelegate(bool a, string b);
        public delegate Task<System.Collections.Generic.List<string>> StringListMethodDelegate(List<string> a, int b);
        // Delegate Properties to provide Local or Remote fork in execution
        public BoolMethodDelegate BoolMethodProperty { get; protected set; }
        public StringListMethodDelegate StringListMethodProperty { get; protected set; }

        public ExecuteMethodsFactory(IServiceProvider serviceProvider)
        {
            this.ServiceProvider = serviceProvider;
            BoolMethodProperty = LocalBoolMethod;
            StringListMethodProperty = LocalStringListMethod;
        }

        public ExecuteMethodsFactory(IServiceProvider serviceProvider, IMakeRemoteDelegateRequest remoteMethodDelegate)
        {
            this.ServiceProvider = serviceProvider;
            this.MakeRemoteDelegateRequest = remoteMethodDelegate;
            BoolMethodProperty = RemoteBoolMethod;
            StringListMethodProperty = RemoteStringListMethod;
        }

        public virtual Task<bool> BoolMethod(bool a, string b)
        {
            return BoolMethodProperty(a, b);
        }

        public virtual async Task<bool> RemoteBoolMethod(bool a, string b)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegate<bool>(typeof(BoolMethodDelegate), [a, b]))!;
        }

        public virtual Task<System.Collections.Generic.List<string>> StringListMethod(List<string> a, int b)
        {
            return StringListMethodProperty(a, b);
        }

        public virtual async Task<System.Collections.Generic.List<string>> RemoteStringListMethod(List<string> a, int b)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegate<System.Collections.Generic.List<string>>(typeof(StringListMethodDelegate), [a, b]))!;
        }

        public Task<bool> LocalBoolMethod(bool a, string b)
        {
            var target = ServiceProvider.GetRequiredService<IExecuteMethods>();
            return target.BoolMethod(a, b);
        }

        public Task<System.Collections.Generic.List<string>> LocalStringListMethod(List<string> a, int b)
        {
            var target = ServiceProvider.GetRequiredService<IExecuteMethods>();
            return target.StringListMethod(a, b);
        }

        public static void ClientFactoryServiceRegistrar(IServiceCollection services, NeatooFactory remoteLocal)
        {
            services.AddScoped<IExecuteMethods, ExecuteMethodsFactory>();
            services.AddScoped<IExecuteMethodsFactory, ExecuteMethodsFactory>();
        }

        public static void FactoryServiceRegistrar(IServiceCollection services, NeatooFactory remoteLocal)
        {
            // On the server the Delegates are registered
            // ExecuteMethodsFactory is not used
            // IExecuteMethods must be registered to actual implementation
            if (remoteLocal == NeatooFactory.Server)
            {
                services.AddScoped<IExecuteMethodsFactory, ExecuteMethodsFactory>();
                services.AddScoped<ExecuteMethodsFactory>();
                services.AddScoped<BoolMethodDelegate>(cc =>
                {
                    var factory = cc.GetRequiredService<IExecuteMethodsFactory>();
                    return (bool a, string b) => factory.BoolMethod(a, b);
                });
                services.AddScoped<StringListMethodDelegate>(cc =>
                {
                    var factory = cc.GetRequiredService<IExecuteMethodsFactory>();
                    return (List<string> a, int b) => factory.StringListMethod(a, b);
                });
            }
        }
    }
}