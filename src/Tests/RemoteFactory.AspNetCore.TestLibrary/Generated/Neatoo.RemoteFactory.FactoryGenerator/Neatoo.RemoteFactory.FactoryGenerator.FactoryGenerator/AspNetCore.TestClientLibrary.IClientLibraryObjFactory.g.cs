#nullable enable
using Neatoo.RemoteFactory;
using Neatoo.RemoteFactory.Internal;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

/*
							READONLY - DO NOT EDIT!!!!
							Generated by Neatoo.RemoteFactory
*/
namespace Neatoo.RemoteFactory.AspNetCore.TestClientLibrary
{
    public interface IIClientLibraryObjFactory
    {
        IClientLibraryObj LocalCreate(string name);
    }

    internal class IClientLibraryObjFactory : FactoryBase<IClientLibraryObj>, IIClientLibraryObjFactory
    {
        private readonly IServiceProvider ServiceProvider;
        public IClientLibraryObjFactory(IServiceProvider serviceProvider, IFactoryCore<IClientLibraryObj> factoryCore) : base(factoryCore)
        {
            this.ServiceProvider = serviceProvider;
        }

        public IClientLibraryObjFactory(IServiceProvider serviceProvider, IMakeRemoteDelegateRequest remoteMethodDelegate, IFactoryCore<IClientLibraryObj> factoryCore) : base(factoryCore)
        {
            this.ServiceProvider = serviceProvider;
        }

        public virtual IClientLibraryObj LocalCreate(string name)
        {
            return LocalLocalCreate(name);
        }

        public IClientLibraryObj LocalLocalCreate(string name)
        {
            var target = ServiceProvider.GetRequiredService<ClientLibraryObj>();
            return DoFactoryMethodCall(target, FactoryOperation.Create, () => target.LocalCreate(name));
        }

        public static void FactoryServiceRegistrar(IServiceCollection services, NeatooFactory remoteLocal)
        {
            services.AddScoped<IClientLibraryObjFactory>();
            services.AddScoped<IIClientLibraryObjFactory, IClientLibraryObjFactory>();
            services.AddTransient<ClientLibraryObj>();
            services.AddTransient<IClientLibraryObj, ClientLibraryObj>();
        }
    }
}