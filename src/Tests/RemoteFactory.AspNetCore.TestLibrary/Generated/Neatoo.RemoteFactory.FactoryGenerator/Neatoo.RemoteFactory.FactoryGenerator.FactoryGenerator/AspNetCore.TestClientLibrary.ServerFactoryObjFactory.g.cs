#nullable enable
using Neatoo.RemoteFactory;
using Neatoo.RemoteFactory.Internal;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

/*
							READONLY - DO NOT EDIT!!!!
							Generated by Neatoo.RemoteFactory
*/
namespace Neatoo.RemoteFactory.AspNetCore.TestClientLibrary
{
    public interface IServerFactoryObjFactory
    {
        IServerFactoryObj LocalCreate(string name);
    }

    internal class ServerFactoryObjFactory : FactoryBase<IServerFactoryObj>, IServerFactoryObjFactory
    {
        private readonly IServiceProvider ServiceProvider;
        public ServerFactoryObjFactory(IServiceProvider serviceProvider, IFactoryCore<IServerFactoryObj> factoryCore) : base(factoryCore)
        {
            this.ServiceProvider = serviceProvider;
        }

        public ServerFactoryObjFactory(IServiceProvider serviceProvider, IMakeRemoteDelegateRequest remoteMethodDelegate, IFactoryCore<IServerFactoryObj> factoryCore) : base(factoryCore)
        {
            this.ServiceProvider = serviceProvider;
        }

        public virtual IServerFactoryObj LocalCreate(string name)
        {
            return LocalLocalCreate(name);
        }

        public IServerFactoryObj LocalLocalCreate(string name)
        {
            var target = ServiceProvider.GetRequiredService<ServerFactoryObj>();
            return DoFactoryMethodCall(target, FactoryOperation.Create, () => target.LocalCreate(name));
        }

        public static void FactoryServiceRegistrar(IServiceCollection services, NeatooFactory remoteLocal)
        {
            services.AddScoped<ServerFactoryObjFactory>();
            services.AddScoped<IServerFactoryObjFactory, ServerFactoryObjFactory>();
            services.AddTransient<ServerFactoryObj>();
            services.AddTransient<IServerFactoryObj, ServerFactoryObj>();
        }
    }
}