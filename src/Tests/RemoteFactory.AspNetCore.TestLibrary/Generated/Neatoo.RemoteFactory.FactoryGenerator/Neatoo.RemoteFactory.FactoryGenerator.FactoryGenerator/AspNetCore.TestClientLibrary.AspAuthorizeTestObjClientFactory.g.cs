#nullable enable
#if !EXCLUDECLIENTFACTORIES
using Neatoo.RemoteFactory;
using Neatoo.RemoteFactory.Internal;
using Microsoft.Extensions.DependencyInjection;

/*
							READONLY - DO NOT EDIT!!!!
							Generated by Neatoo.RemoteFactory
*/
namespace Neatoo.RemoteFactory.AspNetCore.TestClientLibrary
{
    public interface IAspAuthorizeTestObjClientFactory
    {
        Task<AspAuthorizeTestObj?> Create(bool hasAccess);
        Task<AspAuthorizeTestObj?> CreateNoAspAuth(bool hasAccess);
        Task<AspAuthorizeTestObj?> CreateMultiple(bool hasAccess);
        Task<AspAuthorizeTestObj?> Save(AspAuthorizeTestObj target, bool hasAccess);
        Task<Authorized<AspAuthorizeTestObj>> TrySave(AspAuthorizeTestObj target, bool hasAccess);
        Task<AspAuthorizeTestObj?> SaveNoAspAuth(AspAuthorizeTestObj target, bool hasAccess);
        Task<Authorized<AspAuthorizeTestObj>> TrySaveNoAspAuth(AspAuthorizeTestObj target, bool hasAccess);
        Task<Authorized> CanCreate(bool hasAccess);
        Task<Authorized> CanCreateNoAspAuth(bool hasAccess);
        Task<Authorized> CanCreateMultiple(bool hasAccess);
        Task<Authorized> CanInsert(bool hasAccess);
        Task<Authorized> CanInsertNoAspAuth(bool hasAccess);
        Task<Authorized> CanSave(bool hasAccess);
        Task<Authorized> CanSaveNoAspAuth(bool hasAccess);
    }

    internal class AspAuthorizeTestObjClientFactory : FactoryBase<AspAuthorizeTestObj>, IAspAuthorizeTestObjClientFactory
    {
        protected readonly IMakeRemoteDelegateRequest? MakeRemoteDelegateRequest;
        // Delegates
        public delegate Task<Authorized<AspAuthorizeTestObj>> CreateDelegate(bool hasAccess);
        public delegate Task<Authorized<AspAuthorizeTestObj>> CreateNoAspAuthDelegate(bool hasAccess);
        public delegate Task<Authorized<AspAuthorizeTestObj>> CreateMultipleDelegate(bool hasAccess);
        public delegate Task<Authorized<AspAuthorizeTestObj>> SaveDelegate(AspAuthorizeTestObj target, bool hasAccess);
        public delegate Task<Authorized<AspAuthorizeTestObj>> SaveNoAspAuthDelegate(AspAuthorizeTestObj target, bool hasAccess);
        public delegate Task<Authorized> CanCreateDelegate(bool hasAccess);
        public delegate Task<Authorized> CanCreateNoAspAuthDelegate(bool hasAccess);
        public delegate Task<Authorized> CanCreateMultipleDelegate(bool hasAccess);
        public delegate Task<Authorized> CanInsertDelegate(bool hasAccess);
        public delegate Task<Authorized> CanInsertNoAspAuthDelegate(bool hasAccess);
        public delegate Task<Authorized> CanSaveDelegate(bool hasAccess);
        public delegate Task<Authorized> CanSaveNoAspAuthDelegate(bool hasAccess);
        // Delegate Properties to provide Local or Remote fork in execution
        public CreateDelegate CreateProperty { get; protected set; }
        public CreateNoAspAuthDelegate CreateNoAspAuthProperty { get; protected set; }
        public CreateMultipleDelegate CreateMultipleProperty { get; protected set; }
        public SaveDelegate SaveProperty { get; protected set; }
        public SaveNoAspAuthDelegate SaveNoAspAuthProperty { get; protected set; }
        public CanCreateDelegate CanCreateProperty { get; protected set; }
        public CanCreateNoAspAuthDelegate CanCreateNoAspAuthProperty { get; protected set; }
        public CanCreateMultipleDelegate CanCreateMultipleProperty { get; protected set; }
        public CanInsertDelegate CanInsertProperty { get; protected set; }
        public CanInsertNoAspAuthDelegate CanInsertNoAspAuthProperty { get; protected set; }
        public CanSaveDelegate CanSaveProperty { get; protected set; }
        public CanSaveNoAspAuthDelegate CanSaveNoAspAuthProperty { get; protected set; }

        public AspAuthorizeTestObjClientFactory(IFactoryCore<AspAuthorizeTestObj> factoryCore) : base(factoryCore)
        {
            CreateProperty = RemoteCreate;
            CreateNoAspAuthProperty = RemoteCreateNoAspAuth;
            CreateMultipleProperty = RemoteCreateMultiple;
            SaveProperty = RemoteSave;
            SaveNoAspAuthProperty = RemoteSaveNoAspAuth;
            CanCreateProperty = RemoteCanCreate;
            CanCreateNoAspAuthProperty = RemoteCanCreateNoAspAuth;
            CanCreateMultipleProperty = RemoteCanCreateMultiple;
            CanInsertProperty = RemoteCanInsert;
            CanInsertNoAspAuthProperty = RemoteCanInsertNoAspAuth;
            CanSaveProperty = RemoteCanSave;
            CanSaveNoAspAuthProperty = RemoteCanSaveNoAspAuth;
        }

        public AspAuthorizeTestObjClientFactory(IMakeRemoteDelegateRequest remoteMethodDelegate, IFactoryCore<AspAuthorizeTestObj> factoryCore) : this(factoryCore)
        {
            this.MakeRemoteDelegateRequest = remoteMethodDelegate;
        }

        public virtual async Task<AspAuthorizeTestObj?> Create(bool hasAccess)
        {
            return (await CreateProperty(hasAccess)).Result;
        }

        public virtual async Task<Authorized<AspAuthorizeTestObj>> RemoteCreate(bool hasAccess)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegate<Authorized<AspAuthorizeTestObj>>(typeof(CreateDelegate), [hasAccess]))!;
        }

        public virtual async Task<AspAuthorizeTestObj?> CreateNoAspAuth(bool hasAccess)
        {
            return (await CreateNoAspAuthProperty(hasAccess)).Result;
        }

        public virtual async Task<Authorized<AspAuthorizeTestObj>> RemoteCreateNoAspAuth(bool hasAccess)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegate<Authorized<AspAuthorizeTestObj>>(typeof(CreateNoAspAuthDelegate), [hasAccess]))!;
        }

        public virtual async Task<AspAuthorizeTestObj?> CreateMultiple(bool hasAccess)
        {
            return (await CreateMultipleProperty(hasAccess)).Result;
        }

        public virtual async Task<Authorized<AspAuthorizeTestObj>> RemoteCreateMultiple(bool hasAccess)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegate<Authorized<AspAuthorizeTestObj>>(typeof(CreateMultipleDelegate), [hasAccess]))!;
        }

        public virtual async Task<AspAuthorizeTestObj?> Save(AspAuthorizeTestObj target, bool hasAccess)
        {
            var authorized = (await SaveProperty(target, hasAccess));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized);
            }

            return authorized.Result;
        }

        public virtual async Task<Authorized<AspAuthorizeTestObj>> TrySave(AspAuthorizeTestObj target, bool hasAccess)
        {
            return await SaveProperty(target, hasAccess);
        }

        public virtual async Task<Authorized<AspAuthorizeTestObj>> RemoteSave(AspAuthorizeTestObj target, bool hasAccess)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegate<Authorized<AspAuthorizeTestObj>>(typeof(SaveDelegate), [target, hasAccess]))!;
        }

        public virtual async Task<AspAuthorizeTestObj?> SaveNoAspAuth(AspAuthorizeTestObj target, bool hasAccess)
        {
            var authorized = (await SaveNoAspAuthProperty(target, hasAccess));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized);
            }

            return authorized.Result;
        }

        public virtual async Task<Authorized<AspAuthorizeTestObj>> TrySaveNoAspAuth(AspAuthorizeTestObj target, bool hasAccess)
        {
            return await SaveNoAspAuthProperty(target, hasAccess);
        }

        public virtual async Task<Authorized<AspAuthorizeTestObj>> RemoteSaveNoAspAuth(AspAuthorizeTestObj target, bool hasAccess)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegate<Authorized<AspAuthorizeTestObj>>(typeof(SaveNoAspAuthDelegate), [target, hasAccess]))!;
        }

        public virtual Task<Authorized> CanCreate(bool hasAccess)
        {
            return CanCreateProperty(hasAccess);
        }

        public virtual async Task<Authorized> RemoteCanCreate(bool hasAccess)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegate<Authorized>(typeof(CanCreateDelegate), [hasAccess]))!;
        }

        public virtual Task<Authorized> CanCreateNoAspAuth(bool hasAccess)
        {
            return CanCreateNoAspAuthProperty(hasAccess);
        }

        public virtual async Task<Authorized> RemoteCanCreateNoAspAuth(bool hasAccess)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegate<Authorized>(typeof(CanCreateNoAspAuthDelegate), [hasAccess]))!;
        }

        public virtual Task<Authorized> CanCreateMultiple(bool hasAccess)
        {
            return CanCreateMultipleProperty(hasAccess);
        }

        public virtual async Task<Authorized> RemoteCanCreateMultiple(bool hasAccess)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegate<Authorized>(typeof(CanCreateMultipleDelegate), [hasAccess]))!;
        }

        public virtual Task<Authorized> CanInsert(bool hasAccess)
        {
            return CanInsertProperty(hasAccess);
        }

        public virtual async Task<Authorized> RemoteCanInsert(bool hasAccess)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegate<Authorized>(typeof(CanInsertDelegate), [hasAccess]))!;
        }

        public virtual Task<Authorized> CanInsertNoAspAuth(bool hasAccess)
        {
            return CanInsertNoAspAuthProperty(hasAccess);
        }

        public virtual async Task<Authorized> RemoteCanInsertNoAspAuth(bool hasAccess)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegate<Authorized>(typeof(CanInsertNoAspAuthDelegate), [hasAccess]))!;
        }

        public virtual Task<Authorized> CanSave(bool hasAccess)
        {
            return CanSaveProperty(hasAccess);
        }

        public virtual async Task<Authorized> RemoteCanSave(bool hasAccess)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegate<Authorized>(typeof(CanSaveDelegate), [hasAccess]))!;
        }

        public virtual Task<Authorized> CanSaveNoAspAuth(bool hasAccess)
        {
            return CanSaveNoAspAuthProperty(hasAccess);
        }

        public virtual async Task<Authorized> RemoteCanSaveNoAspAuth(bool hasAccess)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegate<Authorized>(typeof(CanSaveNoAspAuthDelegate), [hasAccess]))!;
        }

        public static void ClientFactoryServiceRegistrar(IServiceCollection services, NeatooFactory remoteLocal)
        {
            services.AddScoped<IAspAuthorizeTestObjClientFactory, AspAuthorizeTestObjClientFactory>();
        }
    }
}
#endif
