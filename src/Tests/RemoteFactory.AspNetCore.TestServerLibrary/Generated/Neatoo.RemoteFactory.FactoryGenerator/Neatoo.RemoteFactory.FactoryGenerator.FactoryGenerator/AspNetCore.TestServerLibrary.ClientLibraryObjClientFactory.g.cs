#nullable enable
#if !EXCLUDECLIENTFACTORIES
using Neatoo.RemoteFactory;
using Neatoo.RemoteFactory.Internal;
using Microsoft.Extensions.DependencyInjection;
using Neatoo.RemoteFactory.AspNetCore.TestClientLibrary;

/*
							READONLY - DO NOT EDIT!!!!
							Generated by Neatoo.RemoteFactory
*/
namespace Neatoo.RemoteFactory.AspNetCore.TestServerLibrary
{
    public interface IClientLibraryObjClientFactory
    {
        Task<IClientLibraryObj> Create(string name);
        Task<IClientLibraryObj> Save(IClientLibraryObj target);
    }

    internal class ClientLibraryObjClientFactory : FactorySaveBase<IClientLibraryObj>, IClientLibraryObjClientFactory
    {
        protected readonly IMakeRemoteDelegateRequest? MakeRemoteDelegateRequest;
        // Delegates
        public delegate Task<IClientLibraryObj> CreateDelegate(string name);
        public delegate Task<IClientLibraryObj> SaveDelegate(IClientLibraryObj target);
        // Delegate Properties to provide Local or Remote fork in execution
        public CreateDelegate CreateProperty { get; protected set; }
        public SaveDelegate SaveProperty { get; protected set; }

        public ClientLibraryObjClientFactory(IFactoryCore<IClientLibraryObj> factoryCore) : base(factoryCore)
        {
            CreateProperty = RemoteCreate;
            SaveProperty = RemoteSave;
        }

        public ClientLibraryObjClientFactory(IMakeRemoteDelegateRequest remoteMethodDelegate, IFactoryCore<IClientLibraryObj> factoryCore) : this(factoryCore)
        {
            this.MakeRemoteDelegateRequest = remoteMethodDelegate;
        }

        public virtual Task<IClientLibraryObj> Create(string name)
        {
            return CreateProperty(name);
        }

        public virtual async Task<IClientLibraryObj> RemoteCreate(string name)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegate<IClientLibraryObj>(typeof(CreateDelegate), [name]))!;
        }

        public virtual Task<IClientLibraryObj> Save(IClientLibraryObj target)
        {
            return SaveProperty(target);
        }

        public virtual async Task<IClientLibraryObj> RemoteSave(IClientLibraryObj target)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegate<IClientLibraryObj>(typeof(SaveDelegate), [target]))!;
        }

        public static void ClientFactoryServiceRegistrar(IServiceCollection services, NeatooFactory remoteLocal)
        {
            services.AddScoped<IClientLibraryObjClientFactory, ClientLibraryObjClientFactory>();
        }
    }
}
#endif
