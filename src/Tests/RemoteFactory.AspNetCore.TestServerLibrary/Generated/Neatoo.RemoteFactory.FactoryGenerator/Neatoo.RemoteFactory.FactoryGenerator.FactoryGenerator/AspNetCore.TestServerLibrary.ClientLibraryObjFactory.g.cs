#nullable enable
using Neatoo.RemoteFactory;
using Neatoo.RemoteFactory.Internal;
using Microsoft.Extensions.DependencyInjection;
using Neatoo.RemoteFactory.AspNetCore.TestClientLibrary;

/*
							READONLY - DO NOT EDIT!!!!
							Generated by Neatoo.RemoteFactory
*/
namespace Neatoo.RemoteFactory.AspNetCore.TestServerLibrary
{
    public interface IClientLibraryObjFactory : IClientLibraryObjClientFactory
    {
    }

    internal class ClientLibraryObjServerExtFactory : ClientLibraryObjClientFactory, IClientLibraryObjFactory, IFactorySave<IClientLibraryObj>
    {
        private readonly IServiceProvider ServiceProvider;
        public ClientLibraryObjServerExtFactory(IServiceProvider serviceProvider, IFactoryCore<IClientLibraryObj> factoryCore) : base(factoryCore)
        {
            this.ServiceProvider = serviceProvider;
            CreateProperty = LocalCreate;
            SaveProperty = LocalSave;
        }

        public ClientLibraryObjServerExtFactory(IServiceProvider serviceProvider, IMakeRemoteDelegateRequest remoteMethodDelegate, IFactoryCore<IClientLibraryObj> factoryCore) : base(remoteMethodDelegate, factoryCore)
        {
            this.ServiceProvider = serviceProvider;
        }

        public Task<IClientLibraryObj> LocalCreate(string name)
        {
            var target = ServiceProvider.GetRequiredService<ClientLibraryObjServerExt>();
            return Task.FromResult(DoFactoryMethodCall(target, FactoryOperation.Create, () => target.Create(name)));
        }

        public Task<IClientLibraryObj> LocalInsert(IClientLibraryObj target)
        {
            var cTarget = (ClientLibraryObjServerExt)target ?? throw new Exception("IClientLibraryObj must implement ClientLibraryObjServerExt");
            return Task.FromResult(DoFactoryMethodCall(cTarget, FactoryOperation.Insert, () => cTarget.Insert()));
        }

        public Task<IClientLibraryObj> LocalUpdate(IClientLibraryObj target)
        {
            var cTarget = (ClientLibraryObjServerExt)target ?? throw new Exception("IClientLibraryObj must implement ClientLibraryObjServerExt");
            return Task.FromResult(DoFactoryMethodCall(cTarget, FactoryOperation.Update, () => cTarget.Update()));
        }

        public virtual async Task<IClientLibraryObj> LocalSave(IClientLibraryObj target)
        {
            if (target.IsDeleted)
            {
                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return await LocalInsert(target);
            }
            else
            {
                return await LocalUpdate(target);
            }
        }

        async Task<IFactorySaveMeta?> IFactorySave<IClientLibraryObj>.Save(IClientLibraryObj target)
        {
            return (IFactorySaveMeta? )await Save(target);
        }

        public static void FactoryServiceRegistrar(IServiceCollection services, NeatooFactory remoteLocal)
        {
            services.AddScoped<ClientLibraryObjServerExtFactory>();
            services.AddScoped<IClientLibraryObjFactory, ClientLibraryObjServerExtFactory>();
            services.AddScoped<CreateDelegate>(cc =>
            {
                var factory = cc.GetRequiredService<ClientLibraryObjServerExtFactory>();
                return (string name) => factory.LocalCreate(name);
            });
            services.AddScoped<SaveDelegate>(cc =>
            {
                var factory = cc.GetRequiredService<ClientLibraryObjServerExtFactory>();
                return (IClientLibraryObj target) => factory.LocalSave(target);
            });
            services.AddTransient<ClientLibraryObjServerExt>();
            services.AddTransient<IClientLibraryObj, ClientLibraryObjServerExt>();
            services.AddScoped<IFactorySave<IClientLibraryObj>, ClientLibraryObjServerExtFactory>();
        }
    }
}