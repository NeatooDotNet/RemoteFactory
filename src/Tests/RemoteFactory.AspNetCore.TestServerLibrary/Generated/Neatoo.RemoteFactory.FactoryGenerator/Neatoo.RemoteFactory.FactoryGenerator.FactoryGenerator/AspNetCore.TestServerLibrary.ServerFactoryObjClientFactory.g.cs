#nullable enable
#if !EXCLUDECLIENTFACTORIES
using Neatoo.RemoteFactory;
using Neatoo.RemoteFactory.Internal;
using Microsoft.Extensions.DependencyInjection;
using Neatoo.RemoteFactory.AspNetCore.TestClientLibrary;

/*
							READONLY - DO NOT EDIT!!!!
							Generated by Neatoo.RemoteFactory
*/
namespace Neatoo.RemoteFactory.AspNetCore.TestServerLibrary
{
    public interface IServerFactoryObjClientFactory
    {
        Task<IServerFactoryObj> Create(string name);
        Task<IServerFactoryObj> Save(IServerFactoryObj target);
    }

    internal class ServerFactoryObjClientFactory : FactorySaveBase<IServerFactoryObj>, IServerFactoryObjClientFactory
    {
        protected readonly IMakeRemoteDelegateRequest? MakeRemoteDelegateRequest;
        // Delegates
        public delegate Task<IServerFactoryObj> CreateDelegate(string name);
        public delegate Task<IServerFactoryObj> SaveDelegate(IServerFactoryObj target);
        // Delegate Properties to provide Local or Remote fork in execution
        public CreateDelegate CreateProperty { get; protected set; }
        public SaveDelegate SaveProperty { get; protected set; }

        public ServerFactoryObjClientFactory(IFactoryCore<IServerFactoryObj> factoryCore) : base(factoryCore)
        {
            CreateProperty = RemoteCreate;
            SaveProperty = RemoteSave;
        }

        public ServerFactoryObjClientFactory(IMakeRemoteDelegateRequest remoteMethodDelegate, IFactoryCore<IServerFactoryObj> factoryCore) : this(factoryCore)
        {
            this.MakeRemoteDelegateRequest = remoteMethodDelegate;
        }

        public virtual Task<IServerFactoryObj> Create(string name)
        {
            return CreateProperty(name);
        }

        public virtual async Task<IServerFactoryObj> RemoteCreate(string name)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegate<IServerFactoryObj>(typeof(CreateDelegate), [name]))!;
        }

        public virtual Task<IServerFactoryObj> Save(IServerFactoryObj target)
        {
            return SaveProperty(target);
        }

        public virtual async Task<IServerFactoryObj> RemoteSave(IServerFactoryObj target)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegate<IServerFactoryObj>(typeof(SaveDelegate), [target]))!;
        }

        public static void ClientFactoryServiceRegistrar(IServiceCollection services, NeatooFactory remoteLocal)
        {
            services.AddScoped<IServerFactoryObjClientFactory, ServerFactoryObjClientFactory>();
        }
    }
}
#endif
