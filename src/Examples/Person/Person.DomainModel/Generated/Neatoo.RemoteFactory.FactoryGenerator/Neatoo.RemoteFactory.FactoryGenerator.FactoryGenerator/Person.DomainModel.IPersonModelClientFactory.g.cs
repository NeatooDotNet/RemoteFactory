#nullable enable
#if !EXCLUDECLIENTFACTORIES
using Neatoo.RemoteFactory;
using Neatoo.RemoteFactory.Internal;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Conventions;
using Person.Ef;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.CompilerServices;

/*
							READONLY - DO NOT EDIT!!!!
							Generated by Neatoo.RemoteFactory
*/
namespace Person.DomainModel
{
    public interface IIPersonModelClientFactory
    {
        Task<IPersonModel?> Fetch();
        Task<IPersonModel?> Save(IPersonModel target);
        Task<Authorized<IPersonModel>> TrySave(IPersonModel target);
    }

    internal class IPersonModelClientFactory : FactorySaveBase<IPersonModel>, IIPersonModelClientFactory
    {
        protected readonly IMakeRemoteDelegateRequest? MakeRemoteDelegateRequest;
        // Delegates
        public delegate Task<Authorized<IPersonModel>> FetchDelegate();
        public delegate Task<Authorized<IPersonModel>> SaveDelegate(IPersonModel target);
        // Delegate Properties to provide Local or Remote fork in execution
        public FetchDelegate FetchProperty { get; protected set; }
        public SaveDelegate SaveProperty { get; protected set; }

        public IPersonModelClientFactory(IFactoryCore<IPersonModel> factoryCore) : base(factoryCore)
        {
            FetchProperty = RemoteFetch;
            SaveProperty = RemoteSave;
        }

        public IPersonModelClientFactory(IMakeRemoteDelegateRequest remoteMethodDelegate, IFactoryCore<IPersonModel> factoryCore) : this(factoryCore)
        {
            this.MakeRemoteDelegateRequest = remoteMethodDelegate;
        }

        public virtual async Task<IPersonModel?> Fetch()
        {
            return (await FetchProperty()).Result;
        }

        public virtual async Task<Authorized<IPersonModel>> RemoteFetch()
        {
            return (await MakeRemoteDelegateRequest!.ForDelegate<Authorized<IPersonModel>>(typeof(FetchDelegate), []))!;
        }

        public virtual async Task<IPersonModel?> Save(IPersonModel target)
        {
            var authorized = (await SaveProperty(target));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized);
            }

            return authorized.Result;
        }

        public virtual async Task<Authorized<IPersonModel>> TrySave(IPersonModel target)
        {
            return await SaveProperty(target);
        }

        public virtual async Task<Authorized<IPersonModel>> RemoteSave(IPersonModel target)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegate<Authorized<IPersonModel>>(typeof(SaveDelegate), [target]))!;
        }

        public static void ClientFactoryServiceRegistrar(IServiceCollection services, NeatooFactory remoteLocal)
        {
            services.AddScoped<IIPersonModelClientFactory, IPersonModelClientFactory>();
        }
    }
}
#endif
