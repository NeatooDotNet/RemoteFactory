#nullable enable
#if !EXCLUDECLIENTFACTORIES
using Neatoo.RemoteFactory;
using Neatoo.RemoteFactory.Internal;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.EntityFrameworkCore;
using Person.Ef;

/*
							READONLY - DO NOT EDIT!!!!
							Generated by Neatoo.RemoteFactory
*/
namespace Person.DomainModel.Server
{
    public interface IPersonModelClientFactory
    {
        Task<IPersonModel> Create();
        Task<IPersonModel?> Fetch();
        Task<IPersonModel?> Save(IPersonModel target);
    }

    internal class PersonModelClientFactory : FactorySaveBase<IPersonModel>, IPersonModelClientFactory
    {
        protected readonly IMakeRemoteDelegateRequest? MakeRemoteDelegateRequest;
        // Delegates
        public delegate Task<IPersonModel> CreateDelegate();
        public delegate Task<IPersonModel?> FetchDelegate();
        public delegate Task<IPersonModel?> SaveDelegate(IPersonModel target);
        // Delegate Properties to provide Local or Remote fork in execution
        public CreateDelegate CreateProperty { get; protected set; }
        public FetchDelegate FetchProperty { get; protected set; }
        public SaveDelegate SaveProperty { get; protected set; }

        public PersonModelClientFactory(IFactoryCore<IPersonModel> factoryCore) : base(factoryCore)
        {
            CreateProperty = RemoteCreate;
            FetchProperty = RemoteFetch;
            SaveProperty = RemoteSave;
        }

        public PersonModelClientFactory(IMakeRemoteDelegateRequest remoteMethodDelegate, IFactoryCore<IPersonModel> factoryCore) : this(factoryCore)
        {
            this.MakeRemoteDelegateRequest = remoteMethodDelegate;
        }

        public virtual Task<IPersonModel> Create()
        {
            return CreateProperty();
        }

        public virtual async Task<IPersonModel> RemoteCreate()
        {
            return (await MakeRemoteDelegateRequest!.ForDelegate<IPersonModel>(typeof(CreateDelegate), []))!;
        }

        public virtual Task<IPersonModel?> Fetch()
        {
            return FetchProperty();
        }

        public virtual async Task<IPersonModel?> RemoteFetch()
        {
            return (await MakeRemoteDelegateRequest!.ForDelegateNullable<IPersonModel?>(typeof(FetchDelegate), []))!;
        }

        public virtual Task<IPersonModel?> Save(IPersonModel target)
        {
            return SaveProperty(target);
        }

        public virtual async Task<IPersonModel?> RemoteSave(IPersonModel target)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegateNullable<IPersonModel?>(typeof(SaveDelegate), [target]))!;
        }

        public static void ClientFactoryServiceRegistrar(IServiceCollection services, NeatooFactory remoteLocal)
        {
            services.AddScoped<IPersonModelClientFactory, PersonModelClientFactory>();
        }
    }
}
#endif
