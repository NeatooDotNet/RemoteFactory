#nullable enable
using Neatoo.RemoteFactory;
using Neatoo.RemoteFactory.Internal;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.EntityFrameworkCore;
using Person.Ef;

/*
							READONLY - DO NOT EDIT!!!!
							Generated by Neatoo.RemoteFactory
*/
namespace Person.DomainModel.Server
{
    public interface IPersonModelFactory : IPersonModelClientFactory
    {
    }

    internal class PersonModelServerFactory : PersonModelClientFactory, IPersonModelFactory, IFactorySave<IPersonModel>
    {
        private readonly IServiceProvider ServiceProvider;
        public PersonModelServerFactory(IServiceProvider serviceProvider, IFactoryCore<IPersonModel> factoryCore) : base(factoryCore)
        {
            this.ServiceProvider = serviceProvider;
            CreateProperty = LocalCreate;
            FetchProperty = LocalFetch;
            SaveProperty = LocalSave;
        }

        public PersonModelServerFactory(IServiceProvider serviceProvider, IMakeRemoteDelegateRequest remoteMethodDelegate, IFactoryCore<IPersonModel> factoryCore) : base(remoteMethodDelegate, factoryCore)
        {
            this.ServiceProvider = serviceProvider;
        }

        public Task<IPersonModel> LocalCreate()
        {
            var target = ServiceProvider.GetRequiredService<PersonModelServer>();
            return Task.FromResult(DoFactoryMethodCall(target, FactoryOperation.Create, () => target.Create()));
        }

        public Task<IPersonModel?> LocalFetch()
        {
            var target = ServiceProvider.GetRequiredService<PersonModelServer>();
            var personContext = ServiceProvider.GetRequiredService<IPersonContext>();
            return DoFactoryMethodCallBoolAsync(target, FactoryOperation.Fetch, () => target.Fetch(personContext));
        }

        public Task<IPersonModel> LocalUpsert(IPersonModel target)
        {
            var cTarget = (PersonModelServer)target ?? throw new Exception("IPersonModel must implement PersonModelServer");
            var personContext = ServiceProvider.GetRequiredService<IPersonContext>();
            return DoFactoryMethodCallAsync(cTarget, FactoryOperation.Update, () => cTarget.Upsert(personContext));
        }

        public Task<IPersonModel> LocalUpsert1(IPersonModel target)
        {
            var cTarget = (PersonModelServer)target ?? throw new Exception("IPersonModel must implement PersonModelServer");
            var personContext = ServiceProvider.GetRequiredService<IPersonContext>();
            return DoFactoryMethodCallAsync(cTarget, FactoryOperation.Insert, () => cTarget.Upsert(personContext));
        }

        public Task<IPersonModel> LocalDelete(IPersonModel target)
        {
            var cTarget = (PersonModelServer)target ?? throw new Exception("IPersonModel must implement PersonModelServer");
            var personContext = ServiceProvider.GetRequiredService<IPersonContext>();
            return DoFactoryMethodCallAsync(cTarget, FactoryOperation.Delete, () => cTarget.Delete(personContext));
        }

        public virtual async Task<IPersonModel?> LocalSave(IPersonModel target)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return default(IPersonModel);
                }

                return await LocalDelete(target);
            }
            else if (target.IsNew)
            {
                return await LocalUpsert1(target);
            }
            else
            {
                return await LocalUpsert(target);
            }
        }

        async Task<IFactorySaveMeta?> IFactorySave<IPersonModel>.Save(IPersonModel target)
        {
            return (IFactorySaveMeta? )await Save(target);
        }

        public static void FactoryServiceRegistrar(IServiceCollection services, NeatooFactory remoteLocal)
        {
            services.AddScoped<PersonModelServerFactory>();
            services.AddScoped<IPersonModelFactory, PersonModelServerFactory>();
            services.AddScoped<CreateDelegate>(cc =>
            {
                var factory = cc.GetRequiredService<PersonModelServerFactory>();
                return () => factory.LocalCreate();
            });
            services.AddScoped<FetchDelegate>(cc =>
            {
                var factory = cc.GetRequiredService<PersonModelServerFactory>();
                return () => factory.LocalFetch();
            });
            services.AddScoped<SaveDelegate>(cc =>
            {
                var factory = cc.GetRequiredService<PersonModelServerFactory>();
                return (IPersonModel target) => factory.LocalSave(target);
            });
            services.AddTransient<PersonModelServer>();
            services.AddTransient<IPersonModel, PersonModelServer>();
            services.AddScoped<IFactorySave<IPersonModel>, PersonModelServerFactory>();
        }
    }
}