@page "/"

@using Person.DomainModel
@inject IPersonModelFactory PersonModelFactory
@inject IUser User

<div class="h3">User Role:</div>
<div class="row">
    <div class="row">
        <div class="col">
            <InputRadioGroup @bind-Value="selectedRole" class="form-check-inline">
                <div class="form-check-inline">
                    <InputRadio id="create" class="form-check-input" Value="Role.None" />
                    <label for="create" class="form-check-label">None</label>
                </div>
                <div class="form-check-inline">
                    <InputRadio id="create" class="form-check-input" Value="Role.Create" />
                    <label for="create" class="form-check-label">Create</label>
                </div>
                <div class="form-check-inline">
                    <InputRadio id="fetch" class="form-check-input" Value="Role.Fetch" />
                    <label for="fetch" class="form-check-label">Fetch</label>
                </div>
                <div class="form-check-inline">
                    <InputRadio id="save" class="form-check-input" Value="Role.Update" />
                    <label for="save" class="form-check-label">Update</label>
                </div>
                <div class="form-check-inline">
                    <InputRadio id="delete" class="form-check-input" Value="Role.Delete" />
                    <label for="delete" class="form-check-label">Delete</label>
                </div>
            </InputRadioGroup>
        </div>
    </div>
</div>

<div class="h3">Person</div>

@if (PersonModel == null)
{
    <div class="h4">
        <p>Not loaded</p>
    </div>
}
else
{
    <EditForm Model="PersonModel" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label for="firstName" class="form-label">First Name</label>
            <InputText id="firstName" class="form-control" @bind-Value="PersonModel.FirstName" />
            <ValidationMessage For="@(() => PersonModel.FirstName)" />
        </div>

        <div class="mb-3">
            <label for="lastName" class="form-label">Last Name</label>
            <InputText id="lastName" class="form-control" @bind-Value="PersonModel.LastName" />
            <ValidationMessage For="@(() => PersonModel.LastName)" />
        </div>

        <div class="mb-3">
            <label for="email" class="form-label">Email</label>
            <InputText id="email" class="form-control" @bind-Value="PersonModel.Email" />
        </div>

        <div class="mb-3">
            <label for="phone" class="form-label">Phone</label>
            <InputText id="phone" class="form-control" @bind-Value="PersonModel.Phone" />
        </div>

        <div class="mb-3">
            <label for="notes" class="form-label">Notes</label>
            <InputTextArea id="notes" class="form-control" @bind-Value="PersonModel.Notes" />
        </div>

        <button type="submit" class="btn btn-primary" disabled="@(!CanUpdate)">Update</button>
    </EditForm>
}

<button type="button" class="btn btn-primary" @onclick="Create" disabled="@(!CanCreate)">Create</button>
<button type="button" class="btn btn-primary" @onclick="Fetch" disabled="@(!CanFetch)">Fetch</button>
<button type="button" class="btn btn-primary" @onclick="Delete" disabled="@(!CanDelete)">Delete</button>

@code {

    public IPersonModel? PersonModel { get; set; } = default!;

    private bool CanCreate { get; set; }
    private bool CanFetch { get; set; }
    private bool CanUpdate { get; set; }
    private bool CanDelete { get; set; }

    public Role selectedRole
    {
        get;
        set
        {
            field = value;
            UserRoleChanged();
        }
    } = default!;

    [Inject(Key = Neatoo.RemoteFactory.RemoteFactoryServices.HttpClientKey)]
    private HttpClient httpClient { get; set; } = default!;

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    private async Task HandleValidSubmit()
    {
        // Handle the form submission, e.g., save the data to the database
        PersonModel = await PersonModelFactory.Save(PersonModel!);
    }

    private async Task Fetch()
    {
        // Fetch the person data, e.g., from a database
        PersonModel = await PersonModelFactory.Fetch();
    }

    private void Create()
    {
        PersonModel = PersonModelFactory.Create();
    }

    private async Task Delete()
    {
        this.PersonModel!.IsDeleted = true;
        await PersonModelFactory.Save(PersonModel!);
        this.PersonModel = null;
    }

    private void UserRoleChanged()
    {
        try
        {
            httpClient.DefaultRequestHeaders.Remove("UserRoles");
            httpClient.DefaultRequestHeaders.Add("UserRoles", selectedRole.ToString());
            if (selectedRole == Role.None)
            {
                PersonModel = null;
            }

            User.Role = selectedRole;
            CanCreate = PersonModelFactory.CanCreate();
            CanFetch = PersonModelFactory.CanFetch();
            CanUpdate = PersonModelFactory.CanUpsert();
            CanDelete = PersonModelFactory.CanDelete();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }

}